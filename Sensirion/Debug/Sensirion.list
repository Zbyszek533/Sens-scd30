
Sensirion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08009b20  08009b20  00019b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001dc  0800a178  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800a178  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b470  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ba  00000000  00000000  0003b67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293f3  00000000  00000000  00040dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189c9  00000000  00000000  0006a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7040  00000000  00000000  00082b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c4  00000000  00000000  00179c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b04 	.word	0x08009b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009b04 	.word	0x08009b04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_GPIO_Init+0x44>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_I2C1_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30408CFF;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <MX_I2C1_Init+0x7c>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f24:	f001 f8a2 	bl	800206c <HAL_I2C_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2e:	f000 f953 	bl	80011d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f36:	f001 fc1b 	bl	8002770 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 f94a 	bl	80011d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_I2C1_Init+0x74>)
 8000f48:	f001 fc5d 	bl	8002806 <HAL_I2CEx_ConfigDigitalFilter>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f000 f941 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000204 	.word	0x20000204
 8000f60:	40005400 	.word	0x40005400
 8000f64:	30408cff 	.word	0x30408cff

08000f68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0ac      	sub	sp, #176	; 0xb0
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2288      	movs	r2, #136	; 0x88
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 f855 	bl	8007038 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <HAL_I2C_MspInit+0xb0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d13a      	bne.n	800100e <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f98:	2340      	movs	r3, #64	; 0x40
 8000f9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 facb 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fb0:	f000 f912 	bl	80011d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_I2C_MspInit+0xb4>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <HAL_I2C_MspInit+0xb4>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_I2C_MspInit+0xb4>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fcc:	23c0      	movs	r3, #192	; 0xc0
 8000fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_I2C_MspInit+0xb8>)
 8000ff2:	f000 fe91 	bl	8001d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_I2C_MspInit+0xb4>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_I2C_MspInit+0xb4>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_I2C_MspInit+0xb4>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	37b0      	adds	r7, #176	; 0xb0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40005400 	.word	0x40005400
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f000 fc70 	bl	800190e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f83f 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f7ff ff35 	bl	8000ea0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001036:	f7ff ff57 	bl	8000ee8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800103a:	f000 fbab 	bl	8001794 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800103e:	f000 fa2d 	bl	800149c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001042:	f000 fad5 	bl	80015f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001046:	4813      	ldr	r0, [pc, #76]	; (8001094 <main+0x70>)
 8001048:	f002 ff8e 	bl	8003f68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <main+0x74>)
 800104e:	f002 ff8b 	bl	8003f68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001052:	2100      	movs	r1, #0
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <main+0x70>)
 8001056:	f003 f9c1 	bl	80043dc <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 800105a:	2104      	movs	r1, #4
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <main+0x70>)
 800105e:	f003 f9bd 	bl	80043dc <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001062:	2108      	movs	r1, #8
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <main+0x70>)
 8001066:	f003 f851 	bl	800410c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 800106a:	2201      	movs	r2, #1
 800106c:	490b      	ldr	r1, [pc, #44]	; (800109c <main+0x78>)
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <main+0x7c>)
 8001070:	f004 fd4e 	bl	8005b10 <HAL_UART_Receive_IT>

  printf("Witam Pana prezesa!\n");
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0x80>)
 8001076:	f006 fcd7 	bl	8007a28 <puts>

  uint8_t ekspander;

//  HAL_I2C_Mem_Read(&hi2c1, 0x40, 0x01, 1, 0x02, 1, HAL_MAX_DELAY);  P0 ON

  printf("Odczytane wartosci: %d\n", ekspander);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4619      	mov	r1, r3
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <main+0x84>)
 8001080:	f006 fc4c 	bl	800791c <iprintf>


while (1) {

	if(readValue == 1)
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <main+0x88>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d1fb      	bne.n	8001084 <main+0x60>
	{
	//	printf("Odczytane wartosci:\n");
	//	odczyt();
		readValue = 0;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <main+0x88>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
	if(readValue == 1)
 8001092:	e7f7      	b.n	8001084 <main+0x60>
 8001094:	200002a0 	.word	0x200002a0
 8001098:	20000254 	.word	0x20000254
 800109c:	20000250 	.word	0x20000250
 80010a0:	200002ec 	.word	0x200002ec
 80010a4:	08009b20 	.word	0x08009b20
 80010a8:	08009b34 	.word	0x08009b34
 80010ac:	20000251 	.word	0x20000251

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	; 0x58
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2244      	movs	r2, #68	; 0x44
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 ffba 	bl	8007038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d6:	f001 fbf1 	bl	80028bc <HAL_PWREx_ControlVoltageScaling>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e0:	f000 f87a 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001100:	2328      	movs	r3, #40	; 0x28
 8001102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001104:	2307      	movs	r3, #7
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fc27 	bl	8002968 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001120:	f000 f85a 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2104      	movs	r1, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fff9 	bl	8003134 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001148:	f000 f846 	bl	80011d8 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3758      	adds	r7, #88	; 0x58
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d102      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		readValue = 1;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	{
			//	uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
			//	uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
			//	printf("Dystans = %.1f cm\n", (stop - start) / 58.0f);
	}
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000254 	.word	0x20000254
 800117c:	20000251 	.word	0x20000251

08001180 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_UART_RxCpltCallback+0x44>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10e      	bne.n	80011b0 <HAL_UART_RxCpltCallback+0x30>
	{
		 HAL_I2C_Master_Transmit(&hi2c1, 0x40, &znak, 1, HAL_MAX_DELAY);
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <HAL_UART_RxCpltCallback+0x48>)
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <HAL_UART_RxCpltCallback+0x4c>)
 80011a0:	f000 fff4 	bl	800218c <HAL_I2C_Master_Transmit>
		 printf("Zapisano wartosc: %d\n", znak);
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_UART_RxCpltCallback+0x48>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <HAL_UART_RxCpltCallback+0x50>)
 80011ac:	f006 fbb6 	bl	800791c <iprintf>
	}
		HAL_UART_Receive_IT(&huart2, &znak, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	4905      	ldr	r1, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0x48>)
 80011b4:	4807      	ldr	r0, [pc, #28]	; (80011d4 <HAL_UART_RxCpltCallback+0x54>)
 80011b6:	f004 fcab 	bl	8005b10 <HAL_UART_Receive_IT>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	20000250 	.word	0x20000250
 80011cc:	20000204 	.word	0x20000204
 80011d0:	08009b4c 	.word	0x08009b4c
 80011d4:	200002ec 	.word	0x200002ec

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <__io_putchar>:
#include <stdio.h>
#include <printf_uart.h>
#include "usart.h"

int __io_putchar(int ch)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d102      	bne.n	80011f8 <__io_putchar+0x14>
    __io_putchar('\r');
 80011f2:	200d      	movs	r0, #13
 80011f4:	f7ff fff6 	bl	80011e4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80011f8:	1d39      	adds	r1, r7, #4
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	2201      	movs	r2, #1
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <__io_putchar+0x2c>)
 8001202:	f004 fbf1 	bl	80059e8 <HAL_UART_Transmit>

  return 1;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002ec 	.word	0x200002ec

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x44>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_MspInit+0x44>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6613      	str	r3, [r2, #96]	; 0x60
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_MspInit+0x44>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_MspInit+0x44>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6593      	str	r3, [r2, #88]	; 0x58
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 fb86 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM2_IRQHandler+0x10>)
 80012b6:	f003 f98d 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002a0 	.word	0x200002a0

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f004 fc77 	bl	8005bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002ec 	.word	0x200002ec

080012d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM6_DAC_IRQHandler+0x10>)
 80012de:	f003 f979 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000254 	.word	0x20000254

080012ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return 1;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_kill>:

int _kill(int pid, int sig)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001306:	f005 fe6d 	bl	8006fe4 <__errno>
 800130a:	4603      	mov	r3, r0
 800130c:	2216      	movs	r2, #22
 800130e:	601a      	str	r2, [r3, #0]
	return -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_exit>:

void _exit (int status)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffe7 	bl	80012fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800132e:	e7fe      	b.n	800132e <_exit+0x12>

08001330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00a      	b.n	8001358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001342:	f3af 8000 	nop.w
 8001346:	4601      	mov	r1, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	b2ca      	uxtb	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf0      	blt.n	8001342 <_read+0x12>
	}

return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e009      	b.n	8001390 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff2d 	bl	80011e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <_write+0x12>
	}
	return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_close>:

int _close(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ca:	605a      	str	r2, [r3, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_isatty>:

int _isatty(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return 1;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f005 fdd2 	bl	8006fe4 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20018000 	.word	0x20018000
 800146c:	00000400 	.word	0x00000400
 8001470:	200001f8 	.word	0x200001f8
 8001474:	20000388 	.word	0x20000388

08001478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b092      	sub	sp, #72	; 0x48
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80014de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80014e4:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80014e6:	224f      	movs	r2, #79	; 0x4f
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80014f0:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80014f2:	4a3e      	ldr	r2, [pc, #248]	; (80015ec <MX_TIM2_Init+0x150>)
 80014f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001502:	4839      	ldr	r0, [pc, #228]	; (80015e8 <MX_TIM2_Init+0x14c>)
 8001504:	f002 fcd8 	bl	8003eb8 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800150e:	f7ff fe63 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800151c:	4619      	mov	r1, r3
 800151e:	4832      	ldr	r0, [pc, #200]	; (80015e8 <MX_TIM2_Init+0x14c>)
 8001520:	f003 fb28 	bl	8004b74 <HAL_TIM_ConfigClockSource>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800152a:	f7ff fe55 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800152e:	482e      	ldr	r0, [pc, #184]	; (80015e8 <MX_TIM2_Init+0x14c>)
 8001530:	f002 fef2 	bl	8004318 <HAL_TIM_IC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800153a:	f7ff fe4d 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800153e:	482a      	ldr	r0, [pc, #168]	; (80015e8 <MX_TIM2_Init+0x14c>)
 8001540:	f002 fd82 	bl	8004048 <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800154a:	f7ff fe45 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	4619      	mov	r1, r3
 800155c:	4822      	ldr	r0, [pc, #136]	; (80015e8 <MX_TIM2_Init+0x14c>)
 800155e:	f004 f94f 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001568:	f7ff fe36 	bl	80011d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	4818      	ldr	r0, [pc, #96]	; (80015e8 <MX_TIM2_Init+0x14c>)
 8001586:	f003 f944 	bl	8004812 <HAL_TIM_IC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001590:	f7ff fe22 	bl	80011d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2204      	movs	r2, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80015a6:	f003 f934 	bl	8004812 <HAL_TIM_IC_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80015b0:	f7ff fe12 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80015b8:	230a      	movs	r3, #10
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2208      	movs	r2, #8
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80015cc:	f003 f9be 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 80015d6:	f7ff fdff 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM2_Init+0x14c>)
 80015dc:	f000 f8a4 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3748      	adds	r7, #72	; 0x48
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002a0 	.word	0x200002a0
 80015ec:	000f423f 	.word	0x000f423f

080015f0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM6_Init+0x68>)
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <MX_TIM6_Init+0x6c>)
 8001604:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_TIM6_Init+0x68>)
 8001608:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800160c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_TIM6_Init+0x68>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_TIM6_Init+0x68>)
 8001616:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800161a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_TIM6_Init+0x68>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM6_Init+0x68>)
 8001624:	f002 fc48 	bl	8003eb8 <HAL_TIM_Base_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800162e:	f7ff fdd3 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM6_Init+0x68>)
 8001640:	f004 f8de 	bl	8005800 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800164a:	f7ff fdc5 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000254 	.word	0x20000254
 800165c:	40001000 	.word	0x40001000

08001660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001680:	d131      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a20      	ldr	r2, [pc, #128]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016c2:	2301      	movs	r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f000 fb22 	bl	8001d18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	210a      	movs	r1, #10
 80016d8:	201c      	movs	r0, #28
 80016da:	f000 fa68 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016de:	201c      	movs	r0, #28
 80016e0:	f000 fa81 	bl	8001be6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80016e4:	e018      	b.n	8001718 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_TIM_Base_MspInit+0xc4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d113      	bne.n	8001718 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_TIM_Base_MspInit+0xc0>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 9, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2109      	movs	r1, #9
 800170c:	2036      	movs	r0, #54	; 0x36
 800170e:	f000 fa4e 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001712:	2036      	movs	r0, #54	; 0x36
 8001714:	f000 fa67 	bl	8001be6 <HAL_NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	40001000 	.word	0x40001000

08001728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001748:	d11c      	bne.n	8001784 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_TIM_MspPostInit+0x64>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_TIM_MspPostInit+0x64>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_TIM_MspPostInit+0x64>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001774:	2301      	movs	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <HAL_TIM_MspPostInit+0x68>)
 8001780:	f000 faca 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	48000400 	.word	0x48000400

08001794 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART2_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <MX_USART2_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017d8:	f004 f8b8 	bl	800594c <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f7ff fcf9 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002ec 	.word	0x200002ec
 80017f0:	40004400 	.word	0x40004400

080017f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0ac      	sub	sp, #176	; 0xb0
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2288      	movs	r2, #136	; 0x88
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f005 fc0f 	bl	8007038 <memset>
  if(uartHandle->Instance==USART2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_UART_MspInit+0xc0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d143      	bne.n	80018ac <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001824:	2302      	movs	r3, #2
 8001826:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001828:	2300      	movs	r3, #0
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fe85 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800183c:	f7ff fccc 	bl	80011d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_UART_MspInit+0xc4>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_UART_MspInit+0xc4>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184a:	6593      	str	r3, [r2, #88]	; 0x58
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_UART_MspInit+0xc4>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_UART_MspInit+0xc4>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <HAL_UART_MspInit+0xc4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_UART_MspInit+0xc4>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001870:	230c      	movs	r3, #12
 8001872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001888:	2307      	movs	r3, #7
 800188a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f000 fa3e 	bl	8001d18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2026      	movs	r0, #38	; 0x26
 80018a2:	f000 f984 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018a6:	2026      	movs	r0, #38	; 0x26
 80018a8:	f000 f99d 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018ac:	bf00      	nop
 80018ae:	37b0      	adds	r7, #176	; 0xb0
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40004400 	.word	0x40004400
 80018b8:	40021000 	.word	0x40021000

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c0:	f7ff fdda 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f005 fb81 	bl	8006ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7ff fb99 	bl	8001024 <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001900:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 8001904:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001908:	20000384 	.word	0x20000384

0800190c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_2_IRQHandler>

0800190e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f93d 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191e:	200f      	movs	r0, #15
 8001920:	f000 f80e 	bl	8001940 <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	e001      	b.n	8001934 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001930:	f7ff fc70 	bl	8001214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001934:	79fb      	ldrb	r3, [r7, #7]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_InitTick+0x6c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_InitTick+0x70>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_InitTick+0x6c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f949 	bl	8001c02 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d809      	bhi.n	8001990 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f913 	bl	8001bae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_InitTick+0x74>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e007      	b.n	80019a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e004      	b.n	80019a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e001      	b.n	80019a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000370 	.word	0x20000370

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000370 	.word	0x20000370

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff29 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff3e 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff8e 	bl	8001aec <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5d 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff31 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa2 	bl	8001b54 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d008      	beq.n	8001c44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e022      	b.n	8001c8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020e 	bic.w	r2, r2, #14
 8001c52:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f003 021c 	and.w	r2, r3, #28
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d005      	beq.n	8001cba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e029      	b.n	8001d0e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 020e 	bic.w	r2, r2, #14
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f003 021c 	and.w	r2, r3, #28
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
    }
  }
  return status;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e17f      	b.n	8002028 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8171 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x40>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d118      	bne.n	8001df8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	6939      	ldr	r1, [r7, #16]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80ac 	beq.w	8002022 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <HAL_GPIO_Init+0x330>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee2:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_GPIO_Init+0x334>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x242>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x338>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_GPIO_Init+0x33c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <HAL_GPIO_Init+0x340>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x344>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4b      	ldr	r2, [pc, #300]	; (8002060 <HAL_GPIO_Init+0x348>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x34c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x244>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6c:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_GPIO_Init+0x334>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_GPIO_Init+0x350>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_GPIO_Init+0x350>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	f47f ae78 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800
 8002058:	48000c00 	.word	0x48000c00
 800205c:	48001000 	.word	0x48001000
 8002060:	48001400 	.word	0x48001400
 8002064:	48001800 	.word	0x48001800
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e081      	b.n	8002182 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe ff68 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e006      	b.n	80020f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d104      	bne.n	8002106 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002104:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69d9      	ldr	r1, [r3, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	460b      	mov	r3, r1
 800219a:	817b      	strh	r3, [r7, #10]
 800219c:	4613      	mov	r3, r2
 800219e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	f040 80da 	bne.w	8002362 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x30>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0d3      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021c4:	f7ff fc0c 	bl	80019e0 <HAL_GetTick>
 80021c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2319      	movs	r3, #25
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f8f0 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0be      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2210      	movs	r2, #16
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2bff      	cmp	r3, #255	; 0xff
 8002216:	d90e      	bls.n	8002236 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	b2da      	uxtb	r2, r3
 8002224:	8979      	ldrh	r1, [r7, #10]
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_I2C_Master_Transmit+0x1e0>)
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fa6c 	bl	800270c <I2C_TransferConfig>
 8002234:	e06c      	b.n	8002310 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_I2C_Master_Transmit+0x1e0>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa5b 	bl	800270c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002256:	e05b      	b.n	8002310 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	6a39      	ldr	r1, [r7, #32]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f8ed 	bl	800243c <I2C_WaitOnTXISFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e07b      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d034      	beq.n	8002310 <HAL_I2C_Master_Transmit+0x184>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d130      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f87f 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e04d      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d90e      	bls.n	80022f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fa0f 	bl	800270c <I2C_TransferConfig>
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	2300      	movs	r3, #0
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f9fe 	bl	800270c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d19e      	bne.n	8002258 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	6a39      	ldr	r1, [r7, #32]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f8cc 	bl	80024bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e01a      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_I2C_Master_Transmit+0x1e4>)
 8002342:	400b      	ands	r3, r1
 8002344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	80002000 	.word	0x80002000
 8002370:	fe00e800 	.word	0xfe00e800

08002374 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d103      	bne.n	8002392 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d007      	beq.n	80023b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	619a      	str	r2, [r3, #24]
  }
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023cc:	e022      	b.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d01e      	beq.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7ff fb03 	bl	80019e0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d113      	bne.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e00f      	b.n	8002434 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	429a      	cmp	r2, r3
 8002430:	d0cd      	beq.n	80023ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002448:	e02c      	b.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f870 	bl	8002534 <I2C_IsErrorOccurred>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e02a      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d01e      	beq.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7ff fabb 	bl	80019e0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d113      	bne.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e007      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d1cb      	bne.n	800244a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c8:	e028      	b.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f830 	bl	8002534 <I2C_IsErrorOccurred>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e026      	b.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7ff fa7f 	bl	80019e0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d113      	bne.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e007      	b.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b20      	cmp	r3, #32
 8002528:	d1cf      	bne.n	80024ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d075      	beq.n	800264c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002568:	e056      	b.n	8002618 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d052      	beq.n	8002618 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff fa35 	bl	80019e0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_IsErrorOccurred+0x54>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d147      	bne.n	8002618 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800259a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025aa:	d12e      	bne.n	800260a <I2C_IsErrorOccurred+0xd6>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025b2:	d02a      	beq.n	800260a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d027      	beq.n	800260a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025ca:	f7ff fa09 	bl	80019e0 <HAL_GetTick>
 80025ce:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d0:	e01b      	b.n	800260a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025d2:	f7ff fa05 	bl	80019e0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b19      	cmp	r3, #25
 80025de:	d914      	bls.n	800260a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b20      	cmp	r3, #32
 8002616:	d1dc      	bne.n	80025d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b20      	cmp	r3, #32
 8002624:	d003      	beq.n	800262e <I2C_IsErrorOccurred+0xfa>
 8002626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800262a:	2b00      	cmp	r3, #0
 800262c:	d09d      	beq.n	800256a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2220      	movs	r2, #32
 800263c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002690:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01c      	beq.n	80026fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fe56 	bl	8002374 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <I2C_IsErrorOccurred+0x1d4>)
 80026d4:	400b      	ands	r3, r1
 80026d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002700:	4618      	mov	r0, r3
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	fe00e800 	.word	0xfe00e800

0800270c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	4613      	mov	r3, r2
 800271c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002724:	7a7b      	ldrb	r3, [r7, #9]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800272c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	4313      	orrs	r3, r2
 8002736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	0d5b      	lsrs	r3, r3, #21
 8002746:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <I2C_TransferConfig+0x60>)
 800274c:	430b      	orrs	r3, r1
 800274e:	43db      	mvns	r3, r3
 8002750:	ea02 0103 	and.w	r1, r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	03ff63ff 	.word	0x03ff63ff

08002770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	d138      	bne.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002790:	2302      	movs	r3, #2
 8002792:	e032      	b.n	80027fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	d139      	bne.n	8002890 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002826:	2302      	movs	r3, #2
 8002828:	e033      	b.n	8002892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2224      	movs	r2, #36	; 0x24
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002858:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
  }
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40007000 	.word	0x40007000

080028bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ca:	d130      	bne.n	800292e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d8:	d038      	beq.n	800294c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e2:	4a1e      	ldr	r2, [pc, #120]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2232      	movs	r2, #50	; 0x32
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0c9b      	lsrs	r3, r3, #18
 80028fc:	3301      	adds	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002900:	e002      	b.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3b01      	subs	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d102      	bne.n	800291c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f2      	bne.n	8002902 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002928:	d110      	bne.n	800294c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293a:	d007      	beq.n	800294c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002944:	4a05      	ldr	r2, [pc, #20]	; (800295c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40007000 	.word	0x40007000
 8002960:	20000000 	.word	0x20000000
 8002964:	431bde83 	.word	0x431bde83

08002968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e3d4      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297a:	4ba1      	ldr	r3, [pc, #644]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002984:	4b9e      	ldr	r3, [pc, #632]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80e4 	beq.w	8002b64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4a>
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	f040 808b 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	f040 8087 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029b2:	4b93      	ldr	r3, [pc, #588]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e3ac      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <HAL_RCC_OscConfig+0x7c>
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e2:	e005      	b.n	80029f0 <HAL_RCC_OscConfig+0x88>
 80029e4:	4b86      	ldr	r3, [pc, #536]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d223      	bcs.n	8002a3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fd41 	bl	8003480 <RCC_SetFlashLatencyFromMSIRange>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e38d      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a08:	4b7d      	ldr	r3, [pc, #500]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a7c      	ldr	r2, [pc, #496]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b7a      	ldr	r3, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4977      	ldr	r1, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	4972      	ldr	r1, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
 8002a3a:	e025      	b.n	8002a88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3c:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a6f      	ldr	r2, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	496a      	ldr	r1, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5a:	4b69      	ldr	r3, [pc, #420]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	4965      	ldr	r1, [pc, #404]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fd01 	bl	8003480 <RCC_SetFlashLatencyFromMSIRange>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e34d      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a88:	f000 fc36 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	495a      	ldr	r1, [pc, #360]	; (8002c04 <HAL_RCC_OscConfig+0x29c>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_RCC_OscConfig+0x2a0>)
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aa8:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <HAL_RCC_OscConfig+0x2a4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe ff47 	bl	8001940 <HAL_InitTick>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d052      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	e331      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d032      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe ff84 	bl	80019e0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002adc:	f7fe ff80 	bl	80019e0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e31a      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aee:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b00:	f043 0308 	orr.w	r3, r3, #8
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	493b      	ldr	r1, [pc, #236]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	4936      	ldr	r1, [pc, #216]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
 8002b2c:	e01a      	b.n	8002b64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b2e:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe ff51 	bl	80019e0 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b42:	f7fe ff4d 	bl	80019e0 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e2e7      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x1da>
 8002b60:	e000      	b.n	8002b64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d074      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x21a>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d10e      	bne.n	8002b9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d064      	beq.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d160      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e2c4      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x24a>
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e01d      	b.n	8002bee <HAL_RCC_OscConfig+0x286>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x26e>
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x286>
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <HAL_RCC_OscConfig+0x298>)
 8002be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fef3 	bl	80019e0 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfc:	e011      	b.n	8002c22 <HAL_RCC_OscConfig+0x2ba>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08009b64 	.word	0x08009b64
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fee6 	bl	80019e0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e280      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c22:	4baf      	ldr	r3, [pc, #700]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x2a8>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fed6 	bl	80019e0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fed2 	bl	80019e0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e26c      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4a:	4ba5      	ldr	r3, [pc, #660]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2d0>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d060      	beq.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_OscConfig+0x310>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d119      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d116      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c78:	4b99      	ldr	r3, [pc, #612]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_OscConfig+0x328>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e249      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b93      	ldr	r3, [pc, #588]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	4990      	ldr	r1, [pc, #576]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca4:	e040      	b.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d023      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cae:	4b8c      	ldr	r3, [pc, #560]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a8b      	ldr	r2, [pc, #556]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fe91 	bl	80019e0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fe8d 	bl	80019e0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e227      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd4:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	497c      	ldr	r1, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	e018      	b.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b7a      	ldr	r3, [pc, #488]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a79      	ldr	r2, [pc, #484]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fe6d 	bl	80019e0 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fe69 	bl	80019e0 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e203      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d1c:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d03c      	beq.n	8002dae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d42:	4a67      	ldr	r2, [pc, #412]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fe48 	bl	80019e0 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fe44 	bl	80019e0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1de      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d66:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ef      	beq.n	8002d54 <HAL_RCC_OscConfig+0x3ec>
 8002d74:	e01b      	b.n	8002dae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7c:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe fe2b 	bl	80019e0 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fe27 	bl	80019e0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1c1      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ef      	bne.n	8002d8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80a6 	beq.w	8002f08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	4a43      	ldr	r2, [pc, #268]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd8:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de8:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <HAL_RCC_OscConfig+0x57c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d118      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df4:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x57c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3a      	ldr	r2, [pc, #232]	; (8002ee4 <HAL_RCC_OscConfig+0x57c>)
 8002dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fdee 	bl	80019e0 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe fdea 	bl	80019e0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e184      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_RCC_OscConfig+0x57c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d108      	bne.n	8002e40 <HAL_RCC_OscConfig+0x4d8>
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e3e:	e024      	b.n	8002e8a <HAL_RCC_OscConfig+0x522>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d110      	bne.n	8002e6a <HAL_RCC_OscConfig+0x502>
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e68:	e00f      	b.n	8002e8a <HAL_RCC_OscConfig+0x522>
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe fda5 	bl	80019e0 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fda1 	bl	80019e0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e139      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ed      	beq.n	8002e9a <HAL_RCC_OscConfig+0x532>
 8002ebe:	e01a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fd8e 	bl	80019e0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec6:	e00f      	b.n	8002ee8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fd8a 	bl	80019e0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d906      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e122      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee8:	4b90      	ldr	r3, [pc, #576]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e8      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef6:	7ffb      	ldrb	r3, [r7, #31]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efc:	4b8b      	ldr	r3, [pc, #556]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	4a8a      	ldr	r2, [pc, #552]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8108 	beq.w	8003122 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	f040 80d0 	bne.w	80030bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f1c:	4b83      	ldr	r3, [pc, #524]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d130      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d127      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d11f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f5c:	2a07      	cmp	r2, #7
 8002f5e:	bf14      	ite	ne
 8002f60:	2201      	movne	r2, #1
 8002f62:	2200      	moveq	r2, #0
 8002f64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d113      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d06e      	beq.n	8003070 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d069      	beq.n	800306c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f98:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fa4:	4b61      	ldr	r3, [pc, #388]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b7      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc0:	f7fe fd0e 	bl	80019e0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fd0a 	bl	80019e0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0a4      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	4b51      	ldr	r3, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x7c8>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003000:	0212      	lsls	r2, r2, #8
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003008:	0852      	lsrs	r2, r2, #1
 800300a:	3a01      	subs	r2, #1
 800300c:	0552      	lsls	r2, r2, #21
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003014:	0852      	lsrs	r2, r2, #1
 8003016:	3a01      	subs	r2, #1
 8003018:	0652      	lsls	r2, r2, #25
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003020:	0912      	lsrs	r2, r2, #4
 8003022:	0452      	lsls	r2, r2, #17
 8003024:	430a      	orrs	r2, r1
 8003026:	4941      	ldr	r1, [pc, #260]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3e      	ldr	r2, [pc, #248]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003038:	4b3c      	ldr	r3, [pc, #240]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a3b      	ldr	r2, [pc, #236]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003044:	f7fe fccc 	bl	80019e0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fcc8 	bl	80019e0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e062      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b33      	ldr	r3, [pc, #204]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306a:	e05a      	b.n	8003122 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e059      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d152      	bne.n	8003122 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a27      	ldr	r2, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003094:	f7fe fca4 	bl	80019e0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fca0 	bl	80019e0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e03a      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ae:	4b1f      	ldr	r3, [pc, #124]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x734>
 80030ba:	e032      	b.n	8003122 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d02d      	beq.n	800311e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a19      	ldr	r2, [pc, #100]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4a10      	ldr	r2, [pc, #64]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 80030ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fc73 	bl	80019e0 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe fc6f 	bl	80019e0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e009      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x7c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x796>
 800311c:	e001      	b.n	8003122 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	f99d808c 	.word	0xf99d808c

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0c8      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	4961      	ldr	r1, [pc, #388]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b0      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d04c      	beq.n	800321e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d121      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e09e      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e092      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031bc:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e086      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e07e      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	493f      	ldr	r1, [pc, #252]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fe fbf7 	bl	80019e0 <HAL_GetTick>
 80031f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	e00a      	b.n	800320c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f6:	f7fe fbf3 	bl	80019e0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e066      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 020c 	and.w	r2, r3, #12
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	429a      	cmp	r2, r3
 800321c:	d1eb      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322a:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	492c      	ldr	r1, [pc, #176]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d210      	bcs.n	800326c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4924      	ldr	r1, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e036      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4910      	ldr	r1, [pc, #64]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032aa:	f000 f825 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490c      	ldr	r1, [pc, #48]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fb36 	bl	8001940 <HAL_InitTick>
 80032d4:	4603      	mov	r3, r0
 80032d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80032d8:	7afb      	ldrb	r3, [r7, #11]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08009b64 	.word	0x08009b64
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d121      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11e      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e005      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d102      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e004      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d101      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d134      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0xa6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xac>
 800339c:	e005      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a0:	617b      	str	r3, [r7, #20]
      break;
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 80033a6:	617b      	str	r3, [r7, #20]
      break;
 80033a8:	e002      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	3301      	adds	r3, #1
 80033bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	fb02 f203 	mul.w	r2, r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0e5b      	lsrs	r3, r3, #25
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	3301      	adds	r3, #1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033f0:	69bb      	ldr	r3, [r7, #24]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	08009b7c 	.word	0x08009b7c
 8003408:	00f42400 	.word	0x00f42400
 800340c:	007a1200 	.word	0x007a1200

08003410 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_RCC_GetHCLKFreq+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000000 	.word	0x20000000

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800342c:	f7ff fff0 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	08009b74 	.word	0x08009b74

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003458:	f7ff ffda 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0adb      	lsrs	r3, r3, #11
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4904      	ldr	r1, [pc, #16]	; (800347c <HAL_RCC_GetPCLK2Freq+0x28>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	08009b74 	.word	0x08009b74

08003480 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003498:	f7ff fa02 	bl	80028a0 <HAL_PWREx_GetVoltageRange>
 800349c:	6178      	str	r0, [r7, #20]
 800349e:	e014      	b.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	4a24      	ldr	r2, [pc, #144]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6593      	str	r3, [r2, #88]	; 0x58
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b8:	f7ff f9f2 	bl	80028a0 <HAL_PWREx_GetVoltageRange>
 80034bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d10b      	bne.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d919      	bls.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2ba0      	cmp	r3, #160	; 0xa0
 80034dc:	d902      	bls.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034de:	2302      	movs	r3, #2
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e013      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e4:	2301      	movs	r3, #1
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e010      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d902      	bls.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034f0:	2303      	movs	r3, #3
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e00a      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d102      	bne.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034fc:	2302      	movs	r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e004      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b70      	cmp	r3, #112	; 0x70
 8003506:	d101      	bne.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	4909      	ldr	r1, [pc, #36]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	40022000 	.word	0x40022000

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003548:	2300      	movs	r3, #0
 800354a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800354c:	2300      	movs	r3, #0
 800354e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003558:	2b00      	cmp	r3, #0
 800355a:	d041      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003560:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003564:	d02a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003566:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800356a:	d824      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800356c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003570:	d008      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003576:	d81e      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800357c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003580:	d010      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003582:	e018      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003584:	4b86      	ldr	r3, [pc, #536]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a85      	ldr	r2, [pc, #532]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003590:	e015      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fabb 	bl	8003b14 <RCCEx_PLLSAI1_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a2:	e00c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3320      	adds	r3, #32
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fba6 	bl	8003cfc <RCCEx_PLLSAI2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b4:	e003      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10b      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c4:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d2:	4973      	ldr	r1, [pc, #460]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035da:	e001      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d041      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035f4:	d02a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035fa:	d824      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003600:	d008      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003606:	d81e      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800360c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003610:	d010      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003612:	e018      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003614:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003620:	e015      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fa73 	bl	8003b14 <RCCEx_PLLSAI1_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003632:	e00c      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3320      	adds	r3, #32
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fb5e 	bl	8003cfc <RCCEx_PLLSAI2_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	74fb      	strb	r3, [r7, #19]
      break;
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800364c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003654:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003662:	494f      	ldr	r1, [pc, #316]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800366a:	e001      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a0 	beq.w	80037be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	; 0x58
 80036a4:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3a      	ldr	r2, [pc, #232]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036c0:	f7fe f98e 	bl	80019e0 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036c6:	e009      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c8:	f7fe f98a 	bl	80019e0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d902      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	74fb      	strb	r3, [r7, #19]
        break;
 80036da:	e005      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d15c      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01f      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d019      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fe f949 	bl	80019e0 <HAL_GetTick>
 800374e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003750:	e00b      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe f945 	bl	80019e0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d902      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	74fb      	strb	r3, [r7, #19]
            break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ec      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003796:	e009      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ac:	7c7b      	ldrb	r3, [r7, #17]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b9e      	ldr	r3, [pc, #632]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	4a9d      	ldr	r2, [pc, #628]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ca:	4b98      	ldr	r3, [pc, #608]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 0203 	bic.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	4994      	ldr	r1, [pc, #592]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ec:	4b8f      	ldr	r3, [pc, #572]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f023 020c 	bic.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	498c      	ldr	r1, [pc, #560]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800380e:	4b87      	ldr	r3, [pc, #540]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	4983      	ldr	r1, [pc, #524]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	497b      	ldr	r1, [pc, #492]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	4972      	ldr	r1, [pc, #456]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003874:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	496a      	ldr	r1, [pc, #424]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	4961      	ldr	r1, [pc, #388]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038b8:	4b5c      	ldr	r3, [pc, #368]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4959      	ldr	r1, [pc, #356]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038da:	4b54      	ldr	r3, [pc, #336]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	4950      	ldr	r1, [pc, #320]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fc:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	4948      	ldr	r1, [pc, #288]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	493f      	ldr	r1, [pc, #252]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d028      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800395e:	d106      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396a:	60d3      	str	r3, [r2, #12]
 800396c:	e011      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003976:	d10c      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f8c8 	bl	8003b14 <RCCEx_PLLSAI1_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800399e:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	491f      	ldr	r1, [pc, #124]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039bc:	d106      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c8:	60d3      	str	r3, [r2, #12]
 80039ca:	e011      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3304      	adds	r3, #4
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f899 	bl	8003b14 <RCCEx_PLLSAI1_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a02      	ldr	r2, [pc, #8]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a26:	60d3      	str	r3, [r2, #12]
 8003a28:	e014      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f867 	bl	8003b14 <RCCEx_PLLSAI1_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	4928      	ldr	r1, [pc, #160]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f844 	bl	8003b14 <RCCEx_PLLSAI1_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	74bb      	strb	r3, [r7, #18]
 8003a9a:	e011      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3320      	adds	r3, #32
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f925 	bl	8003cfc <RCCEx_PLLSAI2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afe:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000

08003b14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b22:	4b75      	ldr	r3, [pc, #468]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0203 	and.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10d      	bne.n	8003b5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
       ||
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b46:	4b6c      	ldr	r3, [pc, #432]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
       ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d047      	beq.n	8003bea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e044      	b.n	8003bea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d018      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0x86>
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d825      	bhi.n	8003bb8 <RCCEx_PLLSAI1_Config+0xa4>
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d002      	beq.n	8003b76 <RCCEx_PLLSAI1_Config+0x62>
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d009      	beq.n	8003b88 <RCCEx_PLLSAI1_Config+0x74>
 8003b74:	e020      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b76:	4b60      	ldr	r3, [pc, #384]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11d      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b86:	e01a      	b.n	8003bbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b88:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d116      	bne.n	8003bc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b98:	e013      	b.n	8003bc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b9a:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba6:	4b54      	ldr	r3, [pc, #336]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb6:	e006      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      break;
 8003bbc:	e004      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10d      	bne.n	8003bea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6819      	ldr	r1, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	430b      	orrs	r3, r1
 8003be4:	4944      	ldr	r1, [pc, #272]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d17d      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bf0:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a40      	ldr	r2, [pc, #256]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fef0 	bl	80019e0 <HAL_GetTick>
 8003c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c02:	e009      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c04:	f7fd feec 	bl	80019e0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d902      	bls.n	8003c18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	73fb      	strb	r3, [r7, #15]
        break;
 8003c16:	e005      	b.n	8003c24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c18:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ef      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d160      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d111      	bne.n	8003c54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	0211      	lsls	r1, r2, #8
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	0912      	lsrs	r2, r2, #4
 8003c48:	0452      	lsls	r2, r2, #17
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	492a      	ldr	r1, [pc, #168]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	610b      	str	r3, [r1, #16]
 8003c52:	e027      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d112      	bne.n	8003c80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	0211      	lsls	r1, r2, #8
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6912      	ldr	r2, [r2, #16]
 8003c70:	0852      	lsrs	r2, r2, #1
 8003c72:	3a01      	subs	r2, #1
 8003c74:	0552      	lsls	r2, r2, #21
 8003c76:	430a      	orrs	r2, r1
 8003c78:	491f      	ldr	r1, [pc, #124]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	610b      	str	r3, [r1, #16]
 8003c7e:	e011      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	0211      	lsls	r1, r2, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6952      	ldr	r2, [r2, #20]
 8003c96:	0852      	lsrs	r2, r2, #1
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0652      	lsls	r2, r2, #25
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ca4:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fe96 	bl	80019e0 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb6:	e009      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb8:	f7fd fe92 	bl	80019e0 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cca:	e005      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ef      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	4904      	ldr	r1, [pc, #16]	; (8003cf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000

08003cfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d16:	4b67      	ldr	r3, [pc, #412]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0203 	and.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d10d      	bne.n	8003d42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
       ||
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d2e:	4b61      	ldr	r3, [pc, #388]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d047      	beq.n	8003dd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
 8003d46:	e044      	b.n	8003dd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d018      	beq.n	8003d82 <RCCEx_PLLSAI2_Config+0x86>
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d825      	bhi.n	8003da0 <RCCEx_PLLSAI2_Config+0xa4>
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d002      	beq.n	8003d5e <RCCEx_PLLSAI2_Config+0x62>
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d009      	beq.n	8003d70 <RCCEx_PLLSAI2_Config+0x74>
 8003d5c:	e020      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d5e:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d11d      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6e:	e01a      	b.n	8003da6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d70:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d116      	bne.n	8003daa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d80:	e013      	b.n	8003daa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d82:	4b4c      	ldr	r3, [pc, #304]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d8e:	4b49      	ldr	r3, [pc, #292]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d9e:	e006      	b.n	8003dae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e004      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10d      	bne.n	8003dd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003db6:	4b3f      	ldr	r3, [pc, #252]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	4939      	ldr	r1, [pc, #228]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d167      	bne.n	8003ea8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dd8:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de4:	f7fd fdfc 	bl	80019e0 <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dea:	e009      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dec:	f7fd fdf8 	bl	80019e0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d902      	bls.n	8003e00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfe:	e005      	b.n	8003e0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ef      	bne.n	8003dec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d14a      	bne.n	8003ea8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d111      	bne.n	8003e3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	0211      	lsls	r1, r2, #8
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	0912      	lsrs	r2, r2, #4
 8003e30:	0452      	lsls	r2, r2, #17
 8003e32:	430a      	orrs	r2, r1
 8003e34:	491f      	ldr	r1, [pc, #124]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	614b      	str	r3, [r1, #20]
 8003e3a:	e011      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6912      	ldr	r2, [r2, #16]
 8003e52:	0852      	lsrs	r2, r2, #1
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0652      	lsls	r2, r2, #25
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	4916      	ldr	r1, [pc, #88]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fdb8 	bl	80019e0 <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e72:	e009      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e74:	f7fd fdb4 	bl	80019e0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	73fb      	strb	r3, [r7, #15]
          break;
 8003e86:	e005      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ef      	beq.n	8003e74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e049      	b.n	8003f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fbbe 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 ff2e 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d001      	beq.n	8003f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e04f      	b.n	8004020 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <HAL_TIM_Base_Start_IT+0xc4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01d      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x76>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003faa:	d018      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x76>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x76>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x76>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x76>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x76>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d115      	bne.n	800400a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d015      	beq.n	800401c <HAL_TIM_Base_Start_IT+0xb4>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d011      	beq.n	800401c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	e008      	b.n	800401c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e000      	b.n	800401e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40013400 	.word	0x40013400
 8004040:	40014000 	.word	0x40014000
 8004044:	00010007 	.word	0x00010007

08004048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e049      	b.n	80040ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f841 	bl	80040f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fe66 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_TIM_PWM_Start+0x24>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e03c      	b.n	80041aa <HAL_TIM_PWM_Start+0x9e>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d109      	bne.n	800414a <HAL_TIM_PWM_Start+0x3e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e02f      	b.n	80041aa <HAL_TIM_PWM_Start+0x9e>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d109      	bne.n	8004164 <HAL_TIM_PWM_Start+0x58>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e022      	b.n	80041aa <HAL_TIM_PWM_Start+0x9e>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d109      	bne.n	800417e <HAL_TIM_PWM_Start+0x72>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e015      	b.n	80041aa <HAL_TIM_PWM_Start+0x9e>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b10      	cmp	r3, #16
 8004182:	d109      	bne.n	8004198 <HAL_TIM_PWM_Start+0x8c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e008      	b.n	80041aa <HAL_TIM_PWM_Start+0x9e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e09c      	b.n	80042ec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_PWM_Start+0xb6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	e023      	b.n	800420a <HAL_TIM_PWM_Start+0xfe>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Start+0xc6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d0:	e01b      	b.n	800420a <HAL_TIM_PWM_Start+0xfe>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start+0xd6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	e013      	b.n	800420a <HAL_TIM_PWM_Start+0xfe>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xe6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f0:	e00b      	b.n	800420a <HAL_TIM_PWM_Start+0xfe>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0xf6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004200:	e003      	b.n	800420a <HAL_TIM_PWM_Start+0xfe>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2201      	movs	r2, #1
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f001 face 	bl	80057b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a35      	ldr	r2, [pc, #212]	; (80042f4 <HAL_TIM_PWM_Start+0x1e8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_TIM_PWM_Start+0x13e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a34      	ldr	r2, [pc, #208]	; (80042f8 <HAL_TIM_PWM_Start+0x1ec>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIM_PWM_Start+0x13e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a32      	ldr	r2, [pc, #200]	; (80042fc <HAL_TIM_PWM_Start+0x1f0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIM_PWM_Start+0x13e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a31      	ldr	r2, [pc, #196]	; (8004300 <HAL_TIM_PWM_Start+0x1f4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIM_PWM_Start+0x13e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2f      	ldr	r2, [pc, #188]	; (8004304 <HAL_TIM_PWM_Start+0x1f8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_TIM_PWM_Start+0x142>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_TIM_PWM_Start+0x144>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <HAL_TIM_PWM_Start+0x1e8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_TIM_PWM_Start+0x19e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d018      	beq.n	80042aa <HAL_TIM_PWM_Start+0x19e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <HAL_TIM_PWM_Start+0x1fc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_TIM_PWM_Start+0x19e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a21      	ldr	r2, [pc, #132]	; (800430c <HAL_TIM_PWM_Start+0x200>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_TIM_PWM_Start+0x19e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <HAL_TIM_PWM_Start+0x204>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIM_PWM_Start+0x19e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <HAL_TIM_PWM_Start+0x1ec>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIM_PWM_Start+0x19e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a15      	ldr	r2, [pc, #84]	; (80042fc <HAL_TIM_PWM_Start+0x1f0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d115      	bne.n	80042d6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_TIM_PWM_Start+0x208>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d015      	beq.n	80042e8 <HAL_TIM_PWM_Start+0x1dc>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d011      	beq.n	80042e8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	e008      	b.n	80042e8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e000      	b.n	80042ea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40014000 	.word	0x40014000
 8004300:	40014400 	.word	0x40014400
 8004304:	40014800 	.word	0x40014800
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	00010007 	.word	0x00010007

08004318 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e049      	b.n	80043be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f841 	bl	80043c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 fcfe 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_IC_Start+0x1a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	e023      	b.n	800443e <HAL_TIM_IC_Start+0x62>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_IC_Start+0x2a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e01b      	b.n	800443e <HAL_TIM_IC_Start+0x62>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d104      	bne.n	8004416 <HAL_TIM_IC_Start+0x3a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e013      	b.n	800443e <HAL_TIM_IC_Start+0x62>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d104      	bne.n	8004426 <HAL_TIM_IC_Start+0x4a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e00b      	b.n	800443e <HAL_TIM_IC_Start+0x62>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b10      	cmp	r3, #16
 800442a:	d104      	bne.n	8004436 <HAL_TIM_IC_Start+0x5a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e003      	b.n	800443e <HAL_TIM_IC_Start+0x62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800443c:	b2db      	uxtb	r3, r3
 800443e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_TIM_IC_Start+0x74>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e013      	b.n	8004478 <HAL_TIM_IC_Start+0x9c>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b04      	cmp	r3, #4
 8004454:	d104      	bne.n	8004460 <HAL_TIM_IC_Start+0x84>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e00b      	b.n	8004478 <HAL_TIM_IC_Start+0x9c>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b08      	cmp	r3, #8
 8004464:	d104      	bne.n	8004470 <HAL_TIM_IC_Start+0x94>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e003      	b.n	8004478 <HAL_TIM_IC_Start+0x9c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004476:	b2db      	uxtb	r3, r3
 8004478:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d102      	bne.n	8004486 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d001      	beq.n	800448a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e092      	b.n	80045b0 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_TIM_IC_Start+0xbe>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004498:	e023      	b.n	80044e2 <HAL_TIM_IC_Start+0x106>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d104      	bne.n	80044aa <HAL_TIM_IC_Start+0xce>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	e01b      	b.n	80044e2 <HAL_TIM_IC_Start+0x106>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_IC_Start+0xde>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_IC_Start+0x106>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d104      	bne.n	80044ca <HAL_TIM_IC_Start+0xee>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_IC_Start+0x106>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d104      	bne.n	80044da <HAL_TIM_IC_Start+0xfe>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_IC_Start+0x106>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_IC_Start+0x116>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f0:	e013      	b.n	800451a <HAL_TIM_IC_Start+0x13e>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_IC_Start+0x126>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004500:	e00b      	b.n	800451a <HAL_TIM_IC_Start+0x13e>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d104      	bne.n	8004512 <HAL_TIM_IC_Start+0x136>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004510:	e003      	b.n	800451a <HAL_TIM_IC_Start+0x13e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f001 f946 	bl	80057b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a22      	ldr	r2, [pc, #136]	; (80045b8 <HAL_TIM_IC_Start+0x1dc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01d      	beq.n	800456e <HAL_TIM_IC_Start+0x192>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d018      	beq.n	800456e <HAL_TIM_IC_Start+0x192>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_TIM_IC_Start+0x1e0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <HAL_TIM_IC_Start+0x192>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_TIM_IC_Start+0x1e4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIM_IC_Start+0x192>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_TIM_IC_Start+0x1e8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_TIM_IC_Start+0x192>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_TIM_IC_Start+0x1ec>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIM_IC_Start+0x192>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_TIM_IC_Start+0x1f0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d115      	bne.n	800459a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <HAL_TIM_IC_Start+0x1f4>)
 8004576:	4013      	ands	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b06      	cmp	r3, #6
 800457e:	d015      	beq.n	80045ac <HAL_TIM_IC_Start+0x1d0>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004586:	d011      	beq.n	80045ac <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004598:	e008      	b.n	80045ac <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e000      	b.n	80045ae <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	00010007 	.word	0x00010007

080045d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0202 	mvn.w	r2, #2
 8004600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fb7f 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fb71 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb82 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0204 	mvn.w	r2, #4
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb55 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fb47 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb58 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0208 	mvn.w	r2, #8
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fb2b 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fb1d 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fb2e 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2208      	movs	r2, #8
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fb01 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 faf3 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fb04 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fcfe 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 f8d0 	bl	8005924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	d10e      	bne.n	80047b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d107      	bne.n	80047b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 f8c3 	bl	8005938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d10e      	bne.n	80047de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d107      	bne.n	80047de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fab2 	bl	8004d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d10e      	bne.n	800480a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d107      	bne.n	800480a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0220 	mvn.w	r2, #32
 8004802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 f883 	bl	8005910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIM_IC_ConfigChannel+0x1e>
 800482c:	2302      	movs	r3, #2
 800482e:	e088      	b.n	8004942 <HAL_TIM_IC_ConfigChannel+0x130>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11b      	bne.n	8004876 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f000 fdf3 	bl	8005438 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 020c 	bic.w	r2, r2, #12
 8004860:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6999      	ldr	r1, [r3, #24]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	e060      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11c      	bne.n	80048b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f000 fe71 	bl	8005572 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800489e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
 80048b4:	e040      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f000 febe 	bl	800564c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020c 	bic.w	r2, r2, #12
 80048de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69d9      	ldr	r1, [r3, #28]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e021      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d11c      	bne.n	8004934 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f000 fedb 	bl	80056c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800491c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
 8004932:	e001      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e0ff      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b14      	cmp	r3, #20
 8004976:	f200 80f0 	bhi.w	8004b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049d5 	.word	0x080049d5
 8004984:	08004b5b 	.word	0x08004b5b
 8004988:	08004b5b 	.word	0x08004b5b
 800498c:	08004b5b 	.word	0x08004b5b
 8004990:	08004a15 	.word	0x08004a15
 8004994:	08004b5b 	.word	0x08004b5b
 8004998:	08004b5b 	.word	0x08004b5b
 800499c:	08004b5b 	.word	0x08004b5b
 80049a0:	08004a57 	.word	0x08004a57
 80049a4:	08004b5b 	.word	0x08004b5b
 80049a8:	08004b5b 	.word	0x08004b5b
 80049ac:	08004b5b 	.word	0x08004b5b
 80049b0:	08004a97 	.word	0x08004a97
 80049b4:	08004b5b 	.word	0x08004b5b
 80049b8:	08004b5b 	.word	0x08004b5b
 80049bc:	08004b5b 	.word	0x08004b5b
 80049c0:	08004ad9 	.word	0x08004ad9
 80049c4:	08004b5b 	.word	0x08004b5b
 80049c8:	08004b5b 	.word	0x08004b5b
 80049cc:	08004b5b 	.word	0x08004b5b
 80049d0:	08004b19 	.word	0x08004b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa56 	bl	8004e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0204 	bic.w	r2, r2, #4
 80049fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6999      	ldr	r1, [r3, #24]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	619a      	str	r2, [r3, #24]
      break;
 8004a12:	e0a5      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fac6 	bl	8004fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	619a      	str	r2, [r3, #24]
      break;
 8004a54:	e084      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb2f 	bl	80050c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0208 	orr.w	r2, r2, #8
 8004a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0204 	bic.w	r2, r2, #4
 8004a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69d9      	ldr	r1, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	61da      	str	r2, [r3, #28]
      break;
 8004a94:	e064      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fb97 	bl	80051d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	021a      	lsls	r2, r3, #8
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
      break;
 8004ad6:	e043      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fbe0 	bl	80052a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b16:	e023      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fc24 	bl	800536c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b58:	e002      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop

08004b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_ConfigClockSource+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0b6      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x18a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	d03e      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0xd8>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	f200 8087 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	f000 8086 	beq.w	8004cea <HAL_TIM_ConfigClockSource+0x176>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d87f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004be4:	2b70      	cmp	r3, #112	; 0x70
 8004be6:	d01a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0xaa>
 8004be8:	2b70      	cmp	r3, #112	; 0x70
 8004bea:	d87b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bec:	2b60      	cmp	r3, #96	; 0x60
 8004bee:	d050      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x11e>
 8004bf0:	2b60      	cmp	r3, #96	; 0x60
 8004bf2:	d877      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bf4:	2b50      	cmp	r3, #80	; 0x50
 8004bf6:	d03c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xfe>
 8004bf8:	2b50      	cmp	r3, #80	; 0x50
 8004bfa:	d873      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d058      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x13e>
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d86f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b30      	cmp	r3, #48	; 0x30
 8004c06:	d064      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c08:	2b30      	cmp	r3, #48	; 0x30
 8004c0a:	d86b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d060      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d867      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d05a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c1c:	e062      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f000 fda1 	bl	8005774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	609a      	str	r2, [r3, #8]
      break;
 8004c4a:	e04f      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f000 fd8a 	bl	8005774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c6e:	609a      	str	r2, [r3, #8]
      break;
 8004c70:	e03c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fc48 	bl	8005514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2150      	movs	r1, #80	; 0x50
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fd57 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8004c90:	e02c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fca4 	bl	80055ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2160      	movs	r1, #96	; 0x60
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fd47 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e01c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fc28 	bl	8005514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2140      	movs	r1, #64	; 0x40
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fd37 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 fd2e 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a40      	ldr	r2, [pc, #256]	; (8004e6c <TIM_Base_SetConfig+0x114>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d013      	beq.n	8004d98 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d00f      	beq.n	8004d98 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3d      	ldr	r2, [pc, #244]	; (8004e70 <TIM_Base_SetConfig+0x118>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00b      	beq.n	8004d98 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3c      	ldr	r2, [pc, #240]	; (8004e74 <TIM_Base_SetConfig+0x11c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3b      	ldr	r2, [pc, #236]	; (8004e78 <TIM_Base_SetConfig+0x120>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3a      	ldr	r2, [pc, #232]	; (8004e7c <TIM_Base_SetConfig+0x124>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d108      	bne.n	8004daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <TIM_Base_SetConfig+0x114>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <TIM_Base_SetConfig+0x118>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <TIM_Base_SetConfig+0x11c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <TIM_Base_SetConfig+0x120>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <TIM_Base_SetConfig+0x124>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <TIM_Base_SetConfig+0x128>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <TIM_Base_SetConfig+0x12c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0x9a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <TIM_Base_SetConfig+0x130>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <TIM_Base_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_Base_SetConfig+0xf8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <TIM_Base_SetConfig+0xf8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <TIM_Base_SetConfig+0x128>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_Base_SetConfig+0xf8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <TIM_Base_SetConfig+0x12c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_Base_SetConfig+0xf8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <TIM_Base_SetConfig+0x130>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d103      	bne.n	8004e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	615a      	str	r2, [r3, #20]
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800
 8004e78:	40000c00 	.word	0x40000c00
 8004e7c:	40013400 	.word	0x40013400
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800

08004e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0201 	bic.w	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0303 	bic.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0302 	bic.w	r3, r3, #2
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2c      	ldr	r2, [pc, #176]	; (8004f98 <TIM_OC1_SetConfig+0x10c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00f      	beq.n	8004f0c <TIM_OC1_SetConfig+0x80>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a2b      	ldr	r2, [pc, #172]	; (8004f9c <TIM_OC1_SetConfig+0x110>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00b      	beq.n	8004f0c <TIM_OC1_SetConfig+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <TIM_OC1_SetConfig+0x114>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <TIM_OC1_SetConfig+0x80>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a29      	ldr	r2, [pc, #164]	; (8004fa4 <TIM_OC1_SetConfig+0x118>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_OC1_SetConfig+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <TIM_OC1_SetConfig+0x11c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10c      	bne.n	8004f26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0308 	bic.w	r3, r3, #8
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <TIM_OC1_SetConfig+0x10c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00f      	beq.n	8004f4e <TIM_OC1_SetConfig+0xc2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <TIM_OC1_SetConfig+0x110>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00b      	beq.n	8004f4e <TIM_OC1_SetConfig+0xc2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC1_SetConfig+0x114>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <TIM_OC1_SetConfig+0xc2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC1_SetConfig+0x118>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_OC1_SetConfig+0xc2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC1_SetConfig+0x11c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d111      	bne.n	8004f72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	621a      	str	r2, [r3, #32]
}
 8004f8c:	bf00      	nop
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0210 	bic.w	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a28      	ldr	r2, [pc, #160]	; (80050ac <TIM_OC2_SetConfig+0x100>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_OC2_SetConfig+0x6c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <TIM_OC2_SetConfig+0x104>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10d      	bne.n	8005034 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <TIM_OC2_SetConfig+0x100>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00f      	beq.n	800505c <TIM_OC2_SetConfig+0xb0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <TIM_OC2_SetConfig+0x104>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_OC2_SetConfig+0xb0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <TIM_OC2_SetConfig+0x108>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_OC2_SetConfig+0xb0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <TIM_OC2_SetConfig+0x10c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC2_SetConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a19      	ldr	r2, [pc, #100]	; (80050bc <TIM_OC2_SetConfig+0x110>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d113      	bne.n	8005084 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800510c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a27      	ldr	r2, [pc, #156]	; (80051bc <TIM_OC3_SetConfig+0xfc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_OC3_SetConfig+0x6a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <TIM_OC3_SetConfig+0x100>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d10d      	bne.n	8005146 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1c      	ldr	r2, [pc, #112]	; (80051bc <TIM_OC3_SetConfig+0xfc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_OC3_SetConfig+0xae>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <TIM_OC3_SetConfig+0x100>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_OC3_SetConfig+0xae>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <TIM_OC3_SetConfig+0x104>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_OC3_SetConfig+0xae>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <TIM_OC3_SetConfig+0x108>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_OC3_SetConfig+0xae>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a18      	ldr	r2, [pc, #96]	; (80051cc <TIM_OC3_SetConfig+0x10c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d113      	bne.n	8005196 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800521e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	031b      	lsls	r3, r3, #12
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <TIM_OC4_SetConfig+0xc0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00f      	beq.n	8005254 <TIM_OC4_SetConfig+0x84>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <TIM_OC4_SetConfig+0xc4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00b      	beq.n	8005254 <TIM_OC4_SetConfig+0x84>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <TIM_OC4_SetConfig+0xc8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_OC4_SetConfig+0x84>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC4_SetConfig+0xcc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC4_SetConfig+0x84>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC4_SetConfig+0xd0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800

080052a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a17      	ldr	r2, [pc, #92]	; (8005358 <TIM_OC5_SetConfig+0xb4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_OC5_SetConfig+0x7a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <TIM_OC5_SetConfig+0xb8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_OC5_SetConfig+0x7a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <TIM_OC5_SetConfig+0xbc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_OC5_SetConfig+0x7a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <TIM_OC5_SetConfig+0xc0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC5_SetConfig+0x7a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <TIM_OC5_SetConfig+0xc4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d109      	bne.n	8005332 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	051b      	lsls	r3, r3, #20
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <TIM_OC6_SetConfig+0xb8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00f      	beq.n	80053e8 <TIM_OC6_SetConfig+0x7c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <TIM_OC6_SetConfig+0xbc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <TIM_OC6_SetConfig+0x7c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a16      	ldr	r2, [pc, #88]	; (800542c <TIM_OC6_SetConfig+0xc0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d007      	beq.n	80053e8 <TIM_OC6_SetConfig+0x7c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <TIM_OC6_SetConfig+0xc4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_OC6_SetConfig+0x7c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a14      	ldr	r2, [pc, #80]	; (8005434 <TIM_OC6_SetConfig+0xc8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d109      	bne.n	80053fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40013400 	.word	0x40013400
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <TIM_TI1_SetConfig+0xc4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d017      	beq.n	8005496 <TIM_TI1_SetConfig+0x5e>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546c:	d013      	beq.n	8005496 <TIM_TI1_SetConfig+0x5e>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a23      	ldr	r2, [pc, #140]	; (8005500 <TIM_TI1_SetConfig+0xc8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_TI1_SetConfig+0x5e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <TIM_TI1_SetConfig+0xcc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_TI1_SetConfig+0x5e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a21      	ldr	r2, [pc, #132]	; (8005508 <TIM_TI1_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_TI1_SetConfig+0x5e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a20      	ldr	r2, [pc, #128]	; (800550c <TIM_TI1_SetConfig+0xd4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_TI1_SetConfig+0x5e>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <TIM_TI1_SetConfig+0xd8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <TIM_TI1_SetConfig+0x62>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <TIM_TI1_SetConfig+0x64>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e003      	b.n	80054ba <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f003 030a 	and.w	r3, r3, #10
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000

08005514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 030a 	bic.w	r3, r3, #10
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f023 0210 	bic.w	r2, r3, #16
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f023 0210 	bic.w	r2, r3, #16
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	031b      	lsls	r3, r3, #12
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f023 0303 	bic.w	r3, r3, #3
 8005678:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	b2db      	uxtb	r3, r3
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800569c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005702:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	031b      	lsls	r3, r3, #12
 8005708:	b29b      	uxth	r3, r3
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	031b      	lsls	r3, r3, #12
 800571c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	f043 0307 	orr.w	r3, r3, #7
 8005760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	431a      	orrs	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2201      	movs	r2, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	401a      	ands	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	431a      	orrs	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e068      	b.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2e      	ldr	r2, [pc, #184]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2d      	ldr	r2, [pc, #180]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d108      	bne.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005852:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01d      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d018      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a14      	ldr	r2, [pc, #80]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10c      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40014000 	.word	0x40014000

08005910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e040      	b.n	80059e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fb ff40 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fc18 	bl	80061c0 <UART_SetConfig>
 8005990:	4603      	mov	r3, r0
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e022      	b.n	80059e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fe96 	bl	80066d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 ff1d 	bl	8006818 <UART_CheckIdleState>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	f040 8082 	bne.w	8005b06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_UART_Transmit+0x26>
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07a      	b.n	8005b08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_UART_Transmit+0x38>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e073      	b.n	8005b08 <HAL_UART_Transmit+0x120>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2221      	movs	r2, #33	; 0x21
 8005a34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a36:	f7fb ffd3 	bl	80019e0 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	88fa      	ldrh	r2, [r7, #6]
 8005a48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d108      	bne.n	8005a68 <HAL_UART_Transmit+0x80>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e003      	b.n	8005a70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a78:	e02d      	b.n	8005ad6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 ff10 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e039      	b.n	8005b08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	881a      	ldrh	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa6:	b292      	uxth	r2, r2
 8005aa8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	3302      	adds	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e008      	b.n	8005ac4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	781a      	ldrb	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	b292      	uxth	r2, r2
 8005abc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1cb      	bne.n	8005a7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2140      	movs	r1, #64	; 0x40
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fedc 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e005      	b.n	8005b08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d142      	bne.n	8005bac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_UART_Receive_IT+0x22>
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e03b      	b.n	8005bae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Receive_IT+0x34>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e034      	b.n	8005bae <HAL_UART_Receive_IT+0x9e>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <HAL_UART_Receive_IT+0xa8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d01f      	beq.n	8005b9c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	613b      	str	r3, [r7, #16]
   return(result);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	623b      	str	r3, [r7, #32]
 8005b8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	69f9      	ldr	r1, [r7, #28]
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 ff46 	bl	8006a34 <UART_Start_Receive_IT>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	e000      	b.n	8005bae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3728      	adds	r7, #40	; 0x28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40008000 	.word	0x40008000

08005bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b0ba      	sub	sp, #232	; 0xe8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005be2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005be6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bea:	4013      	ands	r3, r2
 8005bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d115      	bne.n	8005c24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 82a6 	beq.w	8006166 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
      }
      return;
 8005c22:	e2a0      	b.n	8006166 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8117 	beq.w	8005e5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c3e:	4b85      	ldr	r3, [pc, #532]	; (8005e54 <HAL_UART_IRQHandler+0x298>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 810a 	beq.w	8005e5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d011      	beq.n	8005c78 <HAL_UART_IRQHandler+0xbc>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6e:	f043 0201 	orr.w	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d011      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xec>
 8005c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2202      	movs	r2, #2
 8005c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9e:	f043 0204 	orr.w	r2, r3, #4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d011      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x11c>
 8005cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cce:	f043 0202 	orr.w	r2, r3, #2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d017      	beq.n	8005d14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d0a:	f043 0208 	orr.w	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d012      	beq.n	8005d46 <HAL_UART_IRQHandler+0x18a>
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3c:	f043 0220 	orr.w	r2, r3, #32
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 820c 	beq.w	800616a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d005      	beq.n	8005d9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d04f      	beq.n	8005e3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 ff12 	bl	8006bc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d141      	bne.n	8005e36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3308      	adds	r3, #8
 8005db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1d9      	bne.n	8005db2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <HAL_UART_IRQHandler+0x29c>)
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fb ff3f 	bl	8001c96 <HAL_DMA_Abort_IT>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e00f      	b.n	8005e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f9b0 	bl	8006194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e00b      	b.n	8005e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f9ac 	bl	8006194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	e007      	b.n	8005e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9a8 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e4c:	e18d      	b.n	800616a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4e:	bf00      	nop
    return;
 8005e50:	e18b      	b.n	800616a <HAL_UART_IRQHandler+0x5ae>
 8005e52:	bf00      	nop
 8005e54:	04000120 	.word	0x04000120
 8005e58:	08006c8f 	.word	0x08006c8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	f040 8146 	bne.w	80060f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 813f 	beq.w	80060f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8138 	beq.w	80060f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2210      	movs	r2, #16
 8005e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	f040 80b4 	bne.w	8006002 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 815f 	beq.w	800616e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	f080 8157 	bcs.w	800616e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 8085 	bne.w	8005fe6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1da      	bne.n	8005edc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e1      	bne.n	8005f26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e3      	bne.n	8005f62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb6:	f023 0310 	bic.w	r3, r3, #16
 8005fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e4      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fb fe1a 	bl	8001c1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8d4 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006000:	e0b5      	b.n	800616e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800600e:	b29b      	uxth	r3, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80a7 	beq.w	8006172 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a2 	beq.w	8006172 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
 8006052:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e4      	bne.n	800602e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	623b      	str	r3, [r7, #32]
   return(result);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006088:	633a      	str	r2, [r7, #48]	; 0x30
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800608e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e3      	bne.n	8006064 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69b9      	ldr	r1, [r7, #24]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	617b      	str	r3, [r7, #20]
   return(result);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e4      	bne.n	80060ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f85c 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f0:	e03f      	b.n	8006172 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00e      	beq.n	800611c <HAL_UART_IRQHandler+0x560>
 80060fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 ff5a 	bl	8006fce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800611a:	e02d      	b.n	8006178 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01c      	beq.n	8006176 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
    }
    return;
 8006144:	e017      	b.n	8006176 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d012      	beq.n	8006178 <HAL_UART_IRQHandler+0x5bc>
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00c      	beq.n	8006178 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fdab 	bl	8006cba <UART_EndTransmit_IT>
    return;
 8006164:	e008      	b.n	8006178 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006166:	bf00      	nop
 8006168:	e006      	b.n	8006178 <HAL_UART_IRQHandler+0x5bc>
    return;
 800616a:	bf00      	nop
 800616c:	e004      	b.n	8006178 <HAL_UART_IRQHandler+0x5bc>
      return;
 800616e:	bf00      	nop
 8006170:	e002      	b.n	8006178 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006172:	bf00      	nop
 8006174:	e000      	b.n	8006178 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006176:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006178:	37e8      	adds	r7, #232	; 0xe8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop

08006180 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b5b0      	push	{r4, r5, r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4bad      	ldr	r3, [pc, #692]	; (80064a0 <UART_SetConfig+0x2e0>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	69f9      	ldr	r1, [r7, #28]
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4aa2      	ldr	r2, [pc, #648]	; (80064a4 <UART_SetConfig+0x2e4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	4313      	orrs	r3, r2
 8006226:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a99      	ldr	r2, [pc, #612]	; (80064a8 <UART_SetConfig+0x2e8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d121      	bne.n	800628a <UART_SetConfig+0xca>
 8006246:	4b99      	ldr	r3, [pc, #612]	; (80064ac <UART_SetConfig+0x2ec>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	2b03      	cmp	r3, #3
 8006252:	d817      	bhi.n	8006284 <UART_SetConfig+0xc4>
 8006254:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x9c>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	0800626d 	.word	0x0800626d
 8006260:	08006279 	.word	0x08006279
 8006264:	08006273 	.word	0x08006273
 8006268:	0800627f 	.word	0x0800627f
 800626c:	2301      	movs	r3, #1
 800626e:	76fb      	strb	r3, [r7, #27]
 8006270:	e0e7      	b.n	8006442 <UART_SetConfig+0x282>
 8006272:	2302      	movs	r3, #2
 8006274:	76fb      	strb	r3, [r7, #27]
 8006276:	e0e4      	b.n	8006442 <UART_SetConfig+0x282>
 8006278:	2304      	movs	r3, #4
 800627a:	76fb      	strb	r3, [r7, #27]
 800627c:	e0e1      	b.n	8006442 <UART_SetConfig+0x282>
 800627e:	2308      	movs	r3, #8
 8006280:	76fb      	strb	r3, [r7, #27]
 8006282:	e0de      	b.n	8006442 <UART_SetConfig+0x282>
 8006284:	2310      	movs	r3, #16
 8006286:	76fb      	strb	r3, [r7, #27]
 8006288:	e0db      	b.n	8006442 <UART_SetConfig+0x282>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a88      	ldr	r2, [pc, #544]	; (80064b0 <UART_SetConfig+0x2f0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d132      	bne.n	80062fa <UART_SetConfig+0x13a>
 8006294:	4b85      	ldr	r3, [pc, #532]	; (80064ac <UART_SetConfig+0x2ec>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b0c      	cmp	r3, #12
 80062a0:	d828      	bhi.n	80062f4 <UART_SetConfig+0x134>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0xe8>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080062f5 	.word	0x080062f5
 80062b0:	080062f5 	.word	0x080062f5
 80062b4:	080062f5 	.word	0x080062f5
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	080062f5 	.word	0x080062f5
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	080062f5 	.word	0x080062f5
 80062c8:	080062e3 	.word	0x080062e3
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062f5 	.word	0x080062f5
 80062d8:	080062ef 	.word	0x080062ef
 80062dc:	2300      	movs	r3, #0
 80062de:	76fb      	strb	r3, [r7, #27]
 80062e0:	e0af      	b.n	8006442 <UART_SetConfig+0x282>
 80062e2:	2302      	movs	r3, #2
 80062e4:	76fb      	strb	r3, [r7, #27]
 80062e6:	e0ac      	b.n	8006442 <UART_SetConfig+0x282>
 80062e8:	2304      	movs	r3, #4
 80062ea:	76fb      	strb	r3, [r7, #27]
 80062ec:	e0a9      	b.n	8006442 <UART_SetConfig+0x282>
 80062ee:	2308      	movs	r3, #8
 80062f0:	76fb      	strb	r3, [r7, #27]
 80062f2:	e0a6      	b.n	8006442 <UART_SetConfig+0x282>
 80062f4:	2310      	movs	r3, #16
 80062f6:	76fb      	strb	r3, [r7, #27]
 80062f8:	e0a3      	b.n	8006442 <UART_SetConfig+0x282>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a6d      	ldr	r2, [pc, #436]	; (80064b4 <UART_SetConfig+0x2f4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d120      	bne.n	8006346 <UART_SetConfig+0x186>
 8006304:	4b69      	ldr	r3, [pc, #420]	; (80064ac <UART_SetConfig+0x2ec>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800630e:	2b30      	cmp	r3, #48	; 0x30
 8006310:	d013      	beq.n	800633a <UART_SetConfig+0x17a>
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d814      	bhi.n	8006340 <UART_SetConfig+0x180>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d009      	beq.n	800632e <UART_SetConfig+0x16e>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d810      	bhi.n	8006340 <UART_SetConfig+0x180>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <UART_SetConfig+0x168>
 8006322:	2b10      	cmp	r3, #16
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x174>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x180>
 8006328:	2300      	movs	r3, #0
 800632a:	76fb      	strb	r3, [r7, #27]
 800632c:	e089      	b.n	8006442 <UART_SetConfig+0x282>
 800632e:	2302      	movs	r3, #2
 8006330:	76fb      	strb	r3, [r7, #27]
 8006332:	e086      	b.n	8006442 <UART_SetConfig+0x282>
 8006334:	2304      	movs	r3, #4
 8006336:	76fb      	strb	r3, [r7, #27]
 8006338:	e083      	b.n	8006442 <UART_SetConfig+0x282>
 800633a:	2308      	movs	r3, #8
 800633c:	76fb      	strb	r3, [r7, #27]
 800633e:	e080      	b.n	8006442 <UART_SetConfig+0x282>
 8006340:	2310      	movs	r3, #16
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e07d      	b.n	8006442 <UART_SetConfig+0x282>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a5b      	ldr	r2, [pc, #364]	; (80064b8 <UART_SetConfig+0x2f8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d120      	bne.n	8006392 <UART_SetConfig+0x1d2>
 8006350:	4b56      	ldr	r3, [pc, #344]	; (80064ac <UART_SetConfig+0x2ec>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800635a:	2bc0      	cmp	r3, #192	; 0xc0
 800635c:	d013      	beq.n	8006386 <UART_SetConfig+0x1c6>
 800635e:	2bc0      	cmp	r3, #192	; 0xc0
 8006360:	d814      	bhi.n	800638c <UART_SetConfig+0x1cc>
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d009      	beq.n	800637a <UART_SetConfig+0x1ba>
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d810      	bhi.n	800638c <UART_SetConfig+0x1cc>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <UART_SetConfig+0x1b4>
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d006      	beq.n	8006380 <UART_SetConfig+0x1c0>
 8006372:	e00b      	b.n	800638c <UART_SetConfig+0x1cc>
 8006374:	2300      	movs	r3, #0
 8006376:	76fb      	strb	r3, [r7, #27]
 8006378:	e063      	b.n	8006442 <UART_SetConfig+0x282>
 800637a:	2302      	movs	r3, #2
 800637c:	76fb      	strb	r3, [r7, #27]
 800637e:	e060      	b.n	8006442 <UART_SetConfig+0x282>
 8006380:	2304      	movs	r3, #4
 8006382:	76fb      	strb	r3, [r7, #27]
 8006384:	e05d      	b.n	8006442 <UART_SetConfig+0x282>
 8006386:	2308      	movs	r3, #8
 8006388:	76fb      	strb	r3, [r7, #27]
 800638a:	e05a      	b.n	8006442 <UART_SetConfig+0x282>
 800638c:	2310      	movs	r3, #16
 800638e:	76fb      	strb	r3, [r7, #27]
 8006390:	e057      	b.n	8006442 <UART_SetConfig+0x282>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a49      	ldr	r2, [pc, #292]	; (80064bc <UART_SetConfig+0x2fc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d125      	bne.n	80063e8 <UART_SetConfig+0x228>
 800639c:	4b43      	ldr	r3, [pc, #268]	; (80064ac <UART_SetConfig+0x2ec>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063aa:	d017      	beq.n	80063dc <UART_SetConfig+0x21c>
 80063ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b0:	d817      	bhi.n	80063e2 <UART_SetConfig+0x222>
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b6:	d00b      	beq.n	80063d0 <UART_SetConfig+0x210>
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063bc:	d811      	bhi.n	80063e2 <UART_SetConfig+0x222>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <UART_SetConfig+0x20a>
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d006      	beq.n	80063d6 <UART_SetConfig+0x216>
 80063c8:	e00b      	b.n	80063e2 <UART_SetConfig+0x222>
 80063ca:	2300      	movs	r3, #0
 80063cc:	76fb      	strb	r3, [r7, #27]
 80063ce:	e038      	b.n	8006442 <UART_SetConfig+0x282>
 80063d0:	2302      	movs	r3, #2
 80063d2:	76fb      	strb	r3, [r7, #27]
 80063d4:	e035      	b.n	8006442 <UART_SetConfig+0x282>
 80063d6:	2304      	movs	r3, #4
 80063d8:	76fb      	strb	r3, [r7, #27]
 80063da:	e032      	b.n	8006442 <UART_SetConfig+0x282>
 80063dc:	2308      	movs	r3, #8
 80063de:	76fb      	strb	r3, [r7, #27]
 80063e0:	e02f      	b.n	8006442 <UART_SetConfig+0x282>
 80063e2:	2310      	movs	r3, #16
 80063e4:	76fb      	strb	r3, [r7, #27]
 80063e6:	e02c      	b.n	8006442 <UART_SetConfig+0x282>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2d      	ldr	r2, [pc, #180]	; (80064a4 <UART_SetConfig+0x2e4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d125      	bne.n	800643e <UART_SetConfig+0x27e>
 80063f2:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <UART_SetConfig+0x2ec>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006400:	d017      	beq.n	8006432 <UART_SetConfig+0x272>
 8006402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006406:	d817      	bhi.n	8006438 <UART_SetConfig+0x278>
 8006408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640c:	d00b      	beq.n	8006426 <UART_SetConfig+0x266>
 800640e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006412:	d811      	bhi.n	8006438 <UART_SetConfig+0x278>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <UART_SetConfig+0x260>
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d006      	beq.n	800642c <UART_SetConfig+0x26c>
 800641e:	e00b      	b.n	8006438 <UART_SetConfig+0x278>
 8006420:	2300      	movs	r3, #0
 8006422:	76fb      	strb	r3, [r7, #27]
 8006424:	e00d      	b.n	8006442 <UART_SetConfig+0x282>
 8006426:	2302      	movs	r3, #2
 8006428:	76fb      	strb	r3, [r7, #27]
 800642a:	e00a      	b.n	8006442 <UART_SetConfig+0x282>
 800642c:	2304      	movs	r3, #4
 800642e:	76fb      	strb	r3, [r7, #27]
 8006430:	e007      	b.n	8006442 <UART_SetConfig+0x282>
 8006432:	2308      	movs	r3, #8
 8006434:	76fb      	strb	r3, [r7, #27]
 8006436:	e004      	b.n	8006442 <UART_SetConfig+0x282>
 8006438:	2310      	movs	r3, #16
 800643a:	76fb      	strb	r3, [r7, #27]
 800643c:	e001      	b.n	8006442 <UART_SetConfig+0x282>
 800643e:	2310      	movs	r3, #16
 8006440:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <UART_SetConfig+0x2e4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	f040 8087 	bne.w	800655c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800644e:	7efb      	ldrb	r3, [r7, #27]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d837      	bhi.n	80064c4 <UART_SetConfig+0x304>
 8006454:	a201      	add	r2, pc, #4	; (adr r2, 800645c <UART_SetConfig+0x29c>)
 8006456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645a:	bf00      	nop
 800645c:	08006481 	.word	0x08006481
 8006460:	080064c5 	.word	0x080064c5
 8006464:	08006489 	.word	0x08006489
 8006468:	080064c5 	.word	0x080064c5
 800646c:	0800648f 	.word	0x0800648f
 8006470:	080064c5 	.word	0x080064c5
 8006474:	080064c5 	.word	0x080064c5
 8006478:	080064c5 	.word	0x080064c5
 800647c:	08006497 	.word	0x08006497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006480:	f7fc ffd2 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8006484:	6178      	str	r0, [r7, #20]
        break;
 8006486:	e022      	b.n	80064ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006488:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <UART_SetConfig+0x300>)
 800648a:	617b      	str	r3, [r7, #20]
        break;
 800648c:	e01f      	b.n	80064ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648e:	f7fc ff33 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8006492:	6178      	str	r0, [r7, #20]
        break;
 8006494:	e01b      	b.n	80064ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649a:	617b      	str	r3, [r7, #20]
        break;
 800649c:	e017      	b.n	80064ce <UART_SetConfig+0x30e>
 800649e:	bf00      	nop
 80064a0:	efff69f3 	.word	0xefff69f3
 80064a4:	40008000 	.word	0x40008000
 80064a8:	40013800 	.word	0x40013800
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40004400 	.word	0x40004400
 80064b4:	40004800 	.word	0x40004800
 80064b8:	40004c00 	.word	0x40004c00
 80064bc:	40005000 	.word	0x40005000
 80064c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	76bb      	strb	r3, [r7, #26]
        break;
 80064cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80f1 	beq.w	80066b8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d305      	bcc.n	80064f2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d902      	bls.n	80064f8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	76bb      	strb	r3, [r7, #26]
 80064f6:	e0df      	b.n	80066b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	020b      	lsls	r3, r1, #8
 800650a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800650e:	0202      	lsls	r2, r0, #8
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	6849      	ldr	r1, [r1, #4]
 8006514:	0849      	lsrs	r1, r1, #1
 8006516:	4608      	mov	r0, r1
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	1814      	adds	r4, r2, r0
 800651e:	eb43 0501 	adc.w	r5, r3, r1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	461a      	mov	r2, r3
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	f7fa fb3a 	bl	8000ba8 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4613      	mov	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006542:	d308      	bcc.n	8006556 <UART_SetConfig+0x396>
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654a:	d204      	bcs.n	8006556 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	e0b0      	b.n	80066b8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	76bb      	strb	r3, [r7, #26]
 800655a:	e0ad      	b.n	80066b8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	d15b      	bne.n	800661e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006566:	7efb      	ldrb	r3, [r7, #27]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d828      	bhi.n	80065be <UART_SetConfig+0x3fe>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x3b4>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065bf 	.word	0x080065bf
 8006584:	080065af 	.word	0x080065af
 8006588:	080065bf 	.word	0x080065bf
 800658c:	080065bf 	.word	0x080065bf
 8006590:	080065bf 	.word	0x080065bf
 8006594:	080065b7 	.word	0x080065b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006598:	f7fc ff46 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 800659c:	6178      	str	r0, [r7, #20]
        break;
 800659e:	e013      	b.n	80065c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a0:	f7fc ff58 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 80065a4:	6178      	str	r0, [r7, #20]
        break;
 80065a6:	e00f      	b.n	80065c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b49      	ldr	r3, [pc, #292]	; (80066d0 <UART_SetConfig+0x510>)
 80065aa:	617b      	str	r3, [r7, #20]
        break;
 80065ac:	e00c      	b.n	80065c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7fc fea3 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80065b2:	6178      	str	r0, [r7, #20]
        break;
 80065b4:	e008      	b.n	80065c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	617b      	str	r3, [r7, #20]
        break;
 80065bc:	e004      	b.n	80065c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	76bb      	strb	r3, [r7, #26]
        break;
 80065c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d074      	beq.n	80066b8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	005a      	lsls	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b0f      	cmp	r3, #15
 80065e8:	d916      	bls.n	8006618 <UART_SetConfig+0x458>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d212      	bcs.n	8006618 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f023 030f 	bic.w	r3, r3, #15
 80065fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	b29a      	uxth	r2, r3
 8006608:	89fb      	ldrh	r3, [r7, #14]
 800660a:	4313      	orrs	r3, r2
 800660c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	89fa      	ldrh	r2, [r7, #14]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	e04f      	b.n	80066b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	76bb      	strb	r3, [r7, #26]
 800661c:	e04c      	b.n	80066b8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800661e:	7efb      	ldrb	r3, [r7, #27]
 8006620:	2b08      	cmp	r3, #8
 8006622:	d828      	bhi.n	8006676 <UART_SetConfig+0x4b6>
 8006624:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0x46c>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006651 	.word	0x08006651
 8006630:	08006659 	.word	0x08006659
 8006634:	08006661 	.word	0x08006661
 8006638:	08006677 	.word	0x08006677
 800663c:	08006667 	.word	0x08006667
 8006640:	08006677 	.word	0x08006677
 8006644:	08006677 	.word	0x08006677
 8006648:	08006677 	.word	0x08006677
 800664c:	0800666f 	.word	0x0800666f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006650:	f7fc feea 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8006654:	6178      	str	r0, [r7, #20]
        break;
 8006656:	e013      	b.n	8006680 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006658:	f7fc fefc 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 800665c:	6178      	str	r0, [r7, #20]
        break;
 800665e:	e00f      	b.n	8006680 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <UART_SetConfig+0x510>)
 8006662:	617b      	str	r3, [r7, #20]
        break;
 8006664:	e00c      	b.n	8006680 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006666:	f7fc fe47 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 800666a:	6178      	str	r0, [r7, #20]
        break;
 800666c:	e008      	b.n	8006680 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006672:	617b      	str	r3, [r7, #20]
        break;
 8006674:	e004      	b.n	8006680 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	76bb      	strb	r3, [r7, #26]
        break;
 800667e:	bf00      	nop
    }

    if (pclk != 0U)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d018      	beq.n	80066b8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	085a      	lsrs	r2, r3, #1
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	441a      	add	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	fbb2 f3f3 	udiv	r3, r2, r3
 8006698:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d909      	bls.n	80066b4 <UART_SetConfig+0x4f4>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a6:	d205      	bcs.n	80066b4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	e001      	b.n	80066b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bdb0      	pop	{r4, r5, r7, pc}
 80066ce:	bf00      	nop
 80066d0:	00f42400 	.word	0x00f42400

080066d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01a      	beq.n	80067ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d2:	d10a      	bne.n	80067ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006828:	f7fb f8da 	bl	80019e0 <HAL_GetTick>
 800682c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b08      	cmp	r3, #8
 800683a:	d10e      	bne.n	800685a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800683c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f82d 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e023      	b.n	80068a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b04      	cmp	r3, #4
 8006866:	d10e      	bne.n	8006886 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f817 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00d      	b.n	80068a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b09c      	sub	sp, #112	; 0x70
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	e0a5      	b.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	f000 80a1 	beq.w	8006a08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fb f88b 	bl	80019e0 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
 80068d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d13e      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f0:	667b      	str	r3, [r7, #100]	; 0x64
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	663b      	str	r3, [r7, #96]	; 0x60
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800692e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006930:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e067      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d04f      	beq.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006976:	d147      	bne.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006980:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a0:	637b      	str	r3, [r7, #52]	; 0x34
 80069a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e6      	bne.n	8006982 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	613b      	str	r3, [r7, #16]
   return(result);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069d4:	623a      	str	r2, [r7, #32]
 80069d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	69f9      	ldr	r1, [r7, #28]
 80069da:	6a3a      	ldr	r2, [r7, #32]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e010      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69da      	ldr	r2, [r3, #28]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4013      	ands	r3, r2
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	f43f af4a 	beq.w	80068bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3770      	adds	r7, #112	; 0x70
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b097      	sub	sp, #92	; 0x5c
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a66:	d10e      	bne.n	8006a86 <UART_Start_Receive_IT+0x52>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d105      	bne.n	8006a7c <UART_Start_Receive_IT+0x48>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a7a:	e02d      	b.n	8006ad8 <UART_Start_Receive_IT+0xa4>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	22ff      	movs	r2, #255	; 0xff
 8006a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a84:	e028      	b.n	8006ad8 <UART_Start_Receive_IT+0xa4>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10d      	bne.n	8006aaa <UART_Start_Receive_IT+0x76>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <UART_Start_Receive_IT+0x6c>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	22ff      	movs	r2, #255	; 0xff
 8006a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9e:	e01b      	b.n	8006ad8 <UART_Start_Receive_IT+0xa4>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	227f      	movs	r2, #127	; 0x7f
 8006aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa8:	e016      	b.n	8006ad8 <UART_Start_Receive_IT+0xa4>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab2:	d10d      	bne.n	8006ad0 <UART_Start_Receive_IT+0x9c>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <UART_Start_Receive_IT+0x92>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	227f      	movs	r2, #127	; 0x7f
 8006ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac4:	e008      	b.n	8006ad8 <UART_Start_Receive_IT+0xa4>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	223f      	movs	r2, #63	; 0x3f
 8006aca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ace:	e003      	b.n	8006ad8 <UART_Start_Receive_IT+0xa4>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2222      	movs	r2, #34	; 0x22
 8006ae4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3308      	adds	r3, #8
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	657b      	str	r3, [r7, #84]	; 0x54
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b06:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d107      	bne.n	8006b34 <UART_Start_Receive_IT+0x100>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <UART_Start_Receive_IT+0x18c>)
 8006b30:	665a      	str	r2, [r3, #100]	; 0x64
 8006b32:	e002      	b.n	8006b3a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <UART_Start_Receive_IT+0x190>)
 8006b38:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d019      	beq.n	8006b7e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_Start_Receive_IT+0x116>
 8006b7c:	e018      	b.n	8006bb0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f043 0320 	orr.w	r3, r3, #32
 8006b92:	653b      	str	r3, [r7, #80]	; 0x50
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9c:	623b      	str	r3, [r7, #32]
 8006b9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	69f9      	ldr	r1, [r7, #28]
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e6      	bne.n	8006b7e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	375c      	adds	r7, #92	; 0x5c
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	08006e6f 	.word	0x08006e6f
 8006bc4:	08006d0f 	.word	0x08006d0f

08006bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b095      	sub	sp, #84	; 0x54
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bee:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e6      	bne.n	8006bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d118      	bne.n	8006c70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 0310 	bic.w	r3, r3, #16
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c82:	bf00      	nop
 8006c84:	3754      	adds	r7, #84	; 0x54
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fa71 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6979      	ldr	r1, [r7, #20]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	613b      	str	r3, [r7, #16]
   return(result);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e6      	bne.n	8006cc2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fa3d 	bl	8006180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d06:	bf00      	nop
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b096      	sub	sp, #88	; 0x58
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d24:	2b22      	cmp	r3, #34	; 0x22
 8006d26:	f040 8094 	bne.w	8006e52 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d34:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006d38:	b2d9      	uxtb	r1, r3
 8006d3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d44:	400a      	ands	r2, r1
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d179      	bne.n	8006e66 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d86:	653b      	str	r3, [r7, #80]	; 0x50
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d90:	647b      	str	r3, [r7, #68]	; 0x44
 8006d92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e6      	bne.n	8006d72 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	623b      	str	r3, [r7, #32]
   return(result);
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dc4:	633a      	str	r2, [r7, #48]	; 0x30
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e5      	bne.n	8006da4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d12e      	bne.n	8006e4a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0310 	bic.w	r3, r3, #16
 8006e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	69b9      	ldr	r1, [r7, #24]
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d103      	bne.n	8006e3a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2210      	movs	r2, #16
 8006e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff f9b0 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e48:	e00d      	b.n	8006e66 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fa f998 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 8006e50:	e009      	b.n	8006e66 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	8b1b      	ldrh	r3, [r3, #24]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0208 	orr.w	r2, r2, #8
 8006e62:	b292      	uxth	r2, r2
 8006e64:	831a      	strh	r2, [r3, #24]
}
 8006e66:	bf00      	nop
 8006e68:	3758      	adds	r7, #88	; 0x58
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b096      	sub	sp, #88	; 0x58
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e84:	2b22      	cmp	r3, #34	; 0x22
 8006e86:	f040 8094 	bne.w	8006fb2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e90:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e9a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d179      	bne.n	8006fc6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e6      	bne.n	8006ed2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d12e      	bne.n	8006faa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f023 0310 	bic.w	r3, r3, #16
 8006f66:	647b      	str	r3, [r7, #68]	; 0x44
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6979      	ldr	r1, [r7, #20]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d103      	bne.n	8006f9a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2210      	movs	r2, #16
 8006f98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff f900 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fa8:	e00d      	b.n	8006fc6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa f8e8 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 8006fb0:	e009      	b.n	8006fc6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	8b1b      	ldrh	r3, [r3, #24]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0208 	orr.w	r2, r2, #8
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	831a      	strh	r2, [r3, #24]
}
 8006fc6:	bf00      	nop
 8006fc8:	3758      	adds	r7, #88	; 0x58
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <__errno>:
 8006fe4:	4b01      	ldr	r3, [pc, #4]	; (8006fec <__errno+0x8>)
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	2000000c 	.word	0x2000000c

08006ff0 <__libc_init_array>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	4d0d      	ldr	r5, [pc, #52]	; (8007028 <__libc_init_array+0x38>)
 8006ff4:	4c0d      	ldr	r4, [pc, #52]	; (800702c <__libc_init_array+0x3c>)
 8006ff6:	1b64      	subs	r4, r4, r5
 8006ff8:	10a4      	asrs	r4, r4, #2
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	42a6      	cmp	r6, r4
 8006ffe:	d109      	bne.n	8007014 <__libc_init_array+0x24>
 8007000:	4d0b      	ldr	r5, [pc, #44]	; (8007030 <__libc_init_array+0x40>)
 8007002:	4c0c      	ldr	r4, [pc, #48]	; (8007034 <__libc_init_array+0x44>)
 8007004:	f002 fd7e 	bl	8009b04 <_init>
 8007008:	1b64      	subs	r4, r4, r5
 800700a:	10a4      	asrs	r4, r4, #2
 800700c:	2600      	movs	r6, #0
 800700e:	42a6      	cmp	r6, r4
 8007010:	d105      	bne.n	800701e <__libc_init_array+0x2e>
 8007012:	bd70      	pop	{r4, r5, r6, pc}
 8007014:	f855 3b04 	ldr.w	r3, [r5], #4
 8007018:	4798      	blx	r3
 800701a:	3601      	adds	r6, #1
 800701c:	e7ee      	b.n	8006ffc <__libc_init_array+0xc>
 800701e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007022:	4798      	blx	r3
 8007024:	3601      	adds	r6, #1
 8007026:	e7f2      	b.n	800700e <__libc_init_array+0x1e>
 8007028:	08009f94 	.word	0x08009f94
 800702c:	08009f94 	.word	0x08009f94
 8007030:	08009f94 	.word	0x08009f94
 8007034:	08009f98 	.word	0x08009f98

08007038 <memset>:
 8007038:	4402      	add	r2, r0
 800703a:	4603      	mov	r3, r0
 800703c:	4293      	cmp	r3, r2
 800703e:	d100      	bne.n	8007042 <memset+0xa>
 8007040:	4770      	bx	lr
 8007042:	f803 1b01 	strb.w	r1, [r3], #1
 8007046:	e7f9      	b.n	800703c <memset+0x4>

08007048 <__cvt>:
 8007048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	ec55 4b10 	vmov	r4, r5, d0
 8007050:	2d00      	cmp	r5, #0
 8007052:	460e      	mov	r6, r1
 8007054:	4619      	mov	r1, r3
 8007056:	462b      	mov	r3, r5
 8007058:	bfbb      	ittet	lt
 800705a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800705e:	461d      	movlt	r5, r3
 8007060:	2300      	movge	r3, #0
 8007062:	232d      	movlt	r3, #45	; 0x2d
 8007064:	700b      	strb	r3, [r1, #0]
 8007066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800706c:	4691      	mov	r9, r2
 800706e:	f023 0820 	bic.w	r8, r3, #32
 8007072:	bfbc      	itt	lt
 8007074:	4622      	movlt	r2, r4
 8007076:	4614      	movlt	r4, r2
 8007078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800707c:	d005      	beq.n	800708a <__cvt+0x42>
 800707e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007082:	d100      	bne.n	8007086 <__cvt+0x3e>
 8007084:	3601      	adds	r6, #1
 8007086:	2102      	movs	r1, #2
 8007088:	e000      	b.n	800708c <__cvt+0x44>
 800708a:	2103      	movs	r1, #3
 800708c:	ab03      	add	r3, sp, #12
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	ab02      	add	r3, sp, #8
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	ec45 4b10 	vmov	d0, r4, r5
 8007098:	4653      	mov	r3, sl
 800709a:	4632      	mov	r2, r6
 800709c:	f000 fe18 	bl	8007cd0 <_dtoa_r>
 80070a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070a4:	4607      	mov	r7, r0
 80070a6:	d102      	bne.n	80070ae <__cvt+0x66>
 80070a8:	f019 0f01 	tst.w	r9, #1
 80070ac:	d022      	beq.n	80070f4 <__cvt+0xac>
 80070ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070b2:	eb07 0906 	add.w	r9, r7, r6
 80070b6:	d110      	bne.n	80070da <__cvt+0x92>
 80070b8:	783b      	ldrb	r3, [r7, #0]
 80070ba:	2b30      	cmp	r3, #48	; 0x30
 80070bc:	d10a      	bne.n	80070d4 <__cvt+0x8c>
 80070be:	2200      	movs	r2, #0
 80070c0:	2300      	movs	r3, #0
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ca:	b918      	cbnz	r0, 80070d4 <__cvt+0x8c>
 80070cc:	f1c6 0601 	rsb	r6, r6, #1
 80070d0:	f8ca 6000 	str.w	r6, [sl]
 80070d4:	f8da 3000 	ldr.w	r3, [sl]
 80070d8:	4499      	add	r9, r3
 80070da:	2200      	movs	r2, #0
 80070dc:	2300      	movs	r3, #0
 80070de:	4620      	mov	r0, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	f7f9 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e6:	b108      	cbz	r0, 80070ec <__cvt+0xa4>
 80070e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80070ec:	2230      	movs	r2, #48	; 0x30
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	454b      	cmp	r3, r9
 80070f2:	d307      	bcc.n	8007104 <__cvt+0xbc>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f8:	1bdb      	subs	r3, r3, r7
 80070fa:	4638      	mov	r0, r7
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	b004      	add	sp, #16
 8007100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007104:	1c59      	adds	r1, r3, #1
 8007106:	9103      	str	r1, [sp, #12]
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	e7f0      	b.n	80070ee <__cvt+0xa6>

0800710c <__exponent>:
 800710c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800710e:	4603      	mov	r3, r0
 8007110:	2900      	cmp	r1, #0
 8007112:	bfb8      	it	lt
 8007114:	4249      	neglt	r1, r1
 8007116:	f803 2b02 	strb.w	r2, [r3], #2
 800711a:	bfb4      	ite	lt
 800711c:	222d      	movlt	r2, #45	; 0x2d
 800711e:	222b      	movge	r2, #43	; 0x2b
 8007120:	2909      	cmp	r1, #9
 8007122:	7042      	strb	r2, [r0, #1]
 8007124:	dd2a      	ble.n	800717c <__exponent+0x70>
 8007126:	f10d 0407 	add.w	r4, sp, #7
 800712a:	46a4      	mov	ip, r4
 800712c:	270a      	movs	r7, #10
 800712e:	46a6      	mov	lr, r4
 8007130:	460a      	mov	r2, r1
 8007132:	fb91 f6f7 	sdiv	r6, r1, r7
 8007136:	fb07 1516 	mls	r5, r7, r6, r1
 800713a:	3530      	adds	r5, #48	; 0x30
 800713c:	2a63      	cmp	r2, #99	; 0x63
 800713e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007146:	4631      	mov	r1, r6
 8007148:	dcf1      	bgt.n	800712e <__exponent+0x22>
 800714a:	3130      	adds	r1, #48	; 0x30
 800714c:	f1ae 0502 	sub.w	r5, lr, #2
 8007150:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007154:	1c44      	adds	r4, r0, #1
 8007156:	4629      	mov	r1, r5
 8007158:	4561      	cmp	r1, ip
 800715a:	d30a      	bcc.n	8007172 <__exponent+0x66>
 800715c:	f10d 0209 	add.w	r2, sp, #9
 8007160:	eba2 020e 	sub.w	r2, r2, lr
 8007164:	4565      	cmp	r5, ip
 8007166:	bf88      	it	hi
 8007168:	2200      	movhi	r2, #0
 800716a:	4413      	add	r3, r2
 800716c:	1a18      	subs	r0, r3, r0
 800716e:	b003      	add	sp, #12
 8007170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800717a:	e7ed      	b.n	8007158 <__exponent+0x4c>
 800717c:	2330      	movs	r3, #48	; 0x30
 800717e:	3130      	adds	r1, #48	; 0x30
 8007180:	7083      	strb	r3, [r0, #2]
 8007182:	70c1      	strb	r1, [r0, #3]
 8007184:	1d03      	adds	r3, r0, #4
 8007186:	e7f1      	b.n	800716c <__exponent+0x60>

08007188 <_printf_float>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	ed2d 8b02 	vpush	{d8}
 8007190:	b08d      	sub	sp, #52	; 0x34
 8007192:	460c      	mov	r4, r1
 8007194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007198:	4616      	mov	r6, r2
 800719a:	461f      	mov	r7, r3
 800719c:	4605      	mov	r5, r0
 800719e:	f001 fd3b 	bl	8008c18 <_localeconv_r>
 80071a2:	f8d0 a000 	ldr.w	sl, [r0]
 80071a6:	4650      	mov	r0, sl
 80071a8:	f7f9 f812 	bl	80001d0 <strlen>
 80071ac:	2300      	movs	r3, #0
 80071ae:	930a      	str	r3, [sp, #40]	; 0x28
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	f8d8 3000 	ldr.w	r3, [r8]
 80071b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071bc:	3307      	adds	r3, #7
 80071be:	f023 0307 	bic.w	r3, r3, #7
 80071c2:	f103 0208 	add.w	r2, r3, #8
 80071c6:	f8c8 2000 	str.w	r2, [r8]
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071da:	9307      	str	r3, [sp, #28]
 80071dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80071e0:	ee08 0a10 	vmov	s16, r0
 80071e4:	4b9f      	ldr	r3, [pc, #636]	; (8007464 <_printf_float+0x2dc>)
 80071e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ea:	f04f 32ff 	mov.w	r2, #4294967295
 80071ee:	f7f9 fc9d 	bl	8000b2c <__aeabi_dcmpun>
 80071f2:	bb88      	cbnz	r0, 8007258 <_printf_float+0xd0>
 80071f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071f8:	4b9a      	ldr	r3, [pc, #616]	; (8007464 <_printf_float+0x2dc>)
 80071fa:	f04f 32ff 	mov.w	r2, #4294967295
 80071fe:	f7f9 fc77 	bl	8000af0 <__aeabi_dcmple>
 8007202:	bb48      	cbnz	r0, 8007258 <_printf_float+0xd0>
 8007204:	2200      	movs	r2, #0
 8007206:	2300      	movs	r3, #0
 8007208:	4640      	mov	r0, r8
 800720a:	4649      	mov	r1, r9
 800720c:	f7f9 fc66 	bl	8000adc <__aeabi_dcmplt>
 8007210:	b110      	cbz	r0, 8007218 <_printf_float+0x90>
 8007212:	232d      	movs	r3, #45	; 0x2d
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	4b93      	ldr	r3, [pc, #588]	; (8007468 <_printf_float+0x2e0>)
 800721a:	4894      	ldr	r0, [pc, #592]	; (800746c <_printf_float+0x2e4>)
 800721c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007220:	bf94      	ite	ls
 8007222:	4698      	movls	r8, r3
 8007224:	4680      	movhi	r8, r0
 8007226:	2303      	movs	r3, #3
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	f023 0204 	bic.w	r2, r3, #4
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	f04f 0900 	mov.w	r9, #0
 8007236:	9700      	str	r7, [sp, #0]
 8007238:	4633      	mov	r3, r6
 800723a:	aa0b      	add	r2, sp, #44	; 0x2c
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f9d8 	bl	80075f4 <_printf_common>
 8007244:	3001      	adds	r0, #1
 8007246:	f040 8090 	bne.w	800736a <_printf_float+0x1e2>
 800724a:	f04f 30ff 	mov.w	r0, #4294967295
 800724e:	b00d      	add	sp, #52	; 0x34
 8007250:	ecbd 8b02 	vpop	{d8}
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f9 fc64 	bl	8000b2c <__aeabi_dcmpun>
 8007264:	b140      	cbz	r0, 8007278 <_printf_float+0xf0>
 8007266:	464b      	mov	r3, r9
 8007268:	2b00      	cmp	r3, #0
 800726a:	bfbc      	itt	lt
 800726c:	232d      	movlt	r3, #45	; 0x2d
 800726e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007272:	487f      	ldr	r0, [pc, #508]	; (8007470 <_printf_float+0x2e8>)
 8007274:	4b7f      	ldr	r3, [pc, #508]	; (8007474 <_printf_float+0x2ec>)
 8007276:	e7d1      	b.n	800721c <_printf_float+0x94>
 8007278:	6863      	ldr	r3, [r4, #4]
 800727a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800727e:	9206      	str	r2, [sp, #24]
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	d13f      	bne.n	8007304 <_printf_float+0x17c>
 8007284:	2306      	movs	r3, #6
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	6861      	ldr	r1, [r4, #4]
 800728c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007290:	2300      	movs	r3, #0
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	ab0a      	add	r3, sp, #40	; 0x28
 8007296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800729a:	ab09      	add	r3, sp, #36	; 0x24
 800729c:	ec49 8b10 	vmov	d0, r8, r9
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff fecd 	bl	8007048 <__cvt>
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072b2:	2b47      	cmp	r3, #71	; 0x47
 80072b4:	4680      	mov	r8, r0
 80072b6:	d108      	bne.n	80072ca <_printf_float+0x142>
 80072b8:	1cc8      	adds	r0, r1, #3
 80072ba:	db02      	blt.n	80072c2 <_printf_float+0x13a>
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	4299      	cmp	r1, r3
 80072c0:	dd41      	ble.n	8007346 <_printf_float+0x1be>
 80072c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80072c6:	fa5f fb8b 	uxtb.w	fp, fp
 80072ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072ce:	d820      	bhi.n	8007312 <_printf_float+0x18a>
 80072d0:	3901      	subs	r1, #1
 80072d2:	465a      	mov	r2, fp
 80072d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072d8:	9109      	str	r1, [sp, #36]	; 0x24
 80072da:	f7ff ff17 	bl	800710c <__exponent>
 80072de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072e0:	1813      	adds	r3, r2, r0
 80072e2:	2a01      	cmp	r2, #1
 80072e4:	4681      	mov	r9, r0
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	dc02      	bgt.n	80072f0 <_printf_float+0x168>
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	07d2      	lsls	r2, r2, #31
 80072ee:	d501      	bpl.n	80072f4 <_printf_float+0x16c>
 80072f0:	3301      	adds	r3, #1
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d09c      	beq.n	8007236 <_printf_float+0xae>
 80072fc:	232d      	movs	r3, #45	; 0x2d
 80072fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007302:	e798      	b.n	8007236 <_printf_float+0xae>
 8007304:	9a06      	ldr	r2, [sp, #24]
 8007306:	2a47      	cmp	r2, #71	; 0x47
 8007308:	d1be      	bne.n	8007288 <_printf_float+0x100>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1bc      	bne.n	8007288 <_printf_float+0x100>
 800730e:	2301      	movs	r3, #1
 8007310:	e7b9      	b.n	8007286 <_printf_float+0xfe>
 8007312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007316:	d118      	bne.n	800734a <_printf_float+0x1c2>
 8007318:	2900      	cmp	r1, #0
 800731a:	6863      	ldr	r3, [r4, #4]
 800731c:	dd0b      	ble.n	8007336 <_printf_float+0x1ae>
 800731e:	6121      	str	r1, [r4, #16]
 8007320:	b913      	cbnz	r3, 8007328 <_printf_float+0x1a0>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	07d0      	lsls	r0, r2, #31
 8007326:	d502      	bpl.n	800732e <_printf_float+0x1a6>
 8007328:	3301      	adds	r3, #1
 800732a:	440b      	add	r3, r1
 800732c:	6123      	str	r3, [r4, #16]
 800732e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	e7de      	b.n	80072f4 <_printf_float+0x16c>
 8007336:	b913      	cbnz	r3, 800733e <_printf_float+0x1b6>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	07d2      	lsls	r2, r2, #31
 800733c:	d501      	bpl.n	8007342 <_printf_float+0x1ba>
 800733e:	3302      	adds	r3, #2
 8007340:	e7f4      	b.n	800732c <_printf_float+0x1a4>
 8007342:	2301      	movs	r3, #1
 8007344:	e7f2      	b.n	800732c <_printf_float+0x1a4>
 8007346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800734a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734c:	4299      	cmp	r1, r3
 800734e:	db05      	blt.n	800735c <_printf_float+0x1d4>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	6121      	str	r1, [r4, #16]
 8007354:	07d8      	lsls	r0, r3, #31
 8007356:	d5ea      	bpl.n	800732e <_printf_float+0x1a6>
 8007358:	1c4b      	adds	r3, r1, #1
 800735a:	e7e7      	b.n	800732c <_printf_float+0x1a4>
 800735c:	2900      	cmp	r1, #0
 800735e:	bfd4      	ite	le
 8007360:	f1c1 0202 	rsble	r2, r1, #2
 8007364:	2201      	movgt	r2, #1
 8007366:	4413      	add	r3, r2
 8007368:	e7e0      	b.n	800732c <_printf_float+0x1a4>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	055a      	lsls	r2, r3, #21
 800736e:	d407      	bmi.n	8007380 <_printf_float+0x1f8>
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	4642      	mov	r2, r8
 8007374:	4631      	mov	r1, r6
 8007376:	4628      	mov	r0, r5
 8007378:	47b8      	blx	r7
 800737a:	3001      	adds	r0, #1
 800737c:	d12c      	bne.n	80073d8 <_printf_float+0x250>
 800737e:	e764      	b.n	800724a <_printf_float+0xc2>
 8007380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007384:	f240 80e0 	bls.w	8007548 <_printf_float+0x3c0>
 8007388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	f7f9 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007394:	2800      	cmp	r0, #0
 8007396:	d034      	beq.n	8007402 <_printf_float+0x27a>
 8007398:	4a37      	ldr	r2, [pc, #220]	; (8007478 <_printf_float+0x2f0>)
 800739a:	2301      	movs	r3, #1
 800739c:	4631      	mov	r1, r6
 800739e:	4628      	mov	r0, r5
 80073a0:	47b8      	blx	r7
 80073a2:	3001      	adds	r0, #1
 80073a4:	f43f af51 	beq.w	800724a <_printf_float+0xc2>
 80073a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ac:	429a      	cmp	r2, r3
 80073ae:	db02      	blt.n	80073b6 <_printf_float+0x22e>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	07d8      	lsls	r0, r3, #31
 80073b4:	d510      	bpl.n	80073d8 <_printf_float+0x250>
 80073b6:	ee18 3a10 	vmov	r3, s16
 80073ba:	4652      	mov	r2, sl
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f af41 	beq.w	800724a <_printf_float+0xc2>
 80073c8:	f04f 0800 	mov.w	r8, #0
 80073cc:	f104 091a 	add.w	r9, r4, #26
 80073d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4543      	cmp	r3, r8
 80073d6:	dc09      	bgt.n	80073ec <_printf_float+0x264>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	079b      	lsls	r3, r3, #30
 80073dc:	f100 8105 	bmi.w	80075ea <_printf_float+0x462>
 80073e0:	68e0      	ldr	r0, [r4, #12]
 80073e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e4:	4298      	cmp	r0, r3
 80073e6:	bfb8      	it	lt
 80073e8:	4618      	movlt	r0, r3
 80073ea:	e730      	b.n	800724e <_printf_float+0xc6>
 80073ec:	2301      	movs	r3, #1
 80073ee:	464a      	mov	r2, r9
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af27 	beq.w	800724a <_printf_float+0xc2>
 80073fc:	f108 0801 	add.w	r8, r8, #1
 8007400:	e7e6      	b.n	80073d0 <_printf_float+0x248>
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	dc39      	bgt.n	800747c <_printf_float+0x2f4>
 8007408:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <_printf_float+0x2f0>)
 800740a:	2301      	movs	r3, #1
 800740c:	4631      	mov	r1, r6
 800740e:	4628      	mov	r0, r5
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	f43f af19 	beq.w	800724a <_printf_float+0xc2>
 8007418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800741c:	4313      	orrs	r3, r2
 800741e:	d102      	bne.n	8007426 <_printf_float+0x29e>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	07d9      	lsls	r1, r3, #31
 8007424:	d5d8      	bpl.n	80073d8 <_printf_float+0x250>
 8007426:	ee18 3a10 	vmov	r3, s16
 800742a:	4652      	mov	r2, sl
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	f43f af09 	beq.w	800724a <_printf_float+0xc2>
 8007438:	f04f 0900 	mov.w	r9, #0
 800743c:	f104 0a1a 	add.w	sl, r4, #26
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	425b      	negs	r3, r3
 8007444:	454b      	cmp	r3, r9
 8007446:	dc01      	bgt.n	800744c <_printf_float+0x2c4>
 8007448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744a:	e792      	b.n	8007372 <_printf_float+0x1ea>
 800744c:	2301      	movs	r3, #1
 800744e:	4652      	mov	r2, sl
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f aef7 	beq.w	800724a <_printf_float+0xc2>
 800745c:	f109 0901 	add.w	r9, r9, #1
 8007460:	e7ee      	b.n	8007440 <_printf_float+0x2b8>
 8007462:	bf00      	nop
 8007464:	7fefffff 	.word	0x7fefffff
 8007468:	08009bb0 	.word	0x08009bb0
 800746c:	08009bb4 	.word	0x08009bb4
 8007470:	08009bbc 	.word	0x08009bbc
 8007474:	08009bb8 	.word	0x08009bb8
 8007478:	08009bc0 	.word	0x08009bc0
 800747c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800747e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007480:	429a      	cmp	r2, r3
 8007482:	bfa8      	it	ge
 8007484:	461a      	movge	r2, r3
 8007486:	2a00      	cmp	r2, #0
 8007488:	4691      	mov	r9, r2
 800748a:	dc37      	bgt.n	80074fc <_printf_float+0x374>
 800748c:	f04f 0b00 	mov.w	fp, #0
 8007490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007494:	f104 021a 	add.w	r2, r4, #26
 8007498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800749a:	9305      	str	r3, [sp, #20]
 800749c:	eba3 0309 	sub.w	r3, r3, r9
 80074a0:	455b      	cmp	r3, fp
 80074a2:	dc33      	bgt.n	800750c <_printf_float+0x384>
 80074a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a8:	429a      	cmp	r2, r3
 80074aa:	db3b      	blt.n	8007524 <_printf_float+0x39c>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	07da      	lsls	r2, r3, #31
 80074b0:	d438      	bmi.n	8007524 <_printf_float+0x39c>
 80074b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b4:	9b05      	ldr	r3, [sp, #20]
 80074b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	eba2 0901 	sub.w	r9, r2, r1
 80074be:	4599      	cmp	r9, r3
 80074c0:	bfa8      	it	ge
 80074c2:	4699      	movge	r9, r3
 80074c4:	f1b9 0f00 	cmp.w	r9, #0
 80074c8:	dc35      	bgt.n	8007536 <_printf_float+0x3ae>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074d2:	f104 0a1a 	add.w	sl, r4, #26
 80074d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	eba3 0309 	sub.w	r3, r3, r9
 80074e0:	4543      	cmp	r3, r8
 80074e2:	f77f af79 	ble.w	80073d8 <_printf_float+0x250>
 80074e6:	2301      	movs	r3, #1
 80074e8:	4652      	mov	r2, sl
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	f43f aeaa 	beq.w	800724a <_printf_float+0xc2>
 80074f6:	f108 0801 	add.w	r8, r8, #1
 80074fa:	e7ec      	b.n	80074d6 <_printf_float+0x34e>
 80074fc:	4613      	mov	r3, r2
 80074fe:	4631      	mov	r1, r6
 8007500:	4642      	mov	r2, r8
 8007502:	4628      	mov	r0, r5
 8007504:	47b8      	blx	r7
 8007506:	3001      	adds	r0, #1
 8007508:	d1c0      	bne.n	800748c <_printf_float+0x304>
 800750a:	e69e      	b.n	800724a <_printf_float+0xc2>
 800750c:	2301      	movs	r3, #1
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	9205      	str	r2, [sp, #20]
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f ae97 	beq.w	800724a <_printf_float+0xc2>
 800751c:	9a05      	ldr	r2, [sp, #20]
 800751e:	f10b 0b01 	add.w	fp, fp, #1
 8007522:	e7b9      	b.n	8007498 <_printf_float+0x310>
 8007524:	ee18 3a10 	vmov	r3, s16
 8007528:	4652      	mov	r2, sl
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	d1be      	bne.n	80074b2 <_printf_float+0x32a>
 8007534:	e689      	b.n	800724a <_printf_float+0xc2>
 8007536:	9a05      	ldr	r2, [sp, #20]
 8007538:	464b      	mov	r3, r9
 800753a:	4442      	add	r2, r8
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	d1c1      	bne.n	80074ca <_printf_float+0x342>
 8007546:	e680      	b.n	800724a <_printf_float+0xc2>
 8007548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800754a:	2a01      	cmp	r2, #1
 800754c:	dc01      	bgt.n	8007552 <_printf_float+0x3ca>
 800754e:	07db      	lsls	r3, r3, #31
 8007550:	d538      	bpl.n	80075c4 <_printf_float+0x43c>
 8007552:	2301      	movs	r3, #1
 8007554:	4642      	mov	r2, r8
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	47b8      	blx	r7
 800755c:	3001      	adds	r0, #1
 800755e:	f43f ae74 	beq.w	800724a <_printf_float+0xc2>
 8007562:	ee18 3a10 	vmov	r3, s16
 8007566:	4652      	mov	r2, sl
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f ae6b 	beq.w	800724a <_printf_float+0xc2>
 8007574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007578:	2200      	movs	r2, #0
 800757a:	2300      	movs	r3, #0
 800757c:	f7f9 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007580:	b9d8      	cbnz	r0, 80075ba <_printf_float+0x432>
 8007582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007584:	f108 0201 	add.w	r2, r8, #1
 8007588:	3b01      	subs	r3, #1
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	d10e      	bne.n	80075b2 <_printf_float+0x42a>
 8007594:	e659      	b.n	800724a <_printf_float+0xc2>
 8007596:	2301      	movs	r3, #1
 8007598:	4652      	mov	r2, sl
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f ae52 	beq.w	800724a <_printf_float+0xc2>
 80075a6:	f108 0801 	add.w	r8, r8, #1
 80075aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4543      	cmp	r3, r8
 80075b0:	dcf1      	bgt.n	8007596 <_printf_float+0x40e>
 80075b2:	464b      	mov	r3, r9
 80075b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075b8:	e6dc      	b.n	8007374 <_printf_float+0x1ec>
 80075ba:	f04f 0800 	mov.w	r8, #0
 80075be:	f104 0a1a 	add.w	sl, r4, #26
 80075c2:	e7f2      	b.n	80075aa <_printf_float+0x422>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4642      	mov	r2, r8
 80075c8:	e7df      	b.n	800758a <_printf_float+0x402>
 80075ca:	2301      	movs	r3, #1
 80075cc:	464a      	mov	r2, r9
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f ae38 	beq.w	800724a <_printf_float+0xc2>
 80075da:	f108 0801 	add.w	r8, r8, #1
 80075de:	68e3      	ldr	r3, [r4, #12]
 80075e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075e2:	1a5b      	subs	r3, r3, r1
 80075e4:	4543      	cmp	r3, r8
 80075e6:	dcf0      	bgt.n	80075ca <_printf_float+0x442>
 80075e8:	e6fa      	b.n	80073e0 <_printf_float+0x258>
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	f104 0919 	add.w	r9, r4, #25
 80075f2:	e7f4      	b.n	80075de <_printf_float+0x456>

080075f4 <_printf_common>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	4616      	mov	r6, r2
 80075fa:	4699      	mov	r9, r3
 80075fc:	688a      	ldr	r2, [r1, #8]
 80075fe:	690b      	ldr	r3, [r1, #16]
 8007600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007604:	4293      	cmp	r3, r2
 8007606:	bfb8      	it	lt
 8007608:	4613      	movlt	r3, r2
 800760a:	6033      	str	r3, [r6, #0]
 800760c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007610:	4607      	mov	r7, r0
 8007612:	460c      	mov	r4, r1
 8007614:	b10a      	cbz	r2, 800761a <_printf_common+0x26>
 8007616:	3301      	adds	r3, #1
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	0699      	lsls	r1, r3, #26
 800761e:	bf42      	ittt	mi
 8007620:	6833      	ldrmi	r3, [r6, #0]
 8007622:	3302      	addmi	r3, #2
 8007624:	6033      	strmi	r3, [r6, #0]
 8007626:	6825      	ldr	r5, [r4, #0]
 8007628:	f015 0506 	ands.w	r5, r5, #6
 800762c:	d106      	bne.n	800763c <_printf_common+0x48>
 800762e:	f104 0a19 	add.w	sl, r4, #25
 8007632:	68e3      	ldr	r3, [r4, #12]
 8007634:	6832      	ldr	r2, [r6, #0]
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	42ab      	cmp	r3, r5
 800763a:	dc26      	bgt.n	800768a <_printf_common+0x96>
 800763c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007640:	1e13      	subs	r3, r2, #0
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	bf18      	it	ne
 8007646:	2301      	movne	r3, #1
 8007648:	0692      	lsls	r2, r2, #26
 800764a:	d42b      	bmi.n	80076a4 <_printf_common+0xb0>
 800764c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007650:	4649      	mov	r1, r9
 8007652:	4638      	mov	r0, r7
 8007654:	47c0      	blx	r8
 8007656:	3001      	adds	r0, #1
 8007658:	d01e      	beq.n	8007698 <_printf_common+0xa4>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	68e5      	ldr	r5, [r4, #12]
 800765e:	6832      	ldr	r2, [r6, #0]
 8007660:	f003 0306 	and.w	r3, r3, #6
 8007664:	2b04      	cmp	r3, #4
 8007666:	bf08      	it	eq
 8007668:	1aad      	subeq	r5, r5, r2
 800766a:	68a3      	ldr	r3, [r4, #8]
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	bf0c      	ite	eq
 8007670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007674:	2500      	movne	r5, #0
 8007676:	4293      	cmp	r3, r2
 8007678:	bfc4      	itt	gt
 800767a:	1a9b      	subgt	r3, r3, r2
 800767c:	18ed      	addgt	r5, r5, r3
 800767e:	2600      	movs	r6, #0
 8007680:	341a      	adds	r4, #26
 8007682:	42b5      	cmp	r5, r6
 8007684:	d11a      	bne.n	80076bc <_printf_common+0xc8>
 8007686:	2000      	movs	r0, #0
 8007688:	e008      	b.n	800769c <_printf_common+0xa8>
 800768a:	2301      	movs	r3, #1
 800768c:	4652      	mov	r2, sl
 800768e:	4649      	mov	r1, r9
 8007690:	4638      	mov	r0, r7
 8007692:	47c0      	blx	r8
 8007694:	3001      	adds	r0, #1
 8007696:	d103      	bne.n	80076a0 <_printf_common+0xac>
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a0:	3501      	adds	r5, #1
 80076a2:	e7c6      	b.n	8007632 <_printf_common+0x3e>
 80076a4:	18e1      	adds	r1, r4, r3
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	2030      	movs	r0, #48	; 0x30
 80076aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ae:	4422      	add	r2, r4
 80076b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076b8:	3302      	adds	r3, #2
 80076ba:	e7c7      	b.n	800764c <_printf_common+0x58>
 80076bc:	2301      	movs	r3, #1
 80076be:	4622      	mov	r2, r4
 80076c0:	4649      	mov	r1, r9
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c0      	blx	r8
 80076c6:	3001      	adds	r0, #1
 80076c8:	d0e6      	beq.n	8007698 <_printf_common+0xa4>
 80076ca:	3601      	adds	r6, #1
 80076cc:	e7d9      	b.n	8007682 <_printf_common+0x8e>
	...

080076d0 <_printf_i>:
 80076d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	460c      	mov	r4, r1
 80076d6:	4691      	mov	r9, r2
 80076d8:	7e27      	ldrb	r7, [r4, #24]
 80076da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076dc:	2f78      	cmp	r7, #120	; 0x78
 80076de:	4680      	mov	r8, r0
 80076e0:	469a      	mov	sl, r3
 80076e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076e6:	d807      	bhi.n	80076f8 <_printf_i+0x28>
 80076e8:	2f62      	cmp	r7, #98	; 0x62
 80076ea:	d80a      	bhi.n	8007702 <_printf_i+0x32>
 80076ec:	2f00      	cmp	r7, #0
 80076ee:	f000 80d8 	beq.w	80078a2 <_printf_i+0x1d2>
 80076f2:	2f58      	cmp	r7, #88	; 0x58
 80076f4:	f000 80a3 	beq.w	800783e <_printf_i+0x16e>
 80076f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007700:	e03a      	b.n	8007778 <_printf_i+0xa8>
 8007702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007706:	2b15      	cmp	r3, #21
 8007708:	d8f6      	bhi.n	80076f8 <_printf_i+0x28>
 800770a:	a001      	add	r0, pc, #4	; (adr r0, 8007710 <_printf_i+0x40>)
 800770c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007710:	08007769 	.word	0x08007769
 8007714:	0800777d 	.word	0x0800777d
 8007718:	080076f9 	.word	0x080076f9
 800771c:	080076f9 	.word	0x080076f9
 8007720:	080076f9 	.word	0x080076f9
 8007724:	080076f9 	.word	0x080076f9
 8007728:	0800777d 	.word	0x0800777d
 800772c:	080076f9 	.word	0x080076f9
 8007730:	080076f9 	.word	0x080076f9
 8007734:	080076f9 	.word	0x080076f9
 8007738:	080076f9 	.word	0x080076f9
 800773c:	08007889 	.word	0x08007889
 8007740:	080077ad 	.word	0x080077ad
 8007744:	0800786b 	.word	0x0800786b
 8007748:	080076f9 	.word	0x080076f9
 800774c:	080076f9 	.word	0x080076f9
 8007750:	080078ab 	.word	0x080078ab
 8007754:	080076f9 	.word	0x080076f9
 8007758:	080077ad 	.word	0x080077ad
 800775c:	080076f9 	.word	0x080076f9
 8007760:	080076f9 	.word	0x080076f9
 8007764:	08007873 	.word	0x08007873
 8007768:	680b      	ldr	r3, [r1, #0]
 800776a:	1d1a      	adds	r2, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	600a      	str	r2, [r1, #0]
 8007770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007778:	2301      	movs	r3, #1
 800777a:	e0a3      	b.n	80078c4 <_printf_i+0x1f4>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	6808      	ldr	r0, [r1, #0]
 8007780:	062e      	lsls	r6, r5, #24
 8007782:	f100 0304 	add.w	r3, r0, #4
 8007786:	d50a      	bpl.n	800779e <_printf_i+0xce>
 8007788:	6805      	ldr	r5, [r0, #0]
 800778a:	600b      	str	r3, [r1, #0]
 800778c:	2d00      	cmp	r5, #0
 800778e:	da03      	bge.n	8007798 <_printf_i+0xc8>
 8007790:	232d      	movs	r3, #45	; 0x2d
 8007792:	426d      	negs	r5, r5
 8007794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007798:	485e      	ldr	r0, [pc, #376]	; (8007914 <_printf_i+0x244>)
 800779a:	230a      	movs	r3, #10
 800779c:	e019      	b.n	80077d2 <_printf_i+0x102>
 800779e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077a2:	6805      	ldr	r5, [r0, #0]
 80077a4:	600b      	str	r3, [r1, #0]
 80077a6:	bf18      	it	ne
 80077a8:	b22d      	sxthne	r5, r5
 80077aa:	e7ef      	b.n	800778c <_printf_i+0xbc>
 80077ac:	680b      	ldr	r3, [r1, #0]
 80077ae:	6825      	ldr	r5, [r4, #0]
 80077b0:	1d18      	adds	r0, r3, #4
 80077b2:	6008      	str	r0, [r1, #0]
 80077b4:	0628      	lsls	r0, r5, #24
 80077b6:	d501      	bpl.n	80077bc <_printf_i+0xec>
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	e002      	b.n	80077c2 <_printf_i+0xf2>
 80077bc:	0669      	lsls	r1, r5, #25
 80077be:	d5fb      	bpl.n	80077b8 <_printf_i+0xe8>
 80077c0:	881d      	ldrh	r5, [r3, #0]
 80077c2:	4854      	ldr	r0, [pc, #336]	; (8007914 <_printf_i+0x244>)
 80077c4:	2f6f      	cmp	r7, #111	; 0x6f
 80077c6:	bf0c      	ite	eq
 80077c8:	2308      	moveq	r3, #8
 80077ca:	230a      	movne	r3, #10
 80077cc:	2100      	movs	r1, #0
 80077ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077d2:	6866      	ldr	r6, [r4, #4]
 80077d4:	60a6      	str	r6, [r4, #8]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	bfa2      	ittt	ge
 80077da:	6821      	ldrge	r1, [r4, #0]
 80077dc:	f021 0104 	bicge.w	r1, r1, #4
 80077e0:	6021      	strge	r1, [r4, #0]
 80077e2:	b90d      	cbnz	r5, 80077e8 <_printf_i+0x118>
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	d04d      	beq.n	8007884 <_printf_i+0x1b4>
 80077e8:	4616      	mov	r6, r2
 80077ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80077ee:	fb03 5711 	mls	r7, r3, r1, r5
 80077f2:	5dc7      	ldrb	r7, [r0, r7]
 80077f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f8:	462f      	mov	r7, r5
 80077fa:	42bb      	cmp	r3, r7
 80077fc:	460d      	mov	r5, r1
 80077fe:	d9f4      	bls.n	80077ea <_printf_i+0x11a>
 8007800:	2b08      	cmp	r3, #8
 8007802:	d10b      	bne.n	800781c <_printf_i+0x14c>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07df      	lsls	r7, r3, #31
 8007808:	d508      	bpl.n	800781c <_printf_i+0x14c>
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	6861      	ldr	r1, [r4, #4]
 800780e:	4299      	cmp	r1, r3
 8007810:	bfde      	ittt	le
 8007812:	2330      	movle	r3, #48	; 0x30
 8007814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800781c:	1b92      	subs	r2, r2, r6
 800781e:	6122      	str	r2, [r4, #16]
 8007820:	f8cd a000 	str.w	sl, [sp]
 8007824:	464b      	mov	r3, r9
 8007826:	aa03      	add	r2, sp, #12
 8007828:	4621      	mov	r1, r4
 800782a:	4640      	mov	r0, r8
 800782c:	f7ff fee2 	bl	80075f4 <_printf_common>
 8007830:	3001      	adds	r0, #1
 8007832:	d14c      	bne.n	80078ce <_printf_i+0x1fe>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	b004      	add	sp, #16
 800783a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783e:	4835      	ldr	r0, [pc, #212]	; (8007914 <_printf_i+0x244>)
 8007840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	680e      	ldr	r6, [r1, #0]
 8007848:	061f      	lsls	r7, r3, #24
 800784a:	f856 5b04 	ldr.w	r5, [r6], #4
 800784e:	600e      	str	r6, [r1, #0]
 8007850:	d514      	bpl.n	800787c <_printf_i+0x1ac>
 8007852:	07d9      	lsls	r1, r3, #31
 8007854:	bf44      	itt	mi
 8007856:	f043 0320 	orrmi.w	r3, r3, #32
 800785a:	6023      	strmi	r3, [r4, #0]
 800785c:	b91d      	cbnz	r5, 8007866 <_printf_i+0x196>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f023 0320 	bic.w	r3, r3, #32
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	2310      	movs	r3, #16
 8007868:	e7b0      	b.n	80077cc <_printf_i+0xfc>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	f043 0320 	orr.w	r3, r3, #32
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	2378      	movs	r3, #120	; 0x78
 8007874:	4828      	ldr	r0, [pc, #160]	; (8007918 <_printf_i+0x248>)
 8007876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800787a:	e7e3      	b.n	8007844 <_printf_i+0x174>
 800787c:	065e      	lsls	r6, r3, #25
 800787e:	bf48      	it	mi
 8007880:	b2ad      	uxthmi	r5, r5
 8007882:	e7e6      	b.n	8007852 <_printf_i+0x182>
 8007884:	4616      	mov	r6, r2
 8007886:	e7bb      	b.n	8007800 <_printf_i+0x130>
 8007888:	680b      	ldr	r3, [r1, #0]
 800788a:	6826      	ldr	r6, [r4, #0]
 800788c:	6960      	ldr	r0, [r4, #20]
 800788e:	1d1d      	adds	r5, r3, #4
 8007890:	600d      	str	r5, [r1, #0]
 8007892:	0635      	lsls	r5, r6, #24
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	d501      	bpl.n	800789c <_printf_i+0x1cc>
 8007898:	6018      	str	r0, [r3, #0]
 800789a:	e002      	b.n	80078a2 <_printf_i+0x1d2>
 800789c:	0671      	lsls	r1, r6, #25
 800789e:	d5fb      	bpl.n	8007898 <_printf_i+0x1c8>
 80078a0:	8018      	strh	r0, [r3, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	4616      	mov	r6, r2
 80078a8:	e7ba      	b.n	8007820 <_printf_i+0x150>
 80078aa:	680b      	ldr	r3, [r1, #0]
 80078ac:	1d1a      	adds	r2, r3, #4
 80078ae:	600a      	str	r2, [r1, #0]
 80078b0:	681e      	ldr	r6, [r3, #0]
 80078b2:	6862      	ldr	r2, [r4, #4]
 80078b4:	2100      	movs	r1, #0
 80078b6:	4630      	mov	r0, r6
 80078b8:	f7f8 fc92 	bl	80001e0 <memchr>
 80078bc:	b108      	cbz	r0, 80078c2 <_printf_i+0x1f2>
 80078be:	1b80      	subs	r0, r0, r6
 80078c0:	6060      	str	r0, [r4, #4]
 80078c2:	6863      	ldr	r3, [r4, #4]
 80078c4:	6123      	str	r3, [r4, #16]
 80078c6:	2300      	movs	r3, #0
 80078c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078cc:	e7a8      	b.n	8007820 <_printf_i+0x150>
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	4632      	mov	r2, r6
 80078d2:	4649      	mov	r1, r9
 80078d4:	4640      	mov	r0, r8
 80078d6:	47d0      	blx	sl
 80078d8:	3001      	adds	r0, #1
 80078da:	d0ab      	beq.n	8007834 <_printf_i+0x164>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	079b      	lsls	r3, r3, #30
 80078e0:	d413      	bmi.n	800790a <_printf_i+0x23a>
 80078e2:	68e0      	ldr	r0, [r4, #12]
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	4298      	cmp	r0, r3
 80078e8:	bfb8      	it	lt
 80078ea:	4618      	movlt	r0, r3
 80078ec:	e7a4      	b.n	8007838 <_printf_i+0x168>
 80078ee:	2301      	movs	r3, #1
 80078f0:	4632      	mov	r2, r6
 80078f2:	4649      	mov	r1, r9
 80078f4:	4640      	mov	r0, r8
 80078f6:	47d0      	blx	sl
 80078f8:	3001      	adds	r0, #1
 80078fa:	d09b      	beq.n	8007834 <_printf_i+0x164>
 80078fc:	3501      	adds	r5, #1
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	9903      	ldr	r1, [sp, #12]
 8007902:	1a5b      	subs	r3, r3, r1
 8007904:	42ab      	cmp	r3, r5
 8007906:	dcf2      	bgt.n	80078ee <_printf_i+0x21e>
 8007908:	e7eb      	b.n	80078e2 <_printf_i+0x212>
 800790a:	2500      	movs	r5, #0
 800790c:	f104 0619 	add.w	r6, r4, #25
 8007910:	e7f5      	b.n	80078fe <_printf_i+0x22e>
 8007912:	bf00      	nop
 8007914:	08009bc2 	.word	0x08009bc2
 8007918:	08009bd3 	.word	0x08009bd3

0800791c <iprintf>:
 800791c:	b40f      	push	{r0, r1, r2, r3}
 800791e:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <iprintf+0x2c>)
 8007920:	b513      	push	{r0, r1, r4, lr}
 8007922:	681c      	ldr	r4, [r3, #0]
 8007924:	b124      	cbz	r4, 8007930 <iprintf+0x14>
 8007926:	69a3      	ldr	r3, [r4, #24]
 8007928:	b913      	cbnz	r3, 8007930 <iprintf+0x14>
 800792a:	4620      	mov	r0, r4
 800792c:	f001 f8d6 	bl	8008adc <__sinit>
 8007930:	ab05      	add	r3, sp, #20
 8007932:	9a04      	ldr	r2, [sp, #16]
 8007934:	68a1      	ldr	r1, [r4, #8]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	4620      	mov	r0, r4
 800793a:	f001 fe51 	bl	80095e0 <_vfiprintf_r>
 800793e:	b002      	add	sp, #8
 8007940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007944:	b004      	add	sp, #16
 8007946:	4770      	bx	lr
 8007948:	2000000c 	.word	0x2000000c

0800794c <_puts_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	460e      	mov	r6, r1
 8007950:	4605      	mov	r5, r0
 8007952:	b118      	cbz	r0, 800795c <_puts_r+0x10>
 8007954:	6983      	ldr	r3, [r0, #24]
 8007956:	b90b      	cbnz	r3, 800795c <_puts_r+0x10>
 8007958:	f001 f8c0 	bl	8008adc <__sinit>
 800795c:	69ab      	ldr	r3, [r5, #24]
 800795e:	68ac      	ldr	r4, [r5, #8]
 8007960:	b913      	cbnz	r3, 8007968 <_puts_r+0x1c>
 8007962:	4628      	mov	r0, r5
 8007964:	f001 f8ba 	bl	8008adc <__sinit>
 8007968:	4b2c      	ldr	r3, [pc, #176]	; (8007a1c <_puts_r+0xd0>)
 800796a:	429c      	cmp	r4, r3
 800796c:	d120      	bne.n	80079b0 <_puts_r+0x64>
 800796e:	686c      	ldr	r4, [r5, #4]
 8007970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d405      	bmi.n	8007982 <_puts_r+0x36>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	0598      	lsls	r0, r3, #22
 800797a:	d402      	bmi.n	8007982 <_puts_r+0x36>
 800797c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800797e:	f001 f950 	bl	8008c22 <__retarget_lock_acquire_recursive>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	0719      	lsls	r1, r3, #28
 8007986:	d51d      	bpl.n	80079c4 <_puts_r+0x78>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b1db      	cbz	r3, 80079c4 <_puts_r+0x78>
 800798c:	3e01      	subs	r6, #1
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007994:	3b01      	subs	r3, #1
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	bb39      	cbnz	r1, 80079ea <_puts_r+0x9e>
 800799a:	2b00      	cmp	r3, #0
 800799c:	da38      	bge.n	8007a10 <_puts_r+0xc4>
 800799e:	4622      	mov	r2, r4
 80079a0:	210a      	movs	r1, #10
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f848 	bl	8007a38 <__swbuf_r>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d011      	beq.n	80079d0 <_puts_r+0x84>
 80079ac:	250a      	movs	r5, #10
 80079ae:	e011      	b.n	80079d4 <_puts_r+0x88>
 80079b0:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <_puts_r+0xd4>)
 80079b2:	429c      	cmp	r4, r3
 80079b4:	d101      	bne.n	80079ba <_puts_r+0x6e>
 80079b6:	68ac      	ldr	r4, [r5, #8]
 80079b8:	e7da      	b.n	8007970 <_puts_r+0x24>
 80079ba:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <_puts_r+0xd8>)
 80079bc:	429c      	cmp	r4, r3
 80079be:	bf08      	it	eq
 80079c0:	68ec      	ldreq	r4, [r5, #12]
 80079c2:	e7d5      	b.n	8007970 <_puts_r+0x24>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 f888 	bl	8007adc <__swsetup_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d0dd      	beq.n	800798c <_puts_r+0x40>
 80079d0:	f04f 35ff 	mov.w	r5, #4294967295
 80079d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d6:	07da      	lsls	r2, r3, #31
 80079d8:	d405      	bmi.n	80079e6 <_puts_r+0x9a>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	059b      	lsls	r3, r3, #22
 80079de:	d402      	bmi.n	80079e6 <_puts_r+0x9a>
 80079e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e2:	f001 f91f 	bl	8008c24 <__retarget_lock_release_recursive>
 80079e6:	4628      	mov	r0, r5
 80079e8:	bd70      	pop	{r4, r5, r6, pc}
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	da04      	bge.n	80079f8 <_puts_r+0xac>
 80079ee:	69a2      	ldr	r2, [r4, #24]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	dc06      	bgt.n	8007a02 <_puts_r+0xb6>
 80079f4:	290a      	cmp	r1, #10
 80079f6:	d004      	beq.n	8007a02 <_puts_r+0xb6>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	6022      	str	r2, [r4, #0]
 80079fe:	7019      	strb	r1, [r3, #0]
 8007a00:	e7c5      	b.n	800798e <_puts_r+0x42>
 8007a02:	4622      	mov	r2, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f817 	bl	8007a38 <__swbuf_r>
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d1bf      	bne.n	800798e <_puts_r+0x42>
 8007a0e:	e7df      	b.n	80079d0 <_puts_r+0x84>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	250a      	movs	r5, #10
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	701d      	strb	r5, [r3, #0]
 8007a1a:	e7db      	b.n	80079d4 <_puts_r+0x88>
 8007a1c:	08009c98 	.word	0x08009c98
 8007a20:	08009cb8 	.word	0x08009cb8
 8007a24:	08009c78 	.word	0x08009c78

08007a28 <puts>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <puts+0xc>)
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	f7ff bf8d 	b.w	800794c <_puts_r>
 8007a32:	bf00      	nop
 8007a34:	2000000c 	.word	0x2000000c

08007a38 <__swbuf_r>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b118      	cbz	r0, 8007a4a <__swbuf_r+0x12>
 8007a42:	6983      	ldr	r3, [r0, #24]
 8007a44:	b90b      	cbnz	r3, 8007a4a <__swbuf_r+0x12>
 8007a46:	f001 f849 	bl	8008adc <__sinit>
 8007a4a:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <__swbuf_r+0x98>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d12b      	bne.n	8007aa8 <__swbuf_r+0x70>
 8007a50:	686c      	ldr	r4, [r5, #4]
 8007a52:	69a3      	ldr	r3, [r4, #24]
 8007a54:	60a3      	str	r3, [r4, #8]
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	071a      	lsls	r2, r3, #28
 8007a5a:	d52f      	bpl.n	8007abc <__swbuf_r+0x84>
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	b36b      	cbz	r3, 8007abc <__swbuf_r+0x84>
 8007a60:	6923      	ldr	r3, [r4, #16]
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	1ac0      	subs	r0, r0, r3
 8007a66:	6963      	ldr	r3, [r4, #20]
 8007a68:	b2f6      	uxtb	r6, r6
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	4637      	mov	r7, r6
 8007a6e:	dc04      	bgt.n	8007a7a <__swbuf_r+0x42>
 8007a70:	4621      	mov	r1, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 ff9e 	bl	80089b4 <_fflush_r>
 8007a78:	bb30      	cbnz	r0, 8007ac8 <__swbuf_r+0x90>
 8007a7a:	68a3      	ldr	r3, [r4, #8]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	60a3      	str	r3, [r4, #8]
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	6022      	str	r2, [r4, #0]
 8007a86:	701e      	strb	r6, [r3, #0]
 8007a88:	6963      	ldr	r3, [r4, #20]
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	4283      	cmp	r3, r0
 8007a8e:	d004      	beq.n	8007a9a <__swbuf_r+0x62>
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	07db      	lsls	r3, r3, #31
 8007a94:	d506      	bpl.n	8007aa4 <__swbuf_r+0x6c>
 8007a96:	2e0a      	cmp	r6, #10
 8007a98:	d104      	bne.n	8007aa4 <__swbuf_r+0x6c>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f000 ff89 	bl	80089b4 <_fflush_r>
 8007aa2:	b988      	cbnz	r0, 8007ac8 <__swbuf_r+0x90>
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <__swbuf_r+0x9c>)
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	d101      	bne.n	8007ab2 <__swbuf_r+0x7a>
 8007aae:	68ac      	ldr	r4, [r5, #8]
 8007ab0:	e7cf      	b.n	8007a52 <__swbuf_r+0x1a>
 8007ab2:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <__swbuf_r+0xa0>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	bf08      	it	eq
 8007ab8:	68ec      	ldreq	r4, [r5, #12]
 8007aba:	e7ca      	b.n	8007a52 <__swbuf_r+0x1a>
 8007abc:	4621      	mov	r1, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f80c 	bl	8007adc <__swsetup_r>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d0cb      	beq.n	8007a60 <__swbuf_r+0x28>
 8007ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8007acc:	e7ea      	b.n	8007aa4 <__swbuf_r+0x6c>
 8007ace:	bf00      	nop
 8007ad0:	08009c98 	.word	0x08009c98
 8007ad4:	08009cb8 	.word	0x08009cb8
 8007ad8:	08009c78 	.word	0x08009c78

08007adc <__swsetup_r>:
 8007adc:	4b32      	ldr	r3, [pc, #200]	; (8007ba8 <__swsetup_r+0xcc>)
 8007ade:	b570      	push	{r4, r5, r6, lr}
 8007ae0:	681d      	ldr	r5, [r3, #0]
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	b125      	cbz	r5, 8007af2 <__swsetup_r+0x16>
 8007ae8:	69ab      	ldr	r3, [r5, #24]
 8007aea:	b913      	cbnz	r3, 8007af2 <__swsetup_r+0x16>
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 fff5 	bl	8008adc <__sinit>
 8007af2:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <__swsetup_r+0xd0>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d10f      	bne.n	8007b18 <__swsetup_r+0x3c>
 8007af8:	686c      	ldr	r4, [r5, #4]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b00:	0719      	lsls	r1, r3, #28
 8007b02:	d42c      	bmi.n	8007b5e <__swsetup_r+0x82>
 8007b04:	06dd      	lsls	r5, r3, #27
 8007b06:	d411      	bmi.n	8007b2c <__swsetup_r+0x50>
 8007b08:	2309      	movs	r3, #9
 8007b0a:	6033      	str	r3, [r6, #0]
 8007b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	e03e      	b.n	8007b96 <__swsetup_r+0xba>
 8007b18:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <__swsetup_r+0xd4>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d101      	bne.n	8007b22 <__swsetup_r+0x46>
 8007b1e:	68ac      	ldr	r4, [r5, #8]
 8007b20:	e7eb      	b.n	8007afa <__swsetup_r+0x1e>
 8007b22:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <__swsetup_r+0xd8>)
 8007b24:	429c      	cmp	r4, r3
 8007b26:	bf08      	it	eq
 8007b28:	68ec      	ldreq	r4, [r5, #12]
 8007b2a:	e7e6      	b.n	8007afa <__swsetup_r+0x1e>
 8007b2c:	0758      	lsls	r0, r3, #29
 8007b2e:	d512      	bpl.n	8007b56 <__swsetup_r+0x7a>
 8007b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b32:	b141      	cbz	r1, 8007b46 <__swsetup_r+0x6a>
 8007b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <__swsetup_r+0x66>
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f001 fc7b 	bl	8009438 <_free_r>
 8007b42:	2300      	movs	r3, #0
 8007b44:	6363      	str	r3, [r4, #52]	; 0x34
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f043 0308 	orr.w	r3, r3, #8
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	b94b      	cbnz	r3, 8007b76 <__swsetup_r+0x9a>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b6c:	d003      	beq.n	8007b76 <__swsetup_r+0x9a>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4630      	mov	r0, r6
 8007b72:	f001 f87d 	bl	8008c70 <__smakebuf_r>
 8007b76:	89a0      	ldrh	r0, [r4, #12]
 8007b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b7c:	f010 0301 	ands.w	r3, r0, #1
 8007b80:	d00a      	beq.n	8007b98 <__swsetup_r+0xbc>
 8007b82:	2300      	movs	r3, #0
 8007b84:	60a3      	str	r3, [r4, #8]
 8007b86:	6963      	ldr	r3, [r4, #20]
 8007b88:	425b      	negs	r3, r3
 8007b8a:	61a3      	str	r3, [r4, #24]
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	b943      	cbnz	r3, 8007ba2 <__swsetup_r+0xc6>
 8007b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b94:	d1ba      	bne.n	8007b0c <__swsetup_r+0x30>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	0781      	lsls	r1, r0, #30
 8007b9a:	bf58      	it	pl
 8007b9c:	6963      	ldrpl	r3, [r4, #20]
 8007b9e:	60a3      	str	r3, [r4, #8]
 8007ba0:	e7f4      	b.n	8007b8c <__swsetup_r+0xb0>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e7f7      	b.n	8007b96 <__swsetup_r+0xba>
 8007ba6:	bf00      	nop
 8007ba8:	2000000c 	.word	0x2000000c
 8007bac:	08009c98 	.word	0x08009c98
 8007bb0:	08009cb8 	.word	0x08009cb8
 8007bb4:	08009c78 	.word	0x08009c78

08007bb8 <quorem>:
 8007bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	6903      	ldr	r3, [r0, #16]
 8007bbe:	690c      	ldr	r4, [r1, #16]
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	4607      	mov	r7, r0
 8007bc4:	f2c0 8081 	blt.w	8007cca <quorem+0x112>
 8007bc8:	3c01      	subs	r4, #1
 8007bca:	f101 0814 	add.w	r8, r1, #20
 8007bce:	f100 0514 	add.w	r5, r0, #20
 8007bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007be0:	3301      	adds	r3, #1
 8007be2:	429a      	cmp	r2, r3
 8007be4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007be8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bec:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bf0:	d331      	bcc.n	8007c56 <quorem+0x9e>
 8007bf2:	f04f 0e00 	mov.w	lr, #0
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	46ac      	mov	ip, r5
 8007bfa:	46f2      	mov	sl, lr
 8007bfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c00:	b293      	uxth	r3, r2
 8007c02:	fb06 e303 	mla	r3, r6, r3, lr
 8007c06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c10:	0c12      	lsrs	r2, r2, #16
 8007c12:	f8dc a000 	ldr.w	sl, [ip]
 8007c16:	fb06 e202 	mla	r2, r6, r2, lr
 8007c1a:	fa13 f38a 	uxtah	r3, r3, sl
 8007c1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c22:	fa1f fa82 	uxth.w	sl, r2
 8007c26:	f8dc 2000 	ldr.w	r2, [ip]
 8007c2a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c38:	4581      	cmp	r9, r0
 8007c3a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c42:	d2db      	bcs.n	8007bfc <quorem+0x44>
 8007c44:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c48:	b92b      	cbnz	r3, 8007c56 <quorem+0x9e>
 8007c4a:	9b01      	ldr	r3, [sp, #4]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	d32e      	bcc.n	8007cb2 <quorem+0xfa>
 8007c54:	613c      	str	r4, [r7, #16]
 8007c56:	4638      	mov	r0, r7
 8007c58:	f001 fade 	bl	8009218 <__mcmp>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	db24      	blt.n	8007caa <quorem+0xf2>
 8007c60:	3601      	adds	r6, #1
 8007c62:	4628      	mov	r0, r5
 8007c64:	f04f 0c00 	mov.w	ip, #0
 8007c68:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c6c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c70:	b293      	uxth	r3, r2
 8007c72:	ebac 0303 	sub.w	r3, ip, r3
 8007c76:	0c12      	lsrs	r2, r2, #16
 8007c78:	fa13 f38e 	uxtah	r3, r3, lr
 8007c7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c8a:	45c1      	cmp	r9, r8
 8007c8c:	f840 3b04 	str.w	r3, [r0], #4
 8007c90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c94:	d2e8      	bcs.n	8007c68 <quorem+0xb0>
 8007c96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c9e:	b922      	cbnz	r2, 8007caa <quorem+0xf2>
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	429d      	cmp	r5, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	d30a      	bcc.n	8007cbe <quorem+0x106>
 8007ca8:	613c      	str	r4, [r7, #16]
 8007caa:	4630      	mov	r0, r6
 8007cac:	b003      	add	sp, #12
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d1cc      	bne.n	8007c54 <quorem+0x9c>
 8007cba:	3c01      	subs	r4, #1
 8007cbc:	e7c7      	b.n	8007c4e <quorem+0x96>
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	3b04      	subs	r3, #4
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <quorem+0xf0>
 8007cc6:	3c01      	subs	r4, #1
 8007cc8:	e7eb      	b.n	8007ca2 <quorem+0xea>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e7ee      	b.n	8007cac <quorem+0xf4>
	...

08007cd0 <_dtoa_r>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	ed2d 8b02 	vpush	{d8}
 8007cd8:	ec57 6b10 	vmov	r6, r7, d0
 8007cdc:	b095      	sub	sp, #84	; 0x54
 8007cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ce0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ce4:	9105      	str	r1, [sp, #20]
 8007ce6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007cea:	4604      	mov	r4, r0
 8007cec:	9209      	str	r2, [sp, #36]	; 0x24
 8007cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf0:	b975      	cbnz	r5, 8007d10 <_dtoa_r+0x40>
 8007cf2:	2010      	movs	r0, #16
 8007cf4:	f000 fffc 	bl	8008cf0 <malloc>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6260      	str	r0, [r4, #36]	; 0x24
 8007cfc:	b920      	cbnz	r0, 8007d08 <_dtoa_r+0x38>
 8007cfe:	4bb2      	ldr	r3, [pc, #712]	; (8007fc8 <_dtoa_r+0x2f8>)
 8007d00:	21ea      	movs	r1, #234	; 0xea
 8007d02:	48b2      	ldr	r0, [pc, #712]	; (8007fcc <_dtoa_r+0x2fc>)
 8007d04:	f001 fe02 	bl	800990c <__assert_func>
 8007d08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d0c:	6005      	str	r5, [r0, #0]
 8007d0e:	60c5      	str	r5, [r0, #12]
 8007d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	b151      	cbz	r1, 8007d2c <_dtoa_r+0x5c>
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	604a      	str	r2, [r1, #4]
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4093      	lsls	r3, r2
 8007d1e:	608b      	str	r3, [r1, #8]
 8007d20:	4620      	mov	r0, r4
 8007d22:	f001 f83b 	bl	8008d9c <_Bfree>
 8007d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	1e3b      	subs	r3, r7, #0
 8007d2e:	bfb9      	ittee	lt
 8007d30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d34:	9303      	strlt	r3, [sp, #12]
 8007d36:	2300      	movge	r3, #0
 8007d38:	f8c8 3000 	strge.w	r3, [r8]
 8007d3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d40:	4ba3      	ldr	r3, [pc, #652]	; (8007fd0 <_dtoa_r+0x300>)
 8007d42:	bfbc      	itt	lt
 8007d44:	2201      	movlt	r2, #1
 8007d46:	f8c8 2000 	strlt.w	r2, [r8]
 8007d4a:	ea33 0309 	bics.w	r3, r3, r9
 8007d4e:	d11b      	bne.n	8007d88 <_dtoa_r+0xb8>
 8007d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d52:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d5c:	4333      	orrs	r3, r6
 8007d5e:	f000 857a 	beq.w	8008856 <_dtoa_r+0xb86>
 8007d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d64:	b963      	cbnz	r3, 8007d80 <_dtoa_r+0xb0>
 8007d66:	4b9b      	ldr	r3, [pc, #620]	; (8007fd4 <_dtoa_r+0x304>)
 8007d68:	e024      	b.n	8007db4 <_dtoa_r+0xe4>
 8007d6a:	4b9b      	ldr	r3, [pc, #620]	; (8007fd8 <_dtoa_r+0x308>)
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	9800      	ldr	r0, [sp, #0]
 8007d76:	b015      	add	sp, #84	; 0x54
 8007d78:	ecbd 8b02 	vpop	{d8}
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	4b94      	ldr	r3, [pc, #592]	; (8007fd4 <_dtoa_r+0x304>)
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	3303      	adds	r3, #3
 8007d86:	e7f3      	b.n	8007d70 <_dtoa_r+0xa0>
 8007d88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	ec51 0b17 	vmov	r0, r1, d7
 8007d92:	2300      	movs	r3, #0
 8007d94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007d98:	f7f8 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	b158      	cbz	r0, 8007db8 <_dtoa_r+0xe8>
 8007da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007da2:	2301      	movs	r3, #1
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8551 	beq.w	8008850 <_dtoa_r+0xb80>
 8007dae:	488b      	ldr	r0, [pc, #556]	; (8007fdc <_dtoa_r+0x30c>)
 8007db0:	6018      	str	r0, [r3, #0]
 8007db2:	1e43      	subs	r3, r0, #1
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	e7dd      	b.n	8007d74 <_dtoa_r+0xa4>
 8007db8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007dbc:	aa12      	add	r2, sp, #72	; 0x48
 8007dbe:	a913      	add	r1, sp, #76	; 0x4c
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f001 facd 	bl	8009360 <__d2b>
 8007dc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007dca:	4683      	mov	fp, r0
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	d07c      	beq.n	8007eca <_dtoa_r+0x1fa>
 8007dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dda:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007dde:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007de2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007de6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dea:	4b7d      	ldr	r3, [pc, #500]	; (8007fe0 <_dtoa_r+0x310>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 fa49 	bl	8000288 <__aeabi_dsub>
 8007df6:	a36e      	add	r3, pc, #440	; (adr r3, 8007fb0 <_dtoa_r+0x2e0>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f7f8 fbfc 	bl	80005f8 <__aeabi_dmul>
 8007e00:	a36d      	add	r3, pc, #436	; (adr r3, 8007fb8 <_dtoa_r+0x2e8>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fa41 	bl	800028c <__adddf3>
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	460f      	mov	r7, r1
 8007e10:	f7f8 fb88 	bl	8000524 <__aeabi_i2d>
 8007e14:	a36a      	add	r3, pc, #424	; (adr r3, 8007fc0 <_dtoa_r+0x2f0>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 fbed 	bl	80005f8 <__aeabi_dmul>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4630      	mov	r0, r6
 8007e24:	4639      	mov	r1, r7
 8007e26:	f7f8 fa31 	bl	800028c <__adddf3>
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	f7f8 fe93 	bl	8000b58 <__aeabi_d2iz>
 8007e32:	2200      	movs	r2, #0
 8007e34:	4682      	mov	sl, r0
 8007e36:	2300      	movs	r3, #0
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 fe4e 	bl	8000adc <__aeabi_dcmplt>
 8007e40:	b148      	cbz	r0, 8007e56 <_dtoa_r+0x186>
 8007e42:	4650      	mov	r0, sl
 8007e44:	f7f8 fb6e 	bl	8000524 <__aeabi_i2d>
 8007e48:	4632      	mov	r2, r6
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	f7f8 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e50:	b908      	cbnz	r0, 8007e56 <_dtoa_r+0x186>
 8007e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e56:	f1ba 0f16 	cmp.w	sl, #22
 8007e5a:	d854      	bhi.n	8007f06 <_dtoa_r+0x236>
 8007e5c:	4b61      	ldr	r3, [pc, #388]	; (8007fe4 <_dtoa_r+0x314>)
 8007e5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e6a:	f7f8 fe37 	bl	8000adc <__aeabi_dcmplt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d04b      	beq.n	8007f0a <_dtoa_r+0x23a>
 8007e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e76:	2300      	movs	r3, #0
 8007e78:	930e      	str	r3, [sp, #56]	; 0x38
 8007e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e7c:	1b5d      	subs	r5, r3, r5
 8007e7e:	1e6b      	subs	r3, r5, #1
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	bf43      	ittte	mi
 8007e84:	2300      	movmi	r3, #0
 8007e86:	f1c5 0801 	rsbmi	r8, r5, #1
 8007e8a:	9304      	strmi	r3, [sp, #16]
 8007e8c:	f04f 0800 	movpl.w	r8, #0
 8007e90:	f1ba 0f00 	cmp.w	sl, #0
 8007e94:	db3b      	blt.n	8007f0e <_dtoa_r+0x23e>
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007e9c:	4453      	add	r3, sl
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9306      	str	r3, [sp, #24]
 8007ea4:	9b05      	ldr	r3, [sp, #20]
 8007ea6:	2b09      	cmp	r3, #9
 8007ea8:	d869      	bhi.n	8007f7e <_dtoa_r+0x2ae>
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	bfc4      	itt	gt
 8007eae:	3b04      	subgt	r3, #4
 8007eb0:	9305      	strgt	r3, [sp, #20]
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8007eb8:	bfcc      	ite	gt
 8007eba:	2500      	movgt	r5, #0
 8007ebc:	2501      	movle	r5, #1
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d869      	bhi.n	8007f96 <_dtoa_r+0x2c6>
 8007ec2:	e8df f003 	tbb	[pc, r3]
 8007ec6:	4e2c      	.short	0x4e2c
 8007ec8:	5a4c      	.short	0x5a4c
 8007eca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007ece:	441d      	add	r5, r3
 8007ed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	bfc1      	itttt	gt
 8007ed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007edc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ee0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ee4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ee8:	bfda      	itte	le
 8007eea:	f1c3 0320 	rsble	r3, r3, #32
 8007eee:	fa06 f003 	lslle.w	r0, r6, r3
 8007ef2:	4318      	orrgt	r0, r3
 8007ef4:	f7f8 fb06 	bl	8000504 <__aeabi_ui2d>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4606      	mov	r6, r0
 8007efc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f00:	3d01      	subs	r5, #1
 8007f02:	9310      	str	r3, [sp, #64]	; 0x40
 8007f04:	e771      	b.n	8007dea <_dtoa_r+0x11a>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e7b6      	b.n	8007e78 <_dtoa_r+0x1a8>
 8007f0a:	900e      	str	r0, [sp, #56]	; 0x38
 8007f0c:	e7b5      	b.n	8007e7a <_dtoa_r+0x1aa>
 8007f0e:	f1ca 0300 	rsb	r3, sl, #0
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	2300      	movs	r3, #0
 8007f16:	eba8 080a 	sub.w	r8, r8, sl
 8007f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f1c:	e7c2      	b.n	8007ea4 <_dtoa_r+0x1d4>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc39      	bgt.n	8007f9c <_dtoa_r+0x2cc>
 8007f28:	f04f 0901 	mov.w	r9, #1
 8007f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f30:	464b      	mov	r3, r9
 8007f32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f38:	2200      	movs	r2, #0
 8007f3a:	6042      	str	r2, [r0, #4]
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	f102 0614 	add.w	r6, r2, #20
 8007f42:	429e      	cmp	r6, r3
 8007f44:	6841      	ldr	r1, [r0, #4]
 8007f46:	d92f      	bls.n	8007fa8 <_dtoa_r+0x2d8>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 fee7 	bl	8008d1c <_Balloc>
 8007f4e:	9000      	str	r0, [sp, #0]
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d14b      	bne.n	8007fec <_dtoa_r+0x31c>
 8007f54:	4b24      	ldr	r3, [pc, #144]	; (8007fe8 <_dtoa_r+0x318>)
 8007f56:	4602      	mov	r2, r0
 8007f58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f5c:	e6d1      	b.n	8007d02 <_dtoa_r+0x32>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e7de      	b.n	8007f20 <_dtoa_r+0x250>
 8007f62:	2300      	movs	r3, #0
 8007f64:	9308      	str	r3, [sp, #32]
 8007f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f68:	eb0a 0903 	add.w	r9, sl, r3
 8007f6c:	f109 0301 	add.w	r3, r9, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	bfb8      	it	lt
 8007f76:	2301      	movlt	r3, #1
 8007f78:	e7dd      	b.n	8007f36 <_dtoa_r+0x266>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e7f2      	b.n	8007f64 <_dtoa_r+0x294>
 8007f7e:	2501      	movs	r5, #1
 8007f80:	2300      	movs	r3, #0
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	9508      	str	r5, [sp, #32]
 8007f86:	f04f 39ff 	mov.w	r9, #4294967295
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f90:	2312      	movs	r3, #18
 8007f92:	9209      	str	r2, [sp, #36]	; 0x24
 8007f94:	e7cf      	b.n	8007f36 <_dtoa_r+0x266>
 8007f96:	2301      	movs	r3, #1
 8007f98:	9308      	str	r3, [sp, #32]
 8007f9a:	e7f4      	b.n	8007f86 <_dtoa_r+0x2b6>
 8007f9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007fa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	e7c6      	b.n	8007f36 <_dtoa_r+0x266>
 8007fa8:	3101      	adds	r1, #1
 8007faa:	6041      	str	r1, [r0, #4]
 8007fac:	0052      	lsls	r2, r2, #1
 8007fae:	e7c6      	b.n	8007f3e <_dtoa_r+0x26e>
 8007fb0:	636f4361 	.word	0x636f4361
 8007fb4:	3fd287a7 	.word	0x3fd287a7
 8007fb8:	8b60c8b3 	.word	0x8b60c8b3
 8007fbc:	3fc68a28 	.word	0x3fc68a28
 8007fc0:	509f79fb 	.word	0x509f79fb
 8007fc4:	3fd34413 	.word	0x3fd34413
 8007fc8:	08009bf1 	.word	0x08009bf1
 8007fcc:	08009c08 	.word	0x08009c08
 8007fd0:	7ff00000 	.word	0x7ff00000
 8007fd4:	08009bed 	.word	0x08009bed
 8007fd8:	08009be4 	.word	0x08009be4
 8007fdc:	08009bc1 	.word	0x08009bc1
 8007fe0:	3ff80000 	.word	0x3ff80000
 8007fe4:	08009d60 	.word	0x08009d60
 8007fe8:	08009c67 	.word	0x08009c67
 8007fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fee:	9a00      	ldr	r2, [sp, #0]
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	9b01      	ldr	r3, [sp, #4]
 8007ff4:	2b0e      	cmp	r3, #14
 8007ff6:	f200 80ad 	bhi.w	8008154 <_dtoa_r+0x484>
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	f000 80aa 	beq.w	8008154 <_dtoa_r+0x484>
 8008000:	f1ba 0f00 	cmp.w	sl, #0
 8008004:	dd36      	ble.n	8008074 <_dtoa_r+0x3a4>
 8008006:	4ac3      	ldr	r2, [pc, #780]	; (8008314 <_dtoa_r+0x644>)
 8008008:	f00a 030f 	and.w	r3, sl, #15
 800800c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008010:	ed93 7b00 	vldr	d7, [r3]
 8008014:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008018:	ea4f 172a 	mov.w	r7, sl, asr #4
 800801c:	eeb0 8a47 	vmov.f32	s16, s14
 8008020:	eef0 8a67 	vmov.f32	s17, s15
 8008024:	d016      	beq.n	8008054 <_dtoa_r+0x384>
 8008026:	4bbc      	ldr	r3, [pc, #752]	; (8008318 <_dtoa_r+0x648>)
 8008028:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800802c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008030:	f7f8 fc0c 	bl	800084c <__aeabi_ddiv>
 8008034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008038:	f007 070f 	and.w	r7, r7, #15
 800803c:	2503      	movs	r5, #3
 800803e:	4eb6      	ldr	r6, [pc, #728]	; (8008318 <_dtoa_r+0x648>)
 8008040:	b957      	cbnz	r7, 8008058 <_dtoa_r+0x388>
 8008042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008046:	ec53 2b18 	vmov	r2, r3, d8
 800804a:	f7f8 fbff 	bl	800084c <__aeabi_ddiv>
 800804e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008052:	e029      	b.n	80080a8 <_dtoa_r+0x3d8>
 8008054:	2502      	movs	r5, #2
 8008056:	e7f2      	b.n	800803e <_dtoa_r+0x36e>
 8008058:	07f9      	lsls	r1, r7, #31
 800805a:	d508      	bpl.n	800806e <_dtoa_r+0x39e>
 800805c:	ec51 0b18 	vmov	r0, r1, d8
 8008060:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008064:	f7f8 fac8 	bl	80005f8 <__aeabi_dmul>
 8008068:	ec41 0b18 	vmov	d8, r0, r1
 800806c:	3501      	adds	r5, #1
 800806e:	107f      	asrs	r7, r7, #1
 8008070:	3608      	adds	r6, #8
 8008072:	e7e5      	b.n	8008040 <_dtoa_r+0x370>
 8008074:	f000 80a6 	beq.w	80081c4 <_dtoa_r+0x4f4>
 8008078:	f1ca 0600 	rsb	r6, sl, #0
 800807c:	4ba5      	ldr	r3, [pc, #660]	; (8008314 <_dtoa_r+0x644>)
 800807e:	4fa6      	ldr	r7, [pc, #664]	; (8008318 <_dtoa_r+0x648>)
 8008080:	f006 020f 	and.w	r2, r6, #15
 8008084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008090:	f7f8 fab2 	bl	80005f8 <__aeabi_dmul>
 8008094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008098:	1136      	asrs	r6, r6, #4
 800809a:	2300      	movs	r3, #0
 800809c:	2502      	movs	r5, #2
 800809e:	2e00      	cmp	r6, #0
 80080a0:	f040 8085 	bne.w	80081ae <_dtoa_r+0x4de>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1d2      	bne.n	800804e <_dtoa_r+0x37e>
 80080a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 808c 	beq.w	80081c8 <_dtoa_r+0x4f8>
 80080b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080b4:	4b99      	ldr	r3, [pc, #612]	; (800831c <_dtoa_r+0x64c>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fd0e 	bl	8000adc <__aeabi_dcmplt>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f000 8081 	beq.w	80081c8 <_dtoa_r+0x4f8>
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d07d      	beq.n	80081c8 <_dtoa_r+0x4f8>
 80080cc:	f1b9 0f00 	cmp.w	r9, #0
 80080d0:	dd3c      	ble.n	800814c <_dtoa_r+0x47c>
 80080d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	2200      	movs	r2, #0
 80080da:	4b91      	ldr	r3, [pc, #580]	; (8008320 <_dtoa_r+0x650>)
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e8:	3501      	adds	r5, #1
 80080ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80080ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7f8 fa16 	bl	8000524 <__aeabi_i2d>
 80080f8:	4632      	mov	r2, r6
 80080fa:	463b      	mov	r3, r7
 80080fc:	f7f8 fa7c 	bl	80005f8 <__aeabi_dmul>
 8008100:	4b88      	ldr	r3, [pc, #544]	; (8008324 <_dtoa_r+0x654>)
 8008102:	2200      	movs	r2, #0
 8008104:	f7f8 f8c2 	bl	800028c <__adddf3>
 8008108:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800810c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008110:	9303      	str	r3, [sp, #12]
 8008112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008114:	2b00      	cmp	r3, #0
 8008116:	d15c      	bne.n	80081d2 <_dtoa_r+0x502>
 8008118:	4b83      	ldr	r3, [pc, #524]	; (8008328 <_dtoa_r+0x658>)
 800811a:	2200      	movs	r2, #0
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 f8b2 	bl	8000288 <__aeabi_dsub>
 8008124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008128:	4606      	mov	r6, r0
 800812a:	460f      	mov	r7, r1
 800812c:	f7f8 fcf4 	bl	8000b18 <__aeabi_dcmpgt>
 8008130:	2800      	cmp	r0, #0
 8008132:	f040 8296 	bne.w	8008662 <_dtoa_r+0x992>
 8008136:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800813a:	4630      	mov	r0, r6
 800813c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 fccb 	bl	8000adc <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8288 	bne.w	800865c <_dtoa_r+0x98c>
 800814c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008150:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008156:	2b00      	cmp	r3, #0
 8008158:	f2c0 8158 	blt.w	800840c <_dtoa_r+0x73c>
 800815c:	f1ba 0f0e 	cmp.w	sl, #14
 8008160:	f300 8154 	bgt.w	800840c <_dtoa_r+0x73c>
 8008164:	4b6b      	ldr	r3, [pc, #428]	; (8008314 <_dtoa_r+0x644>)
 8008166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800816a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800816e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	f280 80e3 	bge.w	800833c <_dtoa_r+0x66c>
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f300 80df 	bgt.w	800833c <_dtoa_r+0x66c>
 800817e:	f040 826d 	bne.w	800865c <_dtoa_r+0x98c>
 8008182:	4b69      	ldr	r3, [pc, #420]	; (8008328 <_dtoa_r+0x658>)
 8008184:	2200      	movs	r2, #0
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 fa35 	bl	80005f8 <__aeabi_dmul>
 800818e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008192:	f7f8 fcb7 	bl	8000b04 <__aeabi_dcmpge>
 8008196:	9e01      	ldr	r6, [sp, #4]
 8008198:	4637      	mov	r7, r6
 800819a:	2800      	cmp	r0, #0
 800819c:	f040 8243 	bne.w	8008626 <_dtoa_r+0x956>
 80081a0:	9d00      	ldr	r5, [sp, #0]
 80081a2:	2331      	movs	r3, #49	; 0x31
 80081a4:	f805 3b01 	strb.w	r3, [r5], #1
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	e23f      	b.n	800862e <_dtoa_r+0x95e>
 80081ae:	07f2      	lsls	r2, r6, #31
 80081b0:	d505      	bpl.n	80081be <_dtoa_r+0x4ee>
 80081b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	3501      	adds	r5, #1
 80081bc:	2301      	movs	r3, #1
 80081be:	1076      	asrs	r6, r6, #1
 80081c0:	3708      	adds	r7, #8
 80081c2:	e76c      	b.n	800809e <_dtoa_r+0x3ce>
 80081c4:	2502      	movs	r5, #2
 80081c6:	e76f      	b.n	80080a8 <_dtoa_r+0x3d8>
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80081ce:	930c      	str	r3, [sp, #48]	; 0x30
 80081d0:	e78d      	b.n	80080ee <_dtoa_r+0x41e>
 80081d2:	9900      	ldr	r1, [sp, #0]
 80081d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d8:	4b4e      	ldr	r3, [pc, #312]	; (8008314 <_dtoa_r+0x644>)
 80081da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081de:	4401      	add	r1, r0
 80081e0:	9102      	str	r1, [sp, #8]
 80081e2:	9908      	ldr	r1, [sp, #32]
 80081e4:	eeb0 8a47 	vmov.f32	s16, s14
 80081e8:	eef0 8a67 	vmov.f32	s17, s15
 80081ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081f4:	2900      	cmp	r1, #0
 80081f6:	d045      	beq.n	8008284 <_dtoa_r+0x5b4>
 80081f8:	494c      	ldr	r1, [pc, #304]	; (800832c <_dtoa_r+0x65c>)
 80081fa:	2000      	movs	r0, #0
 80081fc:	f7f8 fb26 	bl	800084c <__aeabi_ddiv>
 8008200:	ec53 2b18 	vmov	r2, r3, d8
 8008204:	f7f8 f840 	bl	8000288 <__aeabi_dsub>
 8008208:	9d00      	ldr	r5, [sp, #0]
 800820a:	ec41 0b18 	vmov	d8, r0, r1
 800820e:	4639      	mov	r1, r7
 8008210:	4630      	mov	r0, r6
 8008212:	f7f8 fca1 	bl	8000b58 <__aeabi_d2iz>
 8008216:	900c      	str	r0, [sp, #48]	; 0x30
 8008218:	f7f8 f984 	bl	8000524 <__aeabi_i2d>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822a:	3330      	adds	r3, #48	; 0x30
 800822c:	f805 3b01 	strb.w	r3, [r5], #1
 8008230:	ec53 2b18 	vmov	r2, r3, d8
 8008234:	4606      	mov	r6, r0
 8008236:	460f      	mov	r7, r1
 8008238:	f7f8 fc50 	bl	8000adc <__aeabi_dcmplt>
 800823c:	2800      	cmp	r0, #0
 800823e:	d165      	bne.n	800830c <_dtoa_r+0x63c>
 8008240:	4632      	mov	r2, r6
 8008242:	463b      	mov	r3, r7
 8008244:	4935      	ldr	r1, [pc, #212]	; (800831c <_dtoa_r+0x64c>)
 8008246:	2000      	movs	r0, #0
 8008248:	f7f8 f81e 	bl	8000288 <__aeabi_dsub>
 800824c:	ec53 2b18 	vmov	r2, r3, d8
 8008250:	f7f8 fc44 	bl	8000adc <__aeabi_dcmplt>
 8008254:	2800      	cmp	r0, #0
 8008256:	f040 80b9 	bne.w	80083cc <_dtoa_r+0x6fc>
 800825a:	9b02      	ldr	r3, [sp, #8]
 800825c:	429d      	cmp	r5, r3
 800825e:	f43f af75 	beq.w	800814c <_dtoa_r+0x47c>
 8008262:	4b2f      	ldr	r3, [pc, #188]	; (8008320 <_dtoa_r+0x650>)
 8008264:	ec51 0b18 	vmov	r0, r1, d8
 8008268:	2200      	movs	r2, #0
 800826a:	f7f8 f9c5 	bl	80005f8 <__aeabi_dmul>
 800826e:	4b2c      	ldr	r3, [pc, #176]	; (8008320 <_dtoa_r+0x650>)
 8008270:	ec41 0b18 	vmov	d8, r0, r1
 8008274:	2200      	movs	r2, #0
 8008276:	4630      	mov	r0, r6
 8008278:	4639      	mov	r1, r7
 800827a:	f7f8 f9bd 	bl	80005f8 <__aeabi_dmul>
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	e7c4      	b.n	800820e <_dtoa_r+0x53e>
 8008284:	ec51 0b17 	vmov	r0, r1, d7
 8008288:	f7f8 f9b6 	bl	80005f8 <__aeabi_dmul>
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	9d00      	ldr	r5, [sp, #0]
 8008290:	930c      	str	r3, [sp, #48]	; 0x30
 8008292:	ec41 0b18 	vmov	d8, r0, r1
 8008296:	4639      	mov	r1, r7
 8008298:	4630      	mov	r0, r6
 800829a:	f7f8 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800829e:	9011      	str	r0, [sp, #68]	; 0x44
 80082a0:	f7f8 f940 	bl	8000524 <__aeabi_i2d>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f7 ffec 	bl	8000288 <__aeabi_dsub>
 80082b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b2:	3330      	adds	r3, #48	; 0x30
 80082b4:	f805 3b01 	strb.w	r3, [r5], #1
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	429d      	cmp	r5, r3
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	d134      	bne.n	8008330 <_dtoa_r+0x660>
 80082c6:	4b19      	ldr	r3, [pc, #100]	; (800832c <_dtoa_r+0x65c>)
 80082c8:	ec51 0b18 	vmov	r0, r1, d8
 80082cc:	f7f7 ffde 	bl	800028c <__adddf3>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	f7f8 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d175      	bne.n	80083cc <_dtoa_r+0x6fc>
 80082e0:	ec53 2b18 	vmov	r2, r3, d8
 80082e4:	4911      	ldr	r1, [pc, #68]	; (800832c <_dtoa_r+0x65c>)
 80082e6:	2000      	movs	r0, #0
 80082e8:	f7f7 ffce 	bl	8000288 <__aeabi_dsub>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4630      	mov	r0, r6
 80082f2:	4639      	mov	r1, r7
 80082f4:	f7f8 fbf2 	bl	8000adc <__aeabi_dcmplt>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f43f af27 	beq.w	800814c <_dtoa_r+0x47c>
 80082fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008300:	1e6b      	subs	r3, r5, #1
 8008302:	930c      	str	r3, [sp, #48]	; 0x30
 8008304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	d0f8      	beq.n	80082fe <_dtoa_r+0x62e>
 800830c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008310:	e04a      	b.n	80083a8 <_dtoa_r+0x6d8>
 8008312:	bf00      	nop
 8008314:	08009d60 	.word	0x08009d60
 8008318:	08009d38 	.word	0x08009d38
 800831c:	3ff00000 	.word	0x3ff00000
 8008320:	40240000 	.word	0x40240000
 8008324:	401c0000 	.word	0x401c0000
 8008328:	40140000 	.word	0x40140000
 800832c:	3fe00000 	.word	0x3fe00000
 8008330:	4baf      	ldr	r3, [pc, #700]	; (80085f0 <_dtoa_r+0x920>)
 8008332:	f7f8 f961 	bl	80005f8 <__aeabi_dmul>
 8008336:	4606      	mov	r6, r0
 8008338:	460f      	mov	r7, r1
 800833a:	e7ac      	b.n	8008296 <_dtoa_r+0x5c6>
 800833c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008340:	9d00      	ldr	r5, [sp, #0]
 8008342:	4642      	mov	r2, r8
 8008344:	464b      	mov	r3, r9
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	f7f8 fa7f 	bl	800084c <__aeabi_ddiv>
 800834e:	f7f8 fc03 	bl	8000b58 <__aeabi_d2iz>
 8008352:	9002      	str	r0, [sp, #8]
 8008354:	f7f8 f8e6 	bl	8000524 <__aeabi_i2d>
 8008358:	4642      	mov	r2, r8
 800835a:	464b      	mov	r3, r9
 800835c:	f7f8 f94c 	bl	80005f8 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f7 ff8e 	bl	8000288 <__aeabi_dsub>
 800836c:	9e02      	ldr	r6, [sp, #8]
 800836e:	9f01      	ldr	r7, [sp, #4]
 8008370:	3630      	adds	r6, #48	; 0x30
 8008372:	f805 6b01 	strb.w	r6, [r5], #1
 8008376:	9e00      	ldr	r6, [sp, #0]
 8008378:	1bae      	subs	r6, r5, r6
 800837a:	42b7      	cmp	r7, r6
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	d137      	bne.n	80083f2 <_dtoa_r+0x722>
 8008382:	f7f7 ff83 	bl	800028c <__adddf3>
 8008386:	4642      	mov	r2, r8
 8008388:	464b      	mov	r3, r9
 800838a:	4606      	mov	r6, r0
 800838c:	460f      	mov	r7, r1
 800838e:	f7f8 fbc3 	bl	8000b18 <__aeabi_dcmpgt>
 8008392:	b9c8      	cbnz	r0, 80083c8 <_dtoa_r+0x6f8>
 8008394:	4642      	mov	r2, r8
 8008396:	464b      	mov	r3, r9
 8008398:	4630      	mov	r0, r6
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a0:	b110      	cbz	r0, 80083a8 <_dtoa_r+0x6d8>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	07d9      	lsls	r1, r3, #31
 80083a6:	d40f      	bmi.n	80083c8 <_dtoa_r+0x6f8>
 80083a8:	4620      	mov	r0, r4
 80083aa:	4659      	mov	r1, fp
 80083ac:	f000 fcf6 	bl	8008d9c <_Bfree>
 80083b0:	2300      	movs	r3, #0
 80083b2:	702b      	strb	r3, [r5, #0]
 80083b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083b6:	f10a 0001 	add.w	r0, sl, #1
 80083ba:	6018      	str	r0, [r3, #0]
 80083bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f43f acd8 	beq.w	8007d74 <_dtoa_r+0xa4>
 80083c4:	601d      	str	r5, [r3, #0]
 80083c6:	e4d5      	b.n	8007d74 <_dtoa_r+0xa4>
 80083c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80083cc:	462b      	mov	r3, r5
 80083ce:	461d      	mov	r5, r3
 80083d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083d4:	2a39      	cmp	r2, #57	; 0x39
 80083d6:	d108      	bne.n	80083ea <_dtoa_r+0x71a>
 80083d8:	9a00      	ldr	r2, [sp, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d1f7      	bne.n	80083ce <_dtoa_r+0x6fe>
 80083de:	9a07      	ldr	r2, [sp, #28]
 80083e0:	9900      	ldr	r1, [sp, #0]
 80083e2:	3201      	adds	r2, #1
 80083e4:	9207      	str	r2, [sp, #28]
 80083e6:	2230      	movs	r2, #48	; 0x30
 80083e8:	700a      	strb	r2, [r1, #0]
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	3201      	adds	r2, #1
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	e78c      	b.n	800830c <_dtoa_r+0x63c>
 80083f2:	4b7f      	ldr	r3, [pc, #508]	; (80085f0 <_dtoa_r+0x920>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	2200      	movs	r2, #0
 80083fc:	2300      	movs	r3, #0
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	f7f8 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008406:	2800      	cmp	r0, #0
 8008408:	d09b      	beq.n	8008342 <_dtoa_r+0x672>
 800840a:	e7cd      	b.n	80083a8 <_dtoa_r+0x6d8>
 800840c:	9a08      	ldr	r2, [sp, #32]
 800840e:	2a00      	cmp	r2, #0
 8008410:	f000 80c4 	beq.w	800859c <_dtoa_r+0x8cc>
 8008414:	9a05      	ldr	r2, [sp, #20]
 8008416:	2a01      	cmp	r2, #1
 8008418:	f300 80a8 	bgt.w	800856c <_dtoa_r+0x89c>
 800841c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800841e:	2a00      	cmp	r2, #0
 8008420:	f000 80a0 	beq.w	8008564 <_dtoa_r+0x894>
 8008424:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008428:	9e06      	ldr	r6, [sp, #24]
 800842a:	4645      	mov	r5, r8
 800842c:	9a04      	ldr	r2, [sp, #16]
 800842e:	2101      	movs	r1, #1
 8008430:	441a      	add	r2, r3
 8008432:	4620      	mov	r0, r4
 8008434:	4498      	add	r8, r3
 8008436:	9204      	str	r2, [sp, #16]
 8008438:	f000 fd6c 	bl	8008f14 <__i2b>
 800843c:	4607      	mov	r7, r0
 800843e:	2d00      	cmp	r5, #0
 8008440:	dd0b      	ble.n	800845a <_dtoa_r+0x78a>
 8008442:	9b04      	ldr	r3, [sp, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd08      	ble.n	800845a <_dtoa_r+0x78a>
 8008448:	42ab      	cmp	r3, r5
 800844a:	9a04      	ldr	r2, [sp, #16]
 800844c:	bfa8      	it	ge
 800844e:	462b      	movge	r3, r5
 8008450:	eba8 0803 	sub.w	r8, r8, r3
 8008454:	1aed      	subs	r5, r5, r3
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	9b06      	ldr	r3, [sp, #24]
 800845c:	b1fb      	cbz	r3, 800849e <_dtoa_r+0x7ce>
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 809f 	beq.w	80085a4 <_dtoa_r+0x8d4>
 8008466:	2e00      	cmp	r6, #0
 8008468:	dd11      	ble.n	800848e <_dtoa_r+0x7be>
 800846a:	4639      	mov	r1, r7
 800846c:	4632      	mov	r2, r6
 800846e:	4620      	mov	r0, r4
 8008470:	f000 fe0c 	bl	800908c <__pow5mult>
 8008474:	465a      	mov	r2, fp
 8008476:	4601      	mov	r1, r0
 8008478:	4607      	mov	r7, r0
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fd60 	bl	8008f40 <__multiply>
 8008480:	4659      	mov	r1, fp
 8008482:	9007      	str	r0, [sp, #28]
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fc89 	bl	8008d9c <_Bfree>
 800848a:	9b07      	ldr	r3, [sp, #28]
 800848c:	469b      	mov	fp, r3
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	1b9a      	subs	r2, r3, r6
 8008492:	d004      	beq.n	800849e <_dtoa_r+0x7ce>
 8008494:	4659      	mov	r1, fp
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fdf8 	bl	800908c <__pow5mult>
 800849c:	4683      	mov	fp, r0
 800849e:	2101      	movs	r1, #1
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fd37 	bl	8008f14 <__i2b>
 80084a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	4606      	mov	r6, r0
 80084ac:	dd7c      	ble.n	80085a8 <_dtoa_r+0x8d8>
 80084ae:	461a      	mov	r2, r3
 80084b0:	4601      	mov	r1, r0
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fdea 	bl	800908c <__pow5mult>
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	4606      	mov	r6, r0
 80084be:	dd76      	ble.n	80085ae <_dtoa_r+0x8de>
 80084c0:	2300      	movs	r3, #0
 80084c2:	9306      	str	r3, [sp, #24]
 80084c4:	6933      	ldr	r3, [r6, #16]
 80084c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084ca:	6918      	ldr	r0, [r3, #16]
 80084cc:	f000 fcd2 	bl	8008e74 <__hi0bits>
 80084d0:	f1c0 0020 	rsb	r0, r0, #32
 80084d4:	9b04      	ldr	r3, [sp, #16]
 80084d6:	4418      	add	r0, r3
 80084d8:	f010 001f 	ands.w	r0, r0, #31
 80084dc:	f000 8086 	beq.w	80085ec <_dtoa_r+0x91c>
 80084e0:	f1c0 0320 	rsb	r3, r0, #32
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	dd7f      	ble.n	80085e8 <_dtoa_r+0x918>
 80084e8:	f1c0 001c 	rsb	r0, r0, #28
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	4403      	add	r3, r0
 80084f0:	4480      	add	r8, r0
 80084f2:	4405      	add	r5, r0
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	f1b8 0f00 	cmp.w	r8, #0
 80084fa:	dd05      	ble.n	8008508 <_dtoa_r+0x838>
 80084fc:	4659      	mov	r1, fp
 80084fe:	4642      	mov	r2, r8
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fe1d 	bl	8009140 <__lshift>
 8008506:	4683      	mov	fp, r0
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd05      	ble.n	800851a <_dtoa_r+0x84a>
 800850e:	4631      	mov	r1, r6
 8008510:	461a      	mov	r2, r3
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fe14 	bl	8009140 <__lshift>
 8008518:	4606      	mov	r6, r0
 800851a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800851c:	2b00      	cmp	r3, #0
 800851e:	d069      	beq.n	80085f4 <_dtoa_r+0x924>
 8008520:	4631      	mov	r1, r6
 8008522:	4658      	mov	r0, fp
 8008524:	f000 fe78 	bl	8009218 <__mcmp>
 8008528:	2800      	cmp	r0, #0
 800852a:	da63      	bge.n	80085f4 <_dtoa_r+0x924>
 800852c:	2300      	movs	r3, #0
 800852e:	4659      	mov	r1, fp
 8008530:	220a      	movs	r2, #10
 8008532:	4620      	mov	r0, r4
 8008534:	f000 fc54 	bl	8008de0 <__multadd>
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800853e:	4683      	mov	fp, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 818f 	beq.w	8008864 <_dtoa_r+0xb94>
 8008546:	4639      	mov	r1, r7
 8008548:	2300      	movs	r3, #0
 800854a:	220a      	movs	r2, #10
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fc47 	bl	8008de0 <__multadd>
 8008552:	f1b9 0f00 	cmp.w	r9, #0
 8008556:	4607      	mov	r7, r0
 8008558:	f300 808e 	bgt.w	8008678 <_dtoa_r+0x9a8>
 800855c:	9b05      	ldr	r3, [sp, #20]
 800855e:	2b02      	cmp	r3, #2
 8008560:	dc50      	bgt.n	8008604 <_dtoa_r+0x934>
 8008562:	e089      	b.n	8008678 <_dtoa_r+0x9a8>
 8008564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800856a:	e75d      	b.n	8008428 <_dtoa_r+0x758>
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	1e5e      	subs	r6, r3, #1
 8008570:	9b06      	ldr	r3, [sp, #24]
 8008572:	42b3      	cmp	r3, r6
 8008574:	bfbf      	itttt	lt
 8008576:	9b06      	ldrlt	r3, [sp, #24]
 8008578:	9606      	strlt	r6, [sp, #24]
 800857a:	1af2      	sublt	r2, r6, r3
 800857c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800857e:	bfb6      	itet	lt
 8008580:	189b      	addlt	r3, r3, r2
 8008582:	1b9e      	subge	r6, r3, r6
 8008584:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	bfb8      	it	lt
 800858a:	2600      	movlt	r6, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	bfb5      	itete	lt
 8008590:	eba8 0503 	sublt.w	r5, r8, r3
 8008594:	9b01      	ldrge	r3, [sp, #4]
 8008596:	2300      	movlt	r3, #0
 8008598:	4645      	movge	r5, r8
 800859a:	e747      	b.n	800842c <_dtoa_r+0x75c>
 800859c:	9e06      	ldr	r6, [sp, #24]
 800859e:	9f08      	ldr	r7, [sp, #32]
 80085a0:	4645      	mov	r5, r8
 80085a2:	e74c      	b.n	800843e <_dtoa_r+0x76e>
 80085a4:	9a06      	ldr	r2, [sp, #24]
 80085a6:	e775      	b.n	8008494 <_dtoa_r+0x7c4>
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	dc18      	bgt.n	80085e0 <_dtoa_r+0x910>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	b9b3      	cbnz	r3, 80085e0 <_dtoa_r+0x910>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b8:	b9a3      	cbnz	r3, 80085e4 <_dtoa_r+0x914>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c0:	0d1b      	lsrs	r3, r3, #20
 80085c2:	051b      	lsls	r3, r3, #20
 80085c4:	b12b      	cbz	r3, 80085d2 <_dtoa_r+0x902>
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	3301      	adds	r3, #1
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	f108 0801 	add.w	r8, r8, #1
 80085d0:	2301      	movs	r3, #1
 80085d2:	9306      	str	r3, [sp, #24]
 80085d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f47f af74 	bne.w	80084c4 <_dtoa_r+0x7f4>
 80085dc:	2001      	movs	r0, #1
 80085de:	e779      	b.n	80084d4 <_dtoa_r+0x804>
 80085e0:	2300      	movs	r3, #0
 80085e2:	e7f6      	b.n	80085d2 <_dtoa_r+0x902>
 80085e4:	9b02      	ldr	r3, [sp, #8]
 80085e6:	e7f4      	b.n	80085d2 <_dtoa_r+0x902>
 80085e8:	d085      	beq.n	80084f6 <_dtoa_r+0x826>
 80085ea:	4618      	mov	r0, r3
 80085ec:	301c      	adds	r0, #28
 80085ee:	e77d      	b.n	80084ec <_dtoa_r+0x81c>
 80085f0:	40240000 	.word	0x40240000
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dc38      	bgt.n	800866c <_dtoa_r+0x99c>
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	dd35      	ble.n	800866c <_dtoa_r+0x99c>
 8008600:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008604:	f1b9 0f00 	cmp.w	r9, #0
 8008608:	d10d      	bne.n	8008626 <_dtoa_r+0x956>
 800860a:	4631      	mov	r1, r6
 800860c:	464b      	mov	r3, r9
 800860e:	2205      	movs	r2, #5
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fbe5 	bl	8008de0 <__multadd>
 8008616:	4601      	mov	r1, r0
 8008618:	4606      	mov	r6, r0
 800861a:	4658      	mov	r0, fp
 800861c:	f000 fdfc 	bl	8009218 <__mcmp>
 8008620:	2800      	cmp	r0, #0
 8008622:	f73f adbd 	bgt.w	80081a0 <_dtoa_r+0x4d0>
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	9d00      	ldr	r5, [sp, #0]
 800862a:	ea6f 0a03 	mvn.w	sl, r3
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	4631      	mov	r1, r6
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fbb1 	bl	8008d9c <_Bfree>
 800863a:	2f00      	cmp	r7, #0
 800863c:	f43f aeb4 	beq.w	80083a8 <_dtoa_r+0x6d8>
 8008640:	f1b8 0f00 	cmp.w	r8, #0
 8008644:	d005      	beq.n	8008652 <_dtoa_r+0x982>
 8008646:	45b8      	cmp	r8, r7
 8008648:	d003      	beq.n	8008652 <_dtoa_r+0x982>
 800864a:	4641      	mov	r1, r8
 800864c:	4620      	mov	r0, r4
 800864e:	f000 fba5 	bl	8008d9c <_Bfree>
 8008652:	4639      	mov	r1, r7
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fba1 	bl	8008d9c <_Bfree>
 800865a:	e6a5      	b.n	80083a8 <_dtoa_r+0x6d8>
 800865c:	2600      	movs	r6, #0
 800865e:	4637      	mov	r7, r6
 8008660:	e7e1      	b.n	8008626 <_dtoa_r+0x956>
 8008662:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008668:	4637      	mov	r7, r6
 800866a:	e599      	b.n	80081a0 <_dtoa_r+0x4d0>
 800866c:	9b08      	ldr	r3, [sp, #32]
 800866e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80fd 	beq.w	8008872 <_dtoa_r+0xba2>
 8008678:	2d00      	cmp	r5, #0
 800867a:	dd05      	ble.n	8008688 <_dtoa_r+0x9b8>
 800867c:	4639      	mov	r1, r7
 800867e:	462a      	mov	r2, r5
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fd5d 	bl	8009140 <__lshift>
 8008686:	4607      	mov	r7, r0
 8008688:	9b06      	ldr	r3, [sp, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d05c      	beq.n	8008748 <_dtoa_r+0xa78>
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4620      	mov	r0, r4
 8008692:	f000 fb43 	bl	8008d1c <_Balloc>
 8008696:	4605      	mov	r5, r0
 8008698:	b928      	cbnz	r0, 80086a6 <_dtoa_r+0x9d6>
 800869a:	4b80      	ldr	r3, [pc, #512]	; (800889c <_dtoa_r+0xbcc>)
 800869c:	4602      	mov	r2, r0
 800869e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086a2:	f7ff bb2e 	b.w	8007d02 <_dtoa_r+0x32>
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	3202      	adds	r2, #2
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	f107 010c 	add.w	r1, r7, #12
 80086b0:	300c      	adds	r0, #12
 80086b2:	f000 fb25 	bl	8008d00 <memcpy>
 80086b6:	2201      	movs	r2, #1
 80086b8:	4629      	mov	r1, r5
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fd40 	bl	8009140 <__lshift>
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	444b      	add	r3, r9
 80086ca:	9307      	str	r3, [sp, #28]
 80086cc:	9b02      	ldr	r3, [sp, #8]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	46b8      	mov	r8, r7
 80086d4:	9306      	str	r3, [sp, #24]
 80086d6:	4607      	mov	r7, r0
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	4631      	mov	r1, r6
 80086dc:	3b01      	subs	r3, #1
 80086de:	4658      	mov	r0, fp
 80086e0:	9302      	str	r3, [sp, #8]
 80086e2:	f7ff fa69 	bl	8007bb8 <quorem>
 80086e6:	4603      	mov	r3, r0
 80086e8:	3330      	adds	r3, #48	; 0x30
 80086ea:	9004      	str	r0, [sp, #16]
 80086ec:	4641      	mov	r1, r8
 80086ee:	4658      	mov	r0, fp
 80086f0:	9308      	str	r3, [sp, #32]
 80086f2:	f000 fd91 	bl	8009218 <__mcmp>
 80086f6:	463a      	mov	r2, r7
 80086f8:	4681      	mov	r9, r0
 80086fa:	4631      	mov	r1, r6
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fda7 	bl	8009250 <__mdiff>
 8008702:	68c2      	ldr	r2, [r0, #12]
 8008704:	9b08      	ldr	r3, [sp, #32]
 8008706:	4605      	mov	r5, r0
 8008708:	bb02      	cbnz	r2, 800874c <_dtoa_r+0xa7c>
 800870a:	4601      	mov	r1, r0
 800870c:	4658      	mov	r0, fp
 800870e:	f000 fd83 	bl	8009218 <__mcmp>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	4602      	mov	r2, r0
 8008716:	4629      	mov	r1, r5
 8008718:	4620      	mov	r0, r4
 800871a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800871e:	f000 fb3d 	bl	8008d9c <_Bfree>
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008726:	9d01      	ldr	r5, [sp, #4]
 8008728:	ea43 0102 	orr.w	r1, r3, r2
 800872c:	9b06      	ldr	r3, [sp, #24]
 800872e:	430b      	orrs	r3, r1
 8008730:	9b08      	ldr	r3, [sp, #32]
 8008732:	d10d      	bne.n	8008750 <_dtoa_r+0xa80>
 8008734:	2b39      	cmp	r3, #57	; 0x39
 8008736:	d029      	beq.n	800878c <_dtoa_r+0xabc>
 8008738:	f1b9 0f00 	cmp.w	r9, #0
 800873c:	dd01      	ble.n	8008742 <_dtoa_r+0xa72>
 800873e:	9b04      	ldr	r3, [sp, #16]
 8008740:	3331      	adds	r3, #49	; 0x31
 8008742:	9a02      	ldr	r2, [sp, #8]
 8008744:	7013      	strb	r3, [r2, #0]
 8008746:	e774      	b.n	8008632 <_dtoa_r+0x962>
 8008748:	4638      	mov	r0, r7
 800874a:	e7b9      	b.n	80086c0 <_dtoa_r+0x9f0>
 800874c:	2201      	movs	r2, #1
 800874e:	e7e2      	b.n	8008716 <_dtoa_r+0xa46>
 8008750:	f1b9 0f00 	cmp.w	r9, #0
 8008754:	db06      	blt.n	8008764 <_dtoa_r+0xa94>
 8008756:	9905      	ldr	r1, [sp, #20]
 8008758:	ea41 0909 	orr.w	r9, r1, r9
 800875c:	9906      	ldr	r1, [sp, #24]
 800875e:	ea59 0101 	orrs.w	r1, r9, r1
 8008762:	d120      	bne.n	80087a6 <_dtoa_r+0xad6>
 8008764:	2a00      	cmp	r2, #0
 8008766:	ddec      	ble.n	8008742 <_dtoa_r+0xa72>
 8008768:	4659      	mov	r1, fp
 800876a:	2201      	movs	r2, #1
 800876c:	4620      	mov	r0, r4
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	f000 fce6 	bl	8009140 <__lshift>
 8008774:	4631      	mov	r1, r6
 8008776:	4683      	mov	fp, r0
 8008778:	f000 fd4e 	bl	8009218 <__mcmp>
 800877c:	2800      	cmp	r0, #0
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	dc02      	bgt.n	8008788 <_dtoa_r+0xab8>
 8008782:	d1de      	bne.n	8008742 <_dtoa_r+0xa72>
 8008784:	07da      	lsls	r2, r3, #31
 8008786:	d5dc      	bpl.n	8008742 <_dtoa_r+0xa72>
 8008788:	2b39      	cmp	r3, #57	; 0x39
 800878a:	d1d8      	bne.n	800873e <_dtoa_r+0xa6e>
 800878c:	9a02      	ldr	r2, [sp, #8]
 800878e:	2339      	movs	r3, #57	; 0x39
 8008790:	7013      	strb	r3, [r2, #0]
 8008792:	462b      	mov	r3, r5
 8008794:	461d      	mov	r5, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800879c:	2a39      	cmp	r2, #57	; 0x39
 800879e:	d050      	beq.n	8008842 <_dtoa_r+0xb72>
 80087a0:	3201      	adds	r2, #1
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	e745      	b.n	8008632 <_dtoa_r+0x962>
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	dd03      	ble.n	80087b2 <_dtoa_r+0xae2>
 80087aa:	2b39      	cmp	r3, #57	; 0x39
 80087ac:	d0ee      	beq.n	800878c <_dtoa_r+0xabc>
 80087ae:	3301      	adds	r3, #1
 80087b0:	e7c7      	b.n	8008742 <_dtoa_r+0xa72>
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	9907      	ldr	r1, [sp, #28]
 80087b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087ba:	428a      	cmp	r2, r1
 80087bc:	d02a      	beq.n	8008814 <_dtoa_r+0xb44>
 80087be:	4659      	mov	r1, fp
 80087c0:	2300      	movs	r3, #0
 80087c2:	220a      	movs	r2, #10
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fb0b 	bl	8008de0 <__multadd>
 80087ca:	45b8      	cmp	r8, r7
 80087cc:	4683      	mov	fp, r0
 80087ce:	f04f 0300 	mov.w	r3, #0
 80087d2:	f04f 020a 	mov.w	r2, #10
 80087d6:	4641      	mov	r1, r8
 80087d8:	4620      	mov	r0, r4
 80087da:	d107      	bne.n	80087ec <_dtoa_r+0xb1c>
 80087dc:	f000 fb00 	bl	8008de0 <__multadd>
 80087e0:	4680      	mov	r8, r0
 80087e2:	4607      	mov	r7, r0
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	3301      	adds	r3, #1
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	e775      	b.n	80086d8 <_dtoa_r+0xa08>
 80087ec:	f000 faf8 	bl	8008de0 <__multadd>
 80087f0:	4639      	mov	r1, r7
 80087f2:	4680      	mov	r8, r0
 80087f4:	2300      	movs	r3, #0
 80087f6:	220a      	movs	r2, #10
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 faf1 	bl	8008de0 <__multadd>
 80087fe:	4607      	mov	r7, r0
 8008800:	e7f0      	b.n	80087e4 <_dtoa_r+0xb14>
 8008802:	f1b9 0f00 	cmp.w	r9, #0
 8008806:	9a00      	ldr	r2, [sp, #0]
 8008808:	bfcc      	ite	gt
 800880a:	464d      	movgt	r5, r9
 800880c:	2501      	movle	r5, #1
 800880e:	4415      	add	r5, r2
 8008810:	f04f 0800 	mov.w	r8, #0
 8008814:	4659      	mov	r1, fp
 8008816:	2201      	movs	r2, #1
 8008818:	4620      	mov	r0, r4
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	f000 fc90 	bl	8009140 <__lshift>
 8008820:	4631      	mov	r1, r6
 8008822:	4683      	mov	fp, r0
 8008824:	f000 fcf8 	bl	8009218 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	dcb2      	bgt.n	8008792 <_dtoa_r+0xac2>
 800882c:	d102      	bne.n	8008834 <_dtoa_r+0xb64>
 800882e:	9b01      	ldr	r3, [sp, #4]
 8008830:	07db      	lsls	r3, r3, #31
 8008832:	d4ae      	bmi.n	8008792 <_dtoa_r+0xac2>
 8008834:	462b      	mov	r3, r5
 8008836:	461d      	mov	r5, r3
 8008838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800883c:	2a30      	cmp	r2, #48	; 0x30
 800883e:	d0fa      	beq.n	8008836 <_dtoa_r+0xb66>
 8008840:	e6f7      	b.n	8008632 <_dtoa_r+0x962>
 8008842:	9a00      	ldr	r2, [sp, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d1a5      	bne.n	8008794 <_dtoa_r+0xac4>
 8008848:	f10a 0a01 	add.w	sl, sl, #1
 800884c:	2331      	movs	r3, #49	; 0x31
 800884e:	e779      	b.n	8008744 <_dtoa_r+0xa74>
 8008850:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <_dtoa_r+0xbd0>)
 8008852:	f7ff baaf 	b.w	8007db4 <_dtoa_r+0xe4>
 8008856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008858:	2b00      	cmp	r3, #0
 800885a:	f47f aa86 	bne.w	8007d6a <_dtoa_r+0x9a>
 800885e:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <_dtoa_r+0xbd4>)
 8008860:	f7ff baa8 	b.w	8007db4 <_dtoa_r+0xe4>
 8008864:	f1b9 0f00 	cmp.w	r9, #0
 8008868:	dc03      	bgt.n	8008872 <_dtoa_r+0xba2>
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	2b02      	cmp	r3, #2
 800886e:	f73f aec9 	bgt.w	8008604 <_dtoa_r+0x934>
 8008872:	9d00      	ldr	r5, [sp, #0]
 8008874:	4631      	mov	r1, r6
 8008876:	4658      	mov	r0, fp
 8008878:	f7ff f99e 	bl	8007bb8 <quorem>
 800887c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008880:	f805 3b01 	strb.w	r3, [r5], #1
 8008884:	9a00      	ldr	r2, [sp, #0]
 8008886:	1aaa      	subs	r2, r5, r2
 8008888:	4591      	cmp	r9, r2
 800888a:	ddba      	ble.n	8008802 <_dtoa_r+0xb32>
 800888c:	4659      	mov	r1, fp
 800888e:	2300      	movs	r3, #0
 8008890:	220a      	movs	r2, #10
 8008892:	4620      	mov	r0, r4
 8008894:	f000 faa4 	bl	8008de0 <__multadd>
 8008898:	4683      	mov	fp, r0
 800889a:	e7eb      	b.n	8008874 <_dtoa_r+0xba4>
 800889c:	08009c67 	.word	0x08009c67
 80088a0:	08009bc0 	.word	0x08009bc0
 80088a4:	08009be4 	.word	0x08009be4

080088a8 <__sflush_r>:
 80088a8:	898a      	ldrh	r2, [r1, #12]
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	4605      	mov	r5, r0
 80088b0:	0710      	lsls	r0, r2, #28
 80088b2:	460c      	mov	r4, r1
 80088b4:	d458      	bmi.n	8008968 <__sflush_r+0xc0>
 80088b6:	684b      	ldr	r3, [r1, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc05      	bgt.n	80088c8 <__sflush_r+0x20>
 80088bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dc02      	bgt.n	80088c8 <__sflush_r+0x20>
 80088c2:	2000      	movs	r0, #0
 80088c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d0f9      	beq.n	80088c2 <__sflush_r+0x1a>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d4:	682f      	ldr	r7, [r5, #0]
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	d032      	beq.n	8008940 <__sflush_r+0x98>
 80088da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	075a      	lsls	r2, r3, #29
 80088e0:	d505      	bpl.n	80088ee <__sflush_r+0x46>
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	1ac0      	subs	r0, r0, r3
 80088e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e8:	b10b      	cbz	r3, 80088ee <__sflush_r+0x46>
 80088ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ec:	1ac0      	subs	r0, r0, r3
 80088ee:	2300      	movs	r3, #0
 80088f0:	4602      	mov	r2, r0
 80088f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f4:	6a21      	ldr	r1, [r4, #32]
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b0      	blx	r6
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	d106      	bne.n	800890e <__sflush_r+0x66>
 8008900:	6829      	ldr	r1, [r5, #0]
 8008902:	291d      	cmp	r1, #29
 8008904:	d82c      	bhi.n	8008960 <__sflush_r+0xb8>
 8008906:	4a2a      	ldr	r2, [pc, #168]	; (80089b0 <__sflush_r+0x108>)
 8008908:	40ca      	lsrs	r2, r1
 800890a:	07d6      	lsls	r6, r2, #31
 800890c:	d528      	bpl.n	8008960 <__sflush_r+0xb8>
 800890e:	2200      	movs	r2, #0
 8008910:	6062      	str	r2, [r4, #4]
 8008912:	04d9      	lsls	r1, r3, #19
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	d504      	bpl.n	8008924 <__sflush_r+0x7c>
 800891a:	1c42      	adds	r2, r0, #1
 800891c:	d101      	bne.n	8008922 <__sflush_r+0x7a>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	b903      	cbnz	r3, 8008924 <__sflush_r+0x7c>
 8008922:	6560      	str	r0, [r4, #84]	; 0x54
 8008924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008926:	602f      	str	r7, [r5, #0]
 8008928:	2900      	cmp	r1, #0
 800892a:	d0ca      	beq.n	80088c2 <__sflush_r+0x1a>
 800892c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008930:	4299      	cmp	r1, r3
 8008932:	d002      	beq.n	800893a <__sflush_r+0x92>
 8008934:	4628      	mov	r0, r5
 8008936:	f000 fd7f 	bl	8009438 <_free_r>
 800893a:	2000      	movs	r0, #0
 800893c:	6360      	str	r0, [r4, #52]	; 0x34
 800893e:	e7c1      	b.n	80088c4 <__sflush_r+0x1c>
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	2301      	movs	r3, #1
 8008944:	4628      	mov	r0, r5
 8008946:	47b0      	blx	r6
 8008948:	1c41      	adds	r1, r0, #1
 800894a:	d1c7      	bne.n	80088dc <__sflush_r+0x34>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0c4      	beq.n	80088dc <__sflush_r+0x34>
 8008952:	2b1d      	cmp	r3, #29
 8008954:	d001      	beq.n	800895a <__sflush_r+0xb2>
 8008956:	2b16      	cmp	r3, #22
 8008958:	d101      	bne.n	800895e <__sflush_r+0xb6>
 800895a:	602f      	str	r7, [r5, #0]
 800895c:	e7b1      	b.n	80088c2 <__sflush_r+0x1a>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	e7ad      	b.n	80088c4 <__sflush_r+0x1c>
 8008968:	690f      	ldr	r7, [r1, #16]
 800896a:	2f00      	cmp	r7, #0
 800896c:	d0a9      	beq.n	80088c2 <__sflush_r+0x1a>
 800896e:	0793      	lsls	r3, r2, #30
 8008970:	680e      	ldr	r6, [r1, #0]
 8008972:	bf08      	it	eq
 8008974:	694b      	ldreq	r3, [r1, #20]
 8008976:	600f      	str	r7, [r1, #0]
 8008978:	bf18      	it	ne
 800897a:	2300      	movne	r3, #0
 800897c:	eba6 0807 	sub.w	r8, r6, r7
 8008980:	608b      	str	r3, [r1, #8]
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	dd9c      	ble.n	80088c2 <__sflush_r+0x1a>
 8008988:	6a21      	ldr	r1, [r4, #32]
 800898a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800898c:	4643      	mov	r3, r8
 800898e:	463a      	mov	r2, r7
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	2800      	cmp	r0, #0
 8008996:	dc06      	bgt.n	80089a6 <__sflush_r+0xfe>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e78e      	b.n	80088c4 <__sflush_r+0x1c>
 80089a6:	4407      	add	r7, r0
 80089a8:	eba8 0800 	sub.w	r8, r8, r0
 80089ac:	e7e9      	b.n	8008982 <__sflush_r+0xda>
 80089ae:	bf00      	nop
 80089b0:	20400001 	.word	0x20400001

080089b4 <_fflush_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	690b      	ldr	r3, [r1, #16]
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b913      	cbnz	r3, 80089c4 <_fflush_r+0x10>
 80089be:	2500      	movs	r5, #0
 80089c0:	4628      	mov	r0, r5
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	b118      	cbz	r0, 80089ce <_fflush_r+0x1a>
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	b90b      	cbnz	r3, 80089ce <_fflush_r+0x1a>
 80089ca:	f000 f887 	bl	8008adc <__sinit>
 80089ce:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <_fflush_r+0x6c>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d11b      	bne.n	8008a0c <_fflush_r+0x58>
 80089d4:	686c      	ldr	r4, [r5, #4]
 80089d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0ef      	beq.n	80089be <_fflush_r+0xa>
 80089de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e0:	07d0      	lsls	r0, r2, #31
 80089e2:	d404      	bmi.n	80089ee <_fflush_r+0x3a>
 80089e4:	0599      	lsls	r1, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_fflush_r+0x3a>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f000 f91a 	bl	8008c22 <__retarget_lock_acquire_recursive>
 80089ee:	4628      	mov	r0, r5
 80089f0:	4621      	mov	r1, r4
 80089f2:	f7ff ff59 	bl	80088a8 <__sflush_r>
 80089f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f8:	07da      	lsls	r2, r3, #31
 80089fa:	4605      	mov	r5, r0
 80089fc:	d4e0      	bmi.n	80089c0 <_fflush_r+0xc>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	d4dd      	bmi.n	80089c0 <_fflush_r+0xc>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f000 f90d 	bl	8008c24 <__retarget_lock_release_recursive>
 8008a0a:	e7d9      	b.n	80089c0 <_fflush_r+0xc>
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <_fflush_r+0x70>)
 8008a0e:	429c      	cmp	r4, r3
 8008a10:	d101      	bne.n	8008a16 <_fflush_r+0x62>
 8008a12:	68ac      	ldr	r4, [r5, #8]
 8008a14:	e7df      	b.n	80089d6 <_fflush_r+0x22>
 8008a16:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <_fflush_r+0x74>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	bf08      	it	eq
 8008a1c:	68ec      	ldreq	r4, [r5, #12]
 8008a1e:	e7da      	b.n	80089d6 <_fflush_r+0x22>
 8008a20:	08009c98 	.word	0x08009c98
 8008a24:	08009cb8 	.word	0x08009cb8
 8008a28:	08009c78 	.word	0x08009c78

08008a2c <std>:
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	4604      	mov	r4, r0
 8008a32:	e9c0 3300 	strd	r3, r3, [r0]
 8008a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a3a:	6083      	str	r3, [r0, #8]
 8008a3c:	8181      	strh	r1, [r0, #12]
 8008a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a40:	81c2      	strh	r2, [r0, #14]
 8008a42:	6183      	str	r3, [r0, #24]
 8008a44:	4619      	mov	r1, r3
 8008a46:	2208      	movs	r2, #8
 8008a48:	305c      	adds	r0, #92	; 0x5c
 8008a4a:	f7fe faf5 	bl	8007038 <memset>
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x38>)
 8008a50:	6263      	str	r3, [r4, #36]	; 0x24
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x3c>)
 8008a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <std+0x40>)
 8008a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <std+0x44>)
 8008a5c:	6224      	str	r4, [r4, #32]
 8008a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	bf00      	nop
 8008a64:	08009861 	.word	0x08009861
 8008a68:	08009883 	.word	0x08009883
 8008a6c:	080098bb 	.word	0x080098bb
 8008a70:	080098df 	.word	0x080098df

08008a74 <_cleanup_r>:
 8008a74:	4901      	ldr	r1, [pc, #4]	; (8008a7c <_cleanup_r+0x8>)
 8008a76:	f000 b8af 	b.w	8008bd8 <_fwalk_reent>
 8008a7a:	bf00      	nop
 8008a7c:	080089b5 	.word	0x080089b5

08008a80 <__sfmoreglue>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	1e4a      	subs	r2, r1, #1
 8008a84:	2568      	movs	r5, #104	; 0x68
 8008a86:	4355      	muls	r5, r2
 8008a88:	460e      	mov	r6, r1
 8008a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a8e:	f000 fd23 	bl	80094d8 <_malloc_r>
 8008a92:	4604      	mov	r4, r0
 8008a94:	b140      	cbz	r0, 8008aa8 <__sfmoreglue+0x28>
 8008a96:	2100      	movs	r1, #0
 8008a98:	e9c0 1600 	strd	r1, r6, [r0]
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	60a0      	str	r0, [r4, #8]
 8008aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aa4:	f7fe fac8 	bl	8007038 <memset>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}

08008aac <__sfp_lock_acquire>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__sfp_lock_acquire+0x8>)
 8008aae:	f000 b8b8 	b.w	8008c22 <__retarget_lock_acquire_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	2000037c 	.word	0x2000037c

08008ab8 <__sfp_lock_release>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	; (8008ac0 <__sfp_lock_release+0x8>)
 8008aba:	f000 b8b3 	b.w	8008c24 <__retarget_lock_release_recursive>
 8008abe:	bf00      	nop
 8008ac0:	2000037c 	.word	0x2000037c

08008ac4 <__sinit_lock_acquire>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__sinit_lock_acquire+0x8>)
 8008ac6:	f000 b8ac 	b.w	8008c22 <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	20000377 	.word	0x20000377

08008ad0 <__sinit_lock_release>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sinit_lock_release+0x8>)
 8008ad2:	f000 b8a7 	b.w	8008c24 <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	20000377 	.word	0x20000377

08008adc <__sinit>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	f7ff fff0 	bl	8008ac4 <__sinit_lock_acquire>
 8008ae4:	69a3      	ldr	r3, [r4, #24]
 8008ae6:	b11b      	cbz	r3, 8008af0 <__sinit+0x14>
 8008ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aec:	f7ff bff0 	b.w	8008ad0 <__sinit_lock_release>
 8008af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008af4:	6523      	str	r3, [r4, #80]	; 0x50
 8008af6:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <__sinit+0x68>)
 8008af8:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <__sinit+0x6c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	bf04      	itt	eq
 8008b02:	2301      	moveq	r3, #1
 8008b04:	61a3      	streq	r3, [r4, #24]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f820 	bl	8008b4c <__sfp>
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f81c 	bl	8008b4c <__sfp>
 8008b14:	60a0      	str	r0, [r4, #8]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f818 	bl	8008b4c <__sfp>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60e0      	str	r0, [r4, #12]
 8008b20:	2104      	movs	r1, #4
 8008b22:	6860      	ldr	r0, [r4, #4]
 8008b24:	f7ff ff82 	bl	8008a2c <std>
 8008b28:	68a0      	ldr	r0, [r4, #8]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	2109      	movs	r1, #9
 8008b2e:	f7ff ff7d 	bl	8008a2c <std>
 8008b32:	68e0      	ldr	r0, [r4, #12]
 8008b34:	2202      	movs	r2, #2
 8008b36:	2112      	movs	r1, #18
 8008b38:	f7ff ff78 	bl	8008a2c <std>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	61a3      	str	r3, [r4, #24]
 8008b40:	e7d2      	b.n	8008ae8 <__sinit+0xc>
 8008b42:	bf00      	nop
 8008b44:	08009bac 	.word	0x08009bac
 8008b48:	08008a75 	.word	0x08008a75

08008b4c <__sfp>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f7ff ffac 	bl	8008aac <__sfp_lock_acquire>
 8008b54:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <__sfp+0x84>)
 8008b56:	681e      	ldr	r6, [r3, #0]
 8008b58:	69b3      	ldr	r3, [r6, #24]
 8008b5a:	b913      	cbnz	r3, 8008b62 <__sfp+0x16>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ffbd 	bl	8008adc <__sinit>
 8008b62:	3648      	adds	r6, #72	; 0x48
 8008b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	d503      	bpl.n	8008b74 <__sfp+0x28>
 8008b6c:	6833      	ldr	r3, [r6, #0]
 8008b6e:	b30b      	cbz	r3, 8008bb4 <__sfp+0x68>
 8008b70:	6836      	ldr	r6, [r6, #0]
 8008b72:	e7f7      	b.n	8008b64 <__sfp+0x18>
 8008b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b78:	b9d5      	cbnz	r5, 8008bb0 <__sfp+0x64>
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <__sfp+0x88>)
 8008b7c:	60e3      	str	r3, [r4, #12]
 8008b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b82:	6665      	str	r5, [r4, #100]	; 0x64
 8008b84:	f000 f84c 	bl	8008c20 <__retarget_lock_init_recursive>
 8008b88:	f7ff ff96 	bl	8008ab8 <__sfp_lock_release>
 8008b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b94:	6025      	str	r5, [r4, #0]
 8008b96:	61a5      	str	r5, [r4, #24]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ba0:	f7fe fa4a 	bl	8007038 <memset>
 8008ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bac:	4620      	mov	r0, r4
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb0:	3468      	adds	r4, #104	; 0x68
 8008bb2:	e7d9      	b.n	8008b68 <__sfp+0x1c>
 8008bb4:	2104      	movs	r1, #4
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f7ff ff62 	bl	8008a80 <__sfmoreglue>
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	6030      	str	r0, [r6, #0]
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1d5      	bne.n	8008b70 <__sfp+0x24>
 8008bc4:	f7ff ff78 	bl	8008ab8 <__sfp_lock_release>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	e7ee      	b.n	8008bac <__sfp+0x60>
 8008bce:	bf00      	nop
 8008bd0:	08009bac 	.word	0x08009bac
 8008bd4:	ffff0001 	.word	0xffff0001

08008bd8 <_fwalk_reent>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	4606      	mov	r6, r0
 8008bde:	4688      	mov	r8, r1
 8008be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008be4:	2700      	movs	r7, #0
 8008be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bea:	f1b9 0901 	subs.w	r9, r9, #1
 8008bee:	d505      	bpl.n	8008bfc <_fwalk_reent+0x24>
 8008bf0:	6824      	ldr	r4, [r4, #0]
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	d1f7      	bne.n	8008be6 <_fwalk_reent+0xe>
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d907      	bls.n	8008c12 <_fwalk_reent+0x3a>
 8008c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c06:	3301      	adds	r3, #1
 8008c08:	d003      	beq.n	8008c12 <_fwalk_reent+0x3a>
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	47c0      	blx	r8
 8008c10:	4307      	orrs	r7, r0
 8008c12:	3568      	adds	r5, #104	; 0x68
 8008c14:	e7e9      	b.n	8008bea <_fwalk_reent+0x12>
	...

08008c18 <_localeconv_r>:
 8008c18:	4800      	ldr	r0, [pc, #0]	; (8008c1c <_localeconv_r+0x4>)
 8008c1a:	4770      	bx	lr
 8008c1c:	20000160 	.word	0x20000160

08008c20 <__retarget_lock_init_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__retarget_lock_acquire_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <__retarget_lock_release_recursive>:
 8008c24:	4770      	bx	lr

08008c26 <__swhatbuf_r>:
 8008c26:	b570      	push	{r4, r5, r6, lr}
 8008c28:	460e      	mov	r6, r1
 8008c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	b096      	sub	sp, #88	; 0x58
 8008c32:	4614      	mov	r4, r2
 8008c34:	461d      	mov	r5, r3
 8008c36:	da07      	bge.n	8008c48 <__swhatbuf_r+0x22>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	602b      	str	r3, [r5, #0]
 8008c3c:	89b3      	ldrh	r3, [r6, #12]
 8008c3e:	061a      	lsls	r2, r3, #24
 8008c40:	d410      	bmi.n	8008c64 <__swhatbuf_r+0x3e>
 8008c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c46:	e00e      	b.n	8008c66 <__swhatbuf_r+0x40>
 8008c48:	466a      	mov	r2, sp
 8008c4a:	f000 fe9f 	bl	800998c <_fstat_r>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	dbf2      	blt.n	8008c38 <__swhatbuf_r+0x12>
 8008c52:	9a01      	ldr	r2, [sp, #4]
 8008c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c5c:	425a      	negs	r2, r3
 8008c5e:	415a      	adcs	r2, r3
 8008c60:	602a      	str	r2, [r5, #0]
 8008c62:	e7ee      	b.n	8008c42 <__swhatbuf_r+0x1c>
 8008c64:	2340      	movs	r3, #64	; 0x40
 8008c66:	2000      	movs	r0, #0
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	b016      	add	sp, #88	; 0x58
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c70 <__smakebuf_r>:
 8008c70:	898b      	ldrh	r3, [r1, #12]
 8008c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c74:	079d      	lsls	r5, r3, #30
 8008c76:	4606      	mov	r6, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	d507      	bpl.n	8008c8c <__smakebuf_r+0x1c>
 8008c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	6123      	str	r3, [r4, #16]
 8008c84:	2301      	movs	r3, #1
 8008c86:	6163      	str	r3, [r4, #20]
 8008c88:	b002      	add	sp, #8
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	ab01      	add	r3, sp, #4
 8008c8e:	466a      	mov	r2, sp
 8008c90:	f7ff ffc9 	bl	8008c26 <__swhatbuf_r>
 8008c94:	9900      	ldr	r1, [sp, #0]
 8008c96:	4605      	mov	r5, r0
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 fc1d 	bl	80094d8 <_malloc_r>
 8008c9e:	b948      	cbnz	r0, 8008cb4 <__smakebuf_r+0x44>
 8008ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca4:	059a      	lsls	r2, r3, #22
 8008ca6:	d4ef      	bmi.n	8008c88 <__smakebuf_r+0x18>
 8008ca8:	f023 0303 	bic.w	r3, r3, #3
 8008cac:	f043 0302 	orr.w	r3, r3, #2
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	e7e3      	b.n	8008c7c <__smakebuf_r+0xc>
 8008cb4:	4b0d      	ldr	r3, [pc, #52]	; (8008cec <__smakebuf_r+0x7c>)
 8008cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	6020      	str	r0, [r4, #0]
 8008cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	9b00      	ldr	r3, [sp, #0]
 8008cc4:	6163      	str	r3, [r4, #20]
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	6120      	str	r0, [r4, #16]
 8008cca:	b15b      	cbz	r3, 8008ce4 <__smakebuf_r+0x74>
 8008ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f000 fe6d 	bl	80099b0 <_isatty_r>
 8008cd6:	b128      	cbz	r0, 8008ce4 <__smakebuf_r+0x74>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	f043 0301 	orr.w	r3, r3, #1
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	89a0      	ldrh	r0, [r4, #12]
 8008ce6:	4305      	orrs	r5, r0
 8008ce8:	81a5      	strh	r5, [r4, #12]
 8008cea:	e7cd      	b.n	8008c88 <__smakebuf_r+0x18>
 8008cec:	08008a75 	.word	0x08008a75

08008cf0 <malloc>:
 8008cf0:	4b02      	ldr	r3, [pc, #8]	; (8008cfc <malloc+0xc>)
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	f000 bbef 	b.w	80094d8 <_malloc_r>
 8008cfa:	bf00      	nop
 8008cfc:	2000000c 	.word	0x2000000c

08008d00 <memcpy>:
 8008d00:	440a      	add	r2, r1
 8008d02:	4291      	cmp	r1, r2
 8008d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d08:	d100      	bne.n	8008d0c <memcpy+0xc>
 8008d0a:	4770      	bx	lr
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d16:	4291      	cmp	r1, r2
 8008d18:	d1f9      	bne.n	8008d0e <memcpy+0xe>
 8008d1a:	bd10      	pop	{r4, pc}

08008d1c <_Balloc>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	b976      	cbnz	r6, 8008d44 <_Balloc+0x28>
 8008d26:	2010      	movs	r0, #16
 8008d28:	f7ff ffe2 	bl	8008cf0 <malloc>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d30:	b920      	cbnz	r0, 8008d3c <_Balloc+0x20>
 8008d32:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <_Balloc+0x78>)
 8008d34:	4818      	ldr	r0, [pc, #96]	; (8008d98 <_Balloc+0x7c>)
 8008d36:	2166      	movs	r1, #102	; 0x66
 8008d38:	f000 fde8 	bl	800990c <__assert_func>
 8008d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d40:	6006      	str	r6, [r0, #0]
 8008d42:	60c6      	str	r6, [r0, #12]
 8008d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d46:	68f3      	ldr	r3, [r6, #12]
 8008d48:	b183      	cbz	r3, 8008d6c <_Balloc+0x50>
 8008d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d52:	b9b8      	cbnz	r0, 8008d84 <_Balloc+0x68>
 8008d54:	2101      	movs	r1, #1
 8008d56:	fa01 f605 	lsl.w	r6, r1, r5
 8008d5a:	1d72      	adds	r2, r6, #5
 8008d5c:	0092      	lsls	r2, r2, #2
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fb5a 	bl	8009418 <_calloc_r>
 8008d64:	b160      	cbz	r0, 8008d80 <_Balloc+0x64>
 8008d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d6a:	e00e      	b.n	8008d8a <_Balloc+0x6e>
 8008d6c:	2221      	movs	r2, #33	; 0x21
 8008d6e:	2104      	movs	r1, #4
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fb51 	bl	8009418 <_calloc_r>
 8008d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d78:	60f0      	str	r0, [r6, #12]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e4      	bne.n	8008d4a <_Balloc+0x2e>
 8008d80:	2000      	movs	r0, #0
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	6802      	ldr	r2, [r0, #0]
 8008d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d90:	e7f7      	b.n	8008d82 <_Balloc+0x66>
 8008d92:	bf00      	nop
 8008d94:	08009bf1 	.word	0x08009bf1
 8008d98:	08009cd8 	.word	0x08009cd8

08008d9c <_Bfree>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	b976      	cbnz	r6, 8008dc4 <_Bfree+0x28>
 8008da6:	2010      	movs	r0, #16
 8008da8:	f7ff ffa2 	bl	8008cf0 <malloc>
 8008dac:	4602      	mov	r2, r0
 8008dae:	6268      	str	r0, [r5, #36]	; 0x24
 8008db0:	b920      	cbnz	r0, 8008dbc <_Bfree+0x20>
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <_Bfree+0x3c>)
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <_Bfree+0x40>)
 8008db6:	218a      	movs	r1, #138	; 0x8a
 8008db8:	f000 fda8 	bl	800990c <__assert_func>
 8008dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc0:	6006      	str	r6, [r0, #0]
 8008dc2:	60c6      	str	r6, [r0, #12]
 8008dc4:	b13c      	cbz	r4, 8008dd6 <_Bfree+0x3a>
 8008dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dc8:	6862      	ldr	r2, [r4, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dd0:	6021      	str	r1, [r4, #0]
 8008dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	08009bf1 	.word	0x08009bf1
 8008ddc:	08009cd8 	.word	0x08009cd8

08008de0 <__multadd>:
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de4:	690e      	ldr	r6, [r1, #16]
 8008de6:	4607      	mov	r7, r0
 8008de8:	4698      	mov	r8, r3
 8008dea:	460c      	mov	r4, r1
 8008dec:	f101 0014 	add.w	r0, r1, #20
 8008df0:	2300      	movs	r3, #0
 8008df2:	6805      	ldr	r5, [r0, #0]
 8008df4:	b2a9      	uxth	r1, r5
 8008df6:	fb02 8101 	mla	r1, r2, r1, r8
 8008dfa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008dfe:	0c2d      	lsrs	r5, r5, #16
 8008e00:	fb02 c505 	mla	r5, r2, r5, ip
 8008e04:	b289      	uxth	r1, r1
 8008e06:	3301      	adds	r3, #1
 8008e08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e0c:	429e      	cmp	r6, r3
 8008e0e:	f840 1b04 	str.w	r1, [r0], #4
 8008e12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e16:	dcec      	bgt.n	8008df2 <__multadd+0x12>
 8008e18:	f1b8 0f00 	cmp.w	r8, #0
 8008e1c:	d022      	beq.n	8008e64 <__multadd+0x84>
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	42b3      	cmp	r3, r6
 8008e22:	dc19      	bgt.n	8008e58 <__multadd+0x78>
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4638      	mov	r0, r7
 8008e28:	3101      	adds	r1, #1
 8008e2a:	f7ff ff77 	bl	8008d1c <_Balloc>
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b928      	cbnz	r0, 8008e3e <__multadd+0x5e>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <__multadd+0x8c>)
 8008e36:	480e      	ldr	r0, [pc, #56]	; (8008e70 <__multadd+0x90>)
 8008e38:	21b5      	movs	r1, #181	; 0xb5
 8008e3a:	f000 fd67 	bl	800990c <__assert_func>
 8008e3e:	6922      	ldr	r2, [r4, #16]
 8008e40:	3202      	adds	r2, #2
 8008e42:	f104 010c 	add.w	r1, r4, #12
 8008e46:	0092      	lsls	r2, r2, #2
 8008e48:	300c      	adds	r0, #12
 8008e4a:	f7ff ff59 	bl	8008d00 <memcpy>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ffa3 	bl	8008d9c <_Bfree>
 8008e56:	462c      	mov	r4, r5
 8008e58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e62:	6126      	str	r6, [r4, #16]
 8008e64:	4620      	mov	r0, r4
 8008e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6a:	bf00      	nop
 8008e6c:	08009c67 	.word	0x08009c67
 8008e70:	08009cd8 	.word	0x08009cd8

08008e74 <__hi0bits>:
 8008e74:	0c03      	lsrs	r3, r0, #16
 8008e76:	041b      	lsls	r3, r3, #16
 8008e78:	b9d3      	cbnz	r3, 8008eb0 <__hi0bits+0x3c>
 8008e7a:	0400      	lsls	r0, r0, #16
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e82:	bf04      	itt	eq
 8008e84:	0200      	lsleq	r0, r0, #8
 8008e86:	3308      	addeq	r3, #8
 8008e88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e8c:	bf04      	itt	eq
 8008e8e:	0100      	lsleq	r0, r0, #4
 8008e90:	3304      	addeq	r3, #4
 8008e92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e96:	bf04      	itt	eq
 8008e98:	0080      	lsleq	r0, r0, #2
 8008e9a:	3302      	addeq	r3, #2
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	db05      	blt.n	8008eac <__hi0bits+0x38>
 8008ea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ea4:	f103 0301 	add.w	r3, r3, #1
 8008ea8:	bf08      	it	eq
 8008eaa:	2320      	moveq	r3, #32
 8008eac:	4618      	mov	r0, r3
 8008eae:	4770      	bx	lr
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e7e4      	b.n	8008e7e <__hi0bits+0xa>

08008eb4 <__lo0bits>:
 8008eb4:	6803      	ldr	r3, [r0, #0]
 8008eb6:	f013 0207 	ands.w	r2, r3, #7
 8008eba:	4601      	mov	r1, r0
 8008ebc:	d00b      	beq.n	8008ed6 <__lo0bits+0x22>
 8008ebe:	07da      	lsls	r2, r3, #31
 8008ec0:	d424      	bmi.n	8008f0c <__lo0bits+0x58>
 8008ec2:	0798      	lsls	r0, r3, #30
 8008ec4:	bf49      	itett	mi
 8008ec6:	085b      	lsrmi	r3, r3, #1
 8008ec8:	089b      	lsrpl	r3, r3, #2
 8008eca:	2001      	movmi	r0, #1
 8008ecc:	600b      	strmi	r3, [r1, #0]
 8008ece:	bf5c      	itt	pl
 8008ed0:	600b      	strpl	r3, [r1, #0]
 8008ed2:	2002      	movpl	r0, #2
 8008ed4:	4770      	bx	lr
 8008ed6:	b298      	uxth	r0, r3
 8008ed8:	b9b0      	cbnz	r0, 8008f08 <__lo0bits+0x54>
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	2010      	movs	r0, #16
 8008ede:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ee2:	bf04      	itt	eq
 8008ee4:	0a1b      	lsreq	r3, r3, #8
 8008ee6:	3008      	addeq	r0, #8
 8008ee8:	071a      	lsls	r2, r3, #28
 8008eea:	bf04      	itt	eq
 8008eec:	091b      	lsreq	r3, r3, #4
 8008eee:	3004      	addeq	r0, #4
 8008ef0:	079a      	lsls	r2, r3, #30
 8008ef2:	bf04      	itt	eq
 8008ef4:	089b      	lsreq	r3, r3, #2
 8008ef6:	3002      	addeq	r0, #2
 8008ef8:	07da      	lsls	r2, r3, #31
 8008efa:	d403      	bmi.n	8008f04 <__lo0bits+0x50>
 8008efc:	085b      	lsrs	r3, r3, #1
 8008efe:	f100 0001 	add.w	r0, r0, #1
 8008f02:	d005      	beq.n	8008f10 <__lo0bits+0x5c>
 8008f04:	600b      	str	r3, [r1, #0]
 8008f06:	4770      	bx	lr
 8008f08:	4610      	mov	r0, r2
 8008f0a:	e7e8      	b.n	8008ede <__lo0bits+0x2a>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	4770      	bx	lr
 8008f10:	2020      	movs	r0, #32
 8008f12:	4770      	bx	lr

08008f14 <__i2b>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	460c      	mov	r4, r1
 8008f18:	2101      	movs	r1, #1
 8008f1a:	f7ff feff 	bl	8008d1c <_Balloc>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__i2b+0x1a>
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <__i2b+0x24>)
 8008f24:	4805      	ldr	r0, [pc, #20]	; (8008f3c <__i2b+0x28>)
 8008f26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f2a:	f000 fcef 	bl	800990c <__assert_func>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6144      	str	r4, [r0, #20]
 8008f32:	6103      	str	r3, [r0, #16]
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	08009c67 	.word	0x08009c67
 8008f3c:	08009cd8 	.word	0x08009cd8

08008f40 <__multiply>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	4614      	mov	r4, r2
 8008f46:	690a      	ldr	r2, [r1, #16]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	bfb8      	it	lt
 8008f4e:	460b      	movlt	r3, r1
 8008f50:	460d      	mov	r5, r1
 8008f52:	bfbc      	itt	lt
 8008f54:	4625      	movlt	r5, r4
 8008f56:	461c      	movlt	r4, r3
 8008f58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f60:	68ab      	ldr	r3, [r5, #8]
 8008f62:	6869      	ldr	r1, [r5, #4]
 8008f64:	eb0a 0709 	add.w	r7, sl, r9
 8008f68:	42bb      	cmp	r3, r7
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	bfb8      	it	lt
 8008f6e:	3101      	addlt	r1, #1
 8008f70:	f7ff fed4 	bl	8008d1c <_Balloc>
 8008f74:	b930      	cbnz	r0, 8008f84 <__multiply+0x44>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b42      	ldr	r3, [pc, #264]	; (8009084 <__multiply+0x144>)
 8008f7a:	4843      	ldr	r0, [pc, #268]	; (8009088 <__multiply+0x148>)
 8008f7c:	f240 115d 	movw	r1, #349	; 0x15d
 8008f80:	f000 fcc4 	bl	800990c <__assert_func>
 8008f84:	f100 0614 	add.w	r6, r0, #20
 8008f88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f8c:	4633      	mov	r3, r6
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4543      	cmp	r3, r8
 8008f92:	d31e      	bcc.n	8008fd2 <__multiply+0x92>
 8008f94:	f105 0c14 	add.w	ip, r5, #20
 8008f98:	f104 0314 	add.w	r3, r4, #20
 8008f9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fa0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fa4:	9202      	str	r2, [sp, #8]
 8008fa6:	ebac 0205 	sub.w	r2, ip, r5
 8008faa:	3a15      	subs	r2, #21
 8008fac:	f022 0203 	bic.w	r2, r2, #3
 8008fb0:	3204      	adds	r2, #4
 8008fb2:	f105 0115 	add.w	r1, r5, #21
 8008fb6:	458c      	cmp	ip, r1
 8008fb8:	bf38      	it	cc
 8008fba:	2204      	movcc	r2, #4
 8008fbc:	9201      	str	r2, [sp, #4]
 8008fbe:	9a02      	ldr	r2, [sp, #8]
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d808      	bhi.n	8008fd8 <__multiply+0x98>
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	dc55      	bgt.n	8009076 <__multiply+0x136>
 8008fca:	6107      	str	r7, [r0, #16]
 8008fcc:	b005      	add	sp, #20
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	f843 2b04 	str.w	r2, [r3], #4
 8008fd6:	e7db      	b.n	8008f90 <__multiply+0x50>
 8008fd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fdc:	f1ba 0f00 	cmp.w	sl, #0
 8008fe0:	d020      	beq.n	8009024 <__multiply+0xe4>
 8008fe2:	f105 0e14 	add.w	lr, r5, #20
 8008fe6:	46b1      	mov	r9, r6
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008fee:	f8d9 b000 	ldr.w	fp, [r9]
 8008ff2:	b2a1      	uxth	r1, r4
 8008ff4:	fa1f fb8b 	uxth.w	fp, fp
 8008ff8:	fb0a b101 	mla	r1, sl, r1, fp
 8008ffc:	4411      	add	r1, r2
 8008ffe:	f8d9 2000 	ldr.w	r2, [r9]
 8009002:	0c24      	lsrs	r4, r4, #16
 8009004:	0c12      	lsrs	r2, r2, #16
 8009006:	fb0a 2404 	mla	r4, sl, r4, r2
 800900a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800900e:	b289      	uxth	r1, r1
 8009010:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009014:	45f4      	cmp	ip, lr
 8009016:	f849 1b04 	str.w	r1, [r9], #4
 800901a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800901e:	d8e4      	bhi.n	8008fea <__multiply+0xaa>
 8009020:	9901      	ldr	r1, [sp, #4]
 8009022:	5072      	str	r2, [r6, r1]
 8009024:	9a03      	ldr	r2, [sp, #12]
 8009026:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800902a:	3304      	adds	r3, #4
 800902c:	f1b9 0f00 	cmp.w	r9, #0
 8009030:	d01f      	beq.n	8009072 <__multiply+0x132>
 8009032:	6834      	ldr	r4, [r6, #0]
 8009034:	f105 0114 	add.w	r1, r5, #20
 8009038:	46b6      	mov	lr, r6
 800903a:	f04f 0a00 	mov.w	sl, #0
 800903e:	880a      	ldrh	r2, [r1, #0]
 8009040:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009044:	fb09 b202 	mla	r2, r9, r2, fp
 8009048:	4492      	add	sl, r2
 800904a:	b2a4      	uxth	r4, r4
 800904c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009050:	f84e 4b04 	str.w	r4, [lr], #4
 8009054:	f851 4b04 	ldr.w	r4, [r1], #4
 8009058:	f8be 2000 	ldrh.w	r2, [lr]
 800905c:	0c24      	lsrs	r4, r4, #16
 800905e:	fb09 2404 	mla	r4, r9, r4, r2
 8009062:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009066:	458c      	cmp	ip, r1
 8009068:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800906c:	d8e7      	bhi.n	800903e <__multiply+0xfe>
 800906e:	9a01      	ldr	r2, [sp, #4]
 8009070:	50b4      	str	r4, [r6, r2]
 8009072:	3604      	adds	r6, #4
 8009074:	e7a3      	b.n	8008fbe <__multiply+0x7e>
 8009076:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1a5      	bne.n	8008fca <__multiply+0x8a>
 800907e:	3f01      	subs	r7, #1
 8009080:	e7a1      	b.n	8008fc6 <__multiply+0x86>
 8009082:	bf00      	nop
 8009084:	08009c67 	.word	0x08009c67
 8009088:	08009cd8 	.word	0x08009cd8

0800908c <__pow5mult>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4615      	mov	r5, r2
 8009092:	f012 0203 	ands.w	r2, r2, #3
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	d007      	beq.n	80090ac <__pow5mult+0x20>
 800909c:	4c25      	ldr	r4, [pc, #148]	; (8009134 <__pow5mult+0xa8>)
 800909e:	3a01      	subs	r2, #1
 80090a0:	2300      	movs	r3, #0
 80090a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090a6:	f7ff fe9b 	bl	8008de0 <__multadd>
 80090aa:	4607      	mov	r7, r0
 80090ac:	10ad      	asrs	r5, r5, #2
 80090ae:	d03d      	beq.n	800912c <__pow5mult+0xa0>
 80090b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090b2:	b97c      	cbnz	r4, 80090d4 <__pow5mult+0x48>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f7ff fe1b 	bl	8008cf0 <malloc>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6270      	str	r0, [r6, #36]	; 0x24
 80090be:	b928      	cbnz	r0, 80090cc <__pow5mult+0x40>
 80090c0:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <__pow5mult+0xac>)
 80090c2:	481e      	ldr	r0, [pc, #120]	; (800913c <__pow5mult+0xb0>)
 80090c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090c8:	f000 fc20 	bl	800990c <__assert_func>
 80090cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d0:	6004      	str	r4, [r0, #0]
 80090d2:	60c4      	str	r4, [r0, #12]
 80090d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090dc:	b94c      	cbnz	r4, 80090f2 <__pow5mult+0x66>
 80090de:	f240 2171 	movw	r1, #625	; 0x271
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ff16 	bl	8008f14 <__i2b>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ee:	4604      	mov	r4, r0
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	f04f 0900 	mov.w	r9, #0
 80090f6:	07eb      	lsls	r3, r5, #31
 80090f8:	d50a      	bpl.n	8009110 <__pow5mult+0x84>
 80090fa:	4639      	mov	r1, r7
 80090fc:	4622      	mov	r2, r4
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff1e 	bl	8008f40 <__multiply>
 8009104:	4639      	mov	r1, r7
 8009106:	4680      	mov	r8, r0
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff fe47 	bl	8008d9c <_Bfree>
 800910e:	4647      	mov	r7, r8
 8009110:	106d      	asrs	r5, r5, #1
 8009112:	d00b      	beq.n	800912c <__pow5mult+0xa0>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	b938      	cbnz	r0, 8009128 <__pow5mult+0x9c>
 8009118:	4622      	mov	r2, r4
 800911a:	4621      	mov	r1, r4
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ff0f 	bl	8008f40 <__multiply>
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	f8c0 9000 	str.w	r9, [r0]
 8009128:	4604      	mov	r4, r0
 800912a:	e7e4      	b.n	80090f6 <__pow5mult+0x6a>
 800912c:	4638      	mov	r0, r7
 800912e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009132:	bf00      	nop
 8009134:	08009e28 	.word	0x08009e28
 8009138:	08009bf1 	.word	0x08009bf1
 800913c:	08009cd8 	.word	0x08009cd8

08009140 <__lshift>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	460c      	mov	r4, r1
 8009146:	6849      	ldr	r1, [r1, #4]
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	4607      	mov	r7, r0
 8009152:	4691      	mov	r9, r2
 8009154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009158:	f108 0601 	add.w	r6, r8, #1
 800915c:	42b3      	cmp	r3, r6
 800915e:	db0b      	blt.n	8009178 <__lshift+0x38>
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff fddb 	bl	8008d1c <_Balloc>
 8009166:	4605      	mov	r5, r0
 8009168:	b948      	cbnz	r0, 800917e <__lshift+0x3e>
 800916a:	4602      	mov	r2, r0
 800916c:	4b28      	ldr	r3, [pc, #160]	; (8009210 <__lshift+0xd0>)
 800916e:	4829      	ldr	r0, [pc, #164]	; (8009214 <__lshift+0xd4>)
 8009170:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009174:	f000 fbca 	bl	800990c <__assert_func>
 8009178:	3101      	adds	r1, #1
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	e7ee      	b.n	800915c <__lshift+0x1c>
 800917e:	2300      	movs	r3, #0
 8009180:	f100 0114 	add.w	r1, r0, #20
 8009184:	f100 0210 	add.w	r2, r0, #16
 8009188:	4618      	mov	r0, r3
 800918a:	4553      	cmp	r3, sl
 800918c:	db33      	blt.n	80091f6 <__lshift+0xb6>
 800918e:	6920      	ldr	r0, [r4, #16]
 8009190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009194:	f104 0314 	add.w	r3, r4, #20
 8009198:	f019 091f 	ands.w	r9, r9, #31
 800919c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091a4:	d02b      	beq.n	80091fe <__lshift+0xbe>
 80091a6:	f1c9 0e20 	rsb	lr, r9, #32
 80091aa:	468a      	mov	sl, r1
 80091ac:	2200      	movs	r2, #0
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	fa00 f009 	lsl.w	r0, r0, r9
 80091b4:	4302      	orrs	r2, r0
 80091b6:	f84a 2b04 	str.w	r2, [sl], #4
 80091ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80091be:	459c      	cmp	ip, r3
 80091c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091c4:	d8f3      	bhi.n	80091ae <__lshift+0x6e>
 80091c6:	ebac 0304 	sub.w	r3, ip, r4
 80091ca:	3b15      	subs	r3, #21
 80091cc:	f023 0303 	bic.w	r3, r3, #3
 80091d0:	3304      	adds	r3, #4
 80091d2:	f104 0015 	add.w	r0, r4, #21
 80091d6:	4584      	cmp	ip, r0
 80091d8:	bf38      	it	cc
 80091da:	2304      	movcc	r3, #4
 80091dc:	50ca      	str	r2, [r1, r3]
 80091de:	b10a      	cbz	r2, 80091e4 <__lshift+0xa4>
 80091e0:	f108 0602 	add.w	r6, r8, #2
 80091e4:	3e01      	subs	r6, #1
 80091e6:	4638      	mov	r0, r7
 80091e8:	612e      	str	r6, [r5, #16]
 80091ea:	4621      	mov	r1, r4
 80091ec:	f7ff fdd6 	bl	8008d9c <_Bfree>
 80091f0:	4628      	mov	r0, r5
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091fa:	3301      	adds	r3, #1
 80091fc:	e7c5      	b.n	800918a <__lshift+0x4a>
 80091fe:	3904      	subs	r1, #4
 8009200:	f853 2b04 	ldr.w	r2, [r3], #4
 8009204:	f841 2f04 	str.w	r2, [r1, #4]!
 8009208:	459c      	cmp	ip, r3
 800920a:	d8f9      	bhi.n	8009200 <__lshift+0xc0>
 800920c:	e7ea      	b.n	80091e4 <__lshift+0xa4>
 800920e:	bf00      	nop
 8009210:	08009c67 	.word	0x08009c67
 8009214:	08009cd8 	.word	0x08009cd8

08009218 <__mcmp>:
 8009218:	b530      	push	{r4, r5, lr}
 800921a:	6902      	ldr	r2, [r0, #16]
 800921c:	690c      	ldr	r4, [r1, #16]
 800921e:	1b12      	subs	r2, r2, r4
 8009220:	d10e      	bne.n	8009240 <__mcmp+0x28>
 8009222:	f100 0314 	add.w	r3, r0, #20
 8009226:	3114      	adds	r1, #20
 8009228:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800922c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009230:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009234:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009238:	42a5      	cmp	r5, r4
 800923a:	d003      	beq.n	8009244 <__mcmp+0x2c>
 800923c:	d305      	bcc.n	800924a <__mcmp+0x32>
 800923e:	2201      	movs	r2, #1
 8009240:	4610      	mov	r0, r2
 8009242:	bd30      	pop	{r4, r5, pc}
 8009244:	4283      	cmp	r3, r0
 8009246:	d3f3      	bcc.n	8009230 <__mcmp+0x18>
 8009248:	e7fa      	b.n	8009240 <__mcmp+0x28>
 800924a:	f04f 32ff 	mov.w	r2, #4294967295
 800924e:	e7f7      	b.n	8009240 <__mcmp+0x28>

08009250 <__mdiff>:
 8009250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	4606      	mov	r6, r0
 8009258:	4611      	mov	r1, r2
 800925a:	4620      	mov	r0, r4
 800925c:	4617      	mov	r7, r2
 800925e:	f7ff ffdb 	bl	8009218 <__mcmp>
 8009262:	1e05      	subs	r5, r0, #0
 8009264:	d110      	bne.n	8009288 <__mdiff+0x38>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff fd57 	bl	8008d1c <_Balloc>
 800926e:	b930      	cbnz	r0, 800927e <__mdiff+0x2e>
 8009270:	4b39      	ldr	r3, [pc, #228]	; (8009358 <__mdiff+0x108>)
 8009272:	4602      	mov	r2, r0
 8009274:	f240 2132 	movw	r1, #562	; 0x232
 8009278:	4838      	ldr	r0, [pc, #224]	; (800935c <__mdiff+0x10c>)
 800927a:	f000 fb47 	bl	800990c <__assert_func>
 800927e:	2301      	movs	r3, #1
 8009280:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	bfa4      	itt	ge
 800928a:	463b      	movge	r3, r7
 800928c:	4627      	movge	r7, r4
 800928e:	4630      	mov	r0, r6
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	bfa6      	itte	ge
 8009294:	461c      	movge	r4, r3
 8009296:	2500      	movge	r5, #0
 8009298:	2501      	movlt	r5, #1
 800929a:	f7ff fd3f 	bl	8008d1c <_Balloc>
 800929e:	b920      	cbnz	r0, 80092aa <__mdiff+0x5a>
 80092a0:	4b2d      	ldr	r3, [pc, #180]	; (8009358 <__mdiff+0x108>)
 80092a2:	4602      	mov	r2, r0
 80092a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092a8:	e7e6      	b.n	8009278 <__mdiff+0x28>
 80092aa:	693e      	ldr	r6, [r7, #16]
 80092ac:	60c5      	str	r5, [r0, #12]
 80092ae:	6925      	ldr	r5, [r4, #16]
 80092b0:	f107 0114 	add.w	r1, r7, #20
 80092b4:	f104 0914 	add.w	r9, r4, #20
 80092b8:	f100 0e14 	add.w	lr, r0, #20
 80092bc:	f107 0210 	add.w	r2, r7, #16
 80092c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092c8:	46f2      	mov	sl, lr
 80092ca:	2700      	movs	r7, #0
 80092cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80092d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092d4:	fa1f f883 	uxth.w	r8, r3
 80092d8:	fa17 f78b 	uxtah	r7, r7, fp
 80092dc:	0c1b      	lsrs	r3, r3, #16
 80092de:	eba7 0808 	sub.w	r8, r7, r8
 80092e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092ea:	fa1f f888 	uxth.w	r8, r8
 80092ee:	141f      	asrs	r7, r3, #16
 80092f0:	454d      	cmp	r5, r9
 80092f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092f6:	f84a 3b04 	str.w	r3, [sl], #4
 80092fa:	d8e7      	bhi.n	80092cc <__mdiff+0x7c>
 80092fc:	1b2b      	subs	r3, r5, r4
 80092fe:	3b15      	subs	r3, #21
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	3304      	adds	r3, #4
 8009306:	3415      	adds	r4, #21
 8009308:	42a5      	cmp	r5, r4
 800930a:	bf38      	it	cc
 800930c:	2304      	movcc	r3, #4
 800930e:	4419      	add	r1, r3
 8009310:	4473      	add	r3, lr
 8009312:	469e      	mov	lr, r3
 8009314:	460d      	mov	r5, r1
 8009316:	4565      	cmp	r5, ip
 8009318:	d30e      	bcc.n	8009338 <__mdiff+0xe8>
 800931a:	f10c 0203 	add.w	r2, ip, #3
 800931e:	1a52      	subs	r2, r2, r1
 8009320:	f022 0203 	bic.w	r2, r2, #3
 8009324:	3903      	subs	r1, #3
 8009326:	458c      	cmp	ip, r1
 8009328:	bf38      	it	cc
 800932a:	2200      	movcc	r2, #0
 800932c:	441a      	add	r2, r3
 800932e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009332:	b17b      	cbz	r3, 8009354 <__mdiff+0x104>
 8009334:	6106      	str	r6, [r0, #16]
 8009336:	e7a5      	b.n	8009284 <__mdiff+0x34>
 8009338:	f855 8b04 	ldr.w	r8, [r5], #4
 800933c:	fa17 f488 	uxtah	r4, r7, r8
 8009340:	1422      	asrs	r2, r4, #16
 8009342:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009346:	b2a4      	uxth	r4, r4
 8009348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800934c:	f84e 4b04 	str.w	r4, [lr], #4
 8009350:	1417      	asrs	r7, r2, #16
 8009352:	e7e0      	b.n	8009316 <__mdiff+0xc6>
 8009354:	3e01      	subs	r6, #1
 8009356:	e7ea      	b.n	800932e <__mdiff+0xde>
 8009358:	08009c67 	.word	0x08009c67
 800935c:	08009cd8 	.word	0x08009cd8

08009360 <__d2b>:
 8009360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4689      	mov	r9, r1
 8009366:	2101      	movs	r1, #1
 8009368:	ec57 6b10 	vmov	r6, r7, d0
 800936c:	4690      	mov	r8, r2
 800936e:	f7ff fcd5 	bl	8008d1c <_Balloc>
 8009372:	4604      	mov	r4, r0
 8009374:	b930      	cbnz	r0, 8009384 <__d2b+0x24>
 8009376:	4602      	mov	r2, r0
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <__d2b+0xb0>)
 800937a:	4826      	ldr	r0, [pc, #152]	; (8009414 <__d2b+0xb4>)
 800937c:	f240 310a 	movw	r1, #778	; 0x30a
 8009380:	f000 fac4 	bl	800990c <__assert_func>
 8009384:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800938c:	bb35      	cbnz	r5, 80093dc <__d2b+0x7c>
 800938e:	2e00      	cmp	r6, #0
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	d028      	beq.n	80093e6 <__d2b+0x86>
 8009394:	4668      	mov	r0, sp
 8009396:	9600      	str	r6, [sp, #0]
 8009398:	f7ff fd8c 	bl	8008eb4 <__lo0bits>
 800939c:	9900      	ldr	r1, [sp, #0]
 800939e:	b300      	cbz	r0, 80093e2 <__d2b+0x82>
 80093a0:	9a01      	ldr	r2, [sp, #4]
 80093a2:	f1c0 0320 	rsb	r3, r0, #32
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	430b      	orrs	r3, r1
 80093ac:	40c2      	lsrs	r2, r0
 80093ae:	6163      	str	r3, [r4, #20]
 80093b0:	9201      	str	r2, [sp, #4]
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	61a3      	str	r3, [r4, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bf14      	ite	ne
 80093ba:	2202      	movne	r2, #2
 80093bc:	2201      	moveq	r2, #1
 80093be:	6122      	str	r2, [r4, #16]
 80093c0:	b1d5      	cbz	r5, 80093f8 <__d2b+0x98>
 80093c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093c6:	4405      	add	r5, r0
 80093c8:	f8c9 5000 	str.w	r5, [r9]
 80093cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093d0:	f8c8 0000 	str.w	r0, [r8]
 80093d4:	4620      	mov	r0, r4
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e0:	e7d5      	b.n	800938e <__d2b+0x2e>
 80093e2:	6161      	str	r1, [r4, #20]
 80093e4:	e7e5      	b.n	80093b2 <__d2b+0x52>
 80093e6:	a801      	add	r0, sp, #4
 80093e8:	f7ff fd64 	bl	8008eb4 <__lo0bits>
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	2201      	movs	r2, #1
 80093f2:	6122      	str	r2, [r4, #16]
 80093f4:	3020      	adds	r0, #32
 80093f6:	e7e3      	b.n	80093c0 <__d2b+0x60>
 80093f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009400:	f8c9 0000 	str.w	r0, [r9]
 8009404:	6918      	ldr	r0, [r3, #16]
 8009406:	f7ff fd35 	bl	8008e74 <__hi0bits>
 800940a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800940e:	e7df      	b.n	80093d0 <__d2b+0x70>
 8009410:	08009c67 	.word	0x08009c67
 8009414:	08009cd8 	.word	0x08009cd8

08009418 <_calloc_r>:
 8009418:	b513      	push	{r0, r1, r4, lr}
 800941a:	434a      	muls	r2, r1
 800941c:	4611      	mov	r1, r2
 800941e:	9201      	str	r2, [sp, #4]
 8009420:	f000 f85a 	bl	80094d8 <_malloc_r>
 8009424:	4604      	mov	r4, r0
 8009426:	b118      	cbz	r0, 8009430 <_calloc_r+0x18>
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	2100      	movs	r1, #0
 800942c:	f7fd fe04 	bl	8007038 <memset>
 8009430:	4620      	mov	r0, r4
 8009432:	b002      	add	sp, #8
 8009434:	bd10      	pop	{r4, pc}
	...

08009438 <_free_r>:
 8009438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800943a:	2900      	cmp	r1, #0
 800943c:	d048      	beq.n	80094d0 <_free_r+0x98>
 800943e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009442:	9001      	str	r0, [sp, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f1a1 0404 	sub.w	r4, r1, #4
 800944a:	bfb8      	it	lt
 800944c:	18e4      	addlt	r4, r4, r3
 800944e:	f000 fae3 	bl	8009a18 <__malloc_lock>
 8009452:	4a20      	ldr	r2, [pc, #128]	; (80094d4 <_free_r+0x9c>)
 8009454:	9801      	ldr	r0, [sp, #4]
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	4615      	mov	r5, r2
 800945a:	b933      	cbnz	r3, 800946a <_free_r+0x32>
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	6014      	str	r4, [r2, #0]
 8009460:	b003      	add	sp, #12
 8009462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009466:	f000 badd 	b.w	8009a24 <__malloc_unlock>
 800946a:	42a3      	cmp	r3, r4
 800946c:	d90b      	bls.n	8009486 <_free_r+0x4e>
 800946e:	6821      	ldr	r1, [r4, #0]
 8009470:	1862      	adds	r2, r4, r1
 8009472:	4293      	cmp	r3, r2
 8009474:	bf04      	itt	eq
 8009476:	681a      	ldreq	r2, [r3, #0]
 8009478:	685b      	ldreq	r3, [r3, #4]
 800947a:	6063      	str	r3, [r4, #4]
 800947c:	bf04      	itt	eq
 800947e:	1852      	addeq	r2, r2, r1
 8009480:	6022      	streq	r2, [r4, #0]
 8009482:	602c      	str	r4, [r5, #0]
 8009484:	e7ec      	b.n	8009460 <_free_r+0x28>
 8009486:	461a      	mov	r2, r3
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	b10b      	cbz	r3, 8009490 <_free_r+0x58>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d9fa      	bls.n	8009486 <_free_r+0x4e>
 8009490:	6811      	ldr	r1, [r2, #0]
 8009492:	1855      	adds	r5, r2, r1
 8009494:	42a5      	cmp	r5, r4
 8009496:	d10b      	bne.n	80094b0 <_free_r+0x78>
 8009498:	6824      	ldr	r4, [r4, #0]
 800949a:	4421      	add	r1, r4
 800949c:	1854      	adds	r4, r2, r1
 800949e:	42a3      	cmp	r3, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	d1dd      	bne.n	8009460 <_free_r+0x28>
 80094a4:	681c      	ldr	r4, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	6053      	str	r3, [r2, #4]
 80094aa:	4421      	add	r1, r4
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	e7d7      	b.n	8009460 <_free_r+0x28>
 80094b0:	d902      	bls.n	80094b8 <_free_r+0x80>
 80094b2:	230c      	movs	r3, #12
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	e7d3      	b.n	8009460 <_free_r+0x28>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf04      	itt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	bf04      	itt	eq
 80094c8:	1949      	addeq	r1, r1, r5
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	6054      	str	r4, [r2, #4]
 80094ce:	e7c7      	b.n	8009460 <_free_r+0x28>
 80094d0:	b003      	add	sp, #12
 80094d2:	bd30      	pop	{r4, r5, pc}
 80094d4:	200001fc 	.word	0x200001fc

080094d8 <_malloc_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	1ccd      	adds	r5, r1, #3
 80094dc:	f025 0503 	bic.w	r5, r5, #3
 80094e0:	3508      	adds	r5, #8
 80094e2:	2d0c      	cmp	r5, #12
 80094e4:	bf38      	it	cc
 80094e6:	250c      	movcc	r5, #12
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	4606      	mov	r6, r0
 80094ec:	db01      	blt.n	80094f2 <_malloc_r+0x1a>
 80094ee:	42a9      	cmp	r1, r5
 80094f0:	d903      	bls.n	80094fa <_malloc_r+0x22>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	2000      	movs	r0, #0
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fa:	f000 fa8d 	bl	8009a18 <__malloc_lock>
 80094fe:	4921      	ldr	r1, [pc, #132]	; (8009584 <_malloc_r+0xac>)
 8009500:	680a      	ldr	r2, [r1, #0]
 8009502:	4614      	mov	r4, r2
 8009504:	b99c      	cbnz	r4, 800952e <_malloc_r+0x56>
 8009506:	4f20      	ldr	r7, [pc, #128]	; (8009588 <_malloc_r+0xb0>)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	b923      	cbnz	r3, 8009516 <_malloc_r+0x3e>
 800950c:	4621      	mov	r1, r4
 800950e:	4630      	mov	r0, r6
 8009510:	f000 f996 	bl	8009840 <_sbrk_r>
 8009514:	6038      	str	r0, [r7, #0]
 8009516:	4629      	mov	r1, r5
 8009518:	4630      	mov	r0, r6
 800951a:	f000 f991 	bl	8009840 <_sbrk_r>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d123      	bne.n	800956a <_malloc_r+0x92>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	4630      	mov	r0, r6
 8009528:	f000 fa7c 	bl	8009a24 <__malloc_unlock>
 800952c:	e7e3      	b.n	80094f6 <_malloc_r+0x1e>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	1b5b      	subs	r3, r3, r5
 8009532:	d417      	bmi.n	8009564 <_malloc_r+0x8c>
 8009534:	2b0b      	cmp	r3, #11
 8009536:	d903      	bls.n	8009540 <_malloc_r+0x68>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	441c      	add	r4, r3
 800953c:	6025      	str	r5, [r4, #0]
 800953e:	e004      	b.n	800954a <_malloc_r+0x72>
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	42a2      	cmp	r2, r4
 8009544:	bf0c      	ite	eq
 8009546:	600b      	streq	r3, [r1, #0]
 8009548:	6053      	strne	r3, [r2, #4]
 800954a:	4630      	mov	r0, r6
 800954c:	f000 fa6a 	bl	8009a24 <__malloc_unlock>
 8009550:	f104 000b 	add.w	r0, r4, #11
 8009554:	1d23      	adds	r3, r4, #4
 8009556:	f020 0007 	bic.w	r0, r0, #7
 800955a:	1ac2      	subs	r2, r0, r3
 800955c:	d0cc      	beq.n	80094f8 <_malloc_r+0x20>
 800955e:	1a1b      	subs	r3, r3, r0
 8009560:	50a3      	str	r3, [r4, r2]
 8009562:	e7c9      	b.n	80094f8 <_malloc_r+0x20>
 8009564:	4622      	mov	r2, r4
 8009566:	6864      	ldr	r4, [r4, #4]
 8009568:	e7cc      	b.n	8009504 <_malloc_r+0x2c>
 800956a:	1cc4      	adds	r4, r0, #3
 800956c:	f024 0403 	bic.w	r4, r4, #3
 8009570:	42a0      	cmp	r0, r4
 8009572:	d0e3      	beq.n	800953c <_malloc_r+0x64>
 8009574:	1a21      	subs	r1, r4, r0
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f962 	bl	8009840 <_sbrk_r>
 800957c:	3001      	adds	r0, #1
 800957e:	d1dd      	bne.n	800953c <_malloc_r+0x64>
 8009580:	e7cf      	b.n	8009522 <_malloc_r+0x4a>
 8009582:	bf00      	nop
 8009584:	200001fc 	.word	0x200001fc
 8009588:	20000200 	.word	0x20000200

0800958c <__sfputc_r>:
 800958c:	6893      	ldr	r3, [r2, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	b410      	push	{r4}
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	da08      	bge.n	80095aa <__sfputc_r+0x1e>
 8009598:	6994      	ldr	r4, [r2, #24]
 800959a:	42a3      	cmp	r3, r4
 800959c:	db01      	blt.n	80095a2 <__sfputc_r+0x16>
 800959e:	290a      	cmp	r1, #10
 80095a0:	d103      	bne.n	80095aa <__sfputc_r+0x1e>
 80095a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a6:	f7fe ba47 	b.w	8007a38 <__swbuf_r>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	1c58      	adds	r0, r3, #1
 80095ae:	6010      	str	r0, [r2, #0]
 80095b0:	7019      	strb	r1, [r3, #0]
 80095b2:	4608      	mov	r0, r1
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <__sfputs_r>:
 80095ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	18d5      	adds	r5, r2, r3
 80095c4:	42ac      	cmp	r4, r5
 80095c6:	d101      	bne.n	80095cc <__sfputs_r+0x12>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e007      	b.n	80095dc <__sfputs_r+0x22>
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	463a      	mov	r2, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffda 	bl	800958c <__sfputc_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d1f3      	bne.n	80095c4 <__sfputs_r+0xa>
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e0 <_vfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	4614      	mov	r4, r2
 80095ea:	4698      	mov	r8, r3
 80095ec:	4606      	mov	r6, r0
 80095ee:	b118      	cbz	r0, 80095f8 <_vfiprintf_r+0x18>
 80095f0:	6983      	ldr	r3, [r0, #24]
 80095f2:	b90b      	cbnz	r3, 80095f8 <_vfiprintf_r+0x18>
 80095f4:	f7ff fa72 	bl	8008adc <__sinit>
 80095f8:	4b89      	ldr	r3, [pc, #548]	; (8009820 <_vfiprintf_r+0x240>)
 80095fa:	429d      	cmp	r5, r3
 80095fc:	d11b      	bne.n	8009636 <_vfiprintf_r+0x56>
 80095fe:	6875      	ldr	r5, [r6, #4]
 8009600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	d405      	bmi.n	8009612 <_vfiprintf_r+0x32>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	059a      	lsls	r2, r3, #22
 800960a:	d402      	bmi.n	8009612 <_vfiprintf_r+0x32>
 800960c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800960e:	f7ff fb08 	bl	8008c22 <__retarget_lock_acquire_recursive>
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	071b      	lsls	r3, r3, #28
 8009616:	d501      	bpl.n	800961c <_vfiprintf_r+0x3c>
 8009618:	692b      	ldr	r3, [r5, #16]
 800961a:	b9eb      	cbnz	r3, 8009658 <_vfiprintf_r+0x78>
 800961c:	4629      	mov	r1, r5
 800961e:	4630      	mov	r0, r6
 8009620:	f7fe fa5c 	bl	8007adc <__swsetup_r>
 8009624:	b1c0      	cbz	r0, 8009658 <_vfiprintf_r+0x78>
 8009626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009628:	07dc      	lsls	r4, r3, #31
 800962a:	d50e      	bpl.n	800964a <_vfiprintf_r+0x6a>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b01d      	add	sp, #116	; 0x74
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	4b7b      	ldr	r3, [pc, #492]	; (8009824 <_vfiprintf_r+0x244>)
 8009638:	429d      	cmp	r5, r3
 800963a:	d101      	bne.n	8009640 <_vfiprintf_r+0x60>
 800963c:	68b5      	ldr	r5, [r6, #8]
 800963e:	e7df      	b.n	8009600 <_vfiprintf_r+0x20>
 8009640:	4b79      	ldr	r3, [pc, #484]	; (8009828 <_vfiprintf_r+0x248>)
 8009642:	429d      	cmp	r5, r3
 8009644:	bf08      	it	eq
 8009646:	68f5      	ldreq	r5, [r6, #12]
 8009648:	e7da      	b.n	8009600 <_vfiprintf_r+0x20>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	0598      	lsls	r0, r3, #22
 800964e:	d4ed      	bmi.n	800962c <_vfiprintf_r+0x4c>
 8009650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009652:	f7ff fae7 	bl	8008c24 <__retarget_lock_release_recursive>
 8009656:	e7e9      	b.n	800962c <_vfiprintf_r+0x4c>
 8009658:	2300      	movs	r3, #0
 800965a:	9309      	str	r3, [sp, #36]	; 0x24
 800965c:	2320      	movs	r3, #32
 800965e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009662:	f8cd 800c 	str.w	r8, [sp, #12]
 8009666:	2330      	movs	r3, #48	; 0x30
 8009668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800982c <_vfiprintf_r+0x24c>
 800966c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009670:	f04f 0901 	mov.w	r9, #1
 8009674:	4623      	mov	r3, r4
 8009676:	469a      	mov	sl, r3
 8009678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967c:	b10a      	cbz	r2, 8009682 <_vfiprintf_r+0xa2>
 800967e:	2a25      	cmp	r2, #37	; 0x25
 8009680:	d1f9      	bne.n	8009676 <_vfiprintf_r+0x96>
 8009682:	ebba 0b04 	subs.w	fp, sl, r4
 8009686:	d00b      	beq.n	80096a0 <_vfiprintf_r+0xc0>
 8009688:	465b      	mov	r3, fp
 800968a:	4622      	mov	r2, r4
 800968c:	4629      	mov	r1, r5
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ff93 	bl	80095ba <__sfputs_r>
 8009694:	3001      	adds	r0, #1
 8009696:	f000 80aa 	beq.w	80097ee <_vfiprintf_r+0x20e>
 800969a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969c:	445a      	add	r2, fp
 800969e:	9209      	str	r2, [sp, #36]	; 0x24
 80096a0:	f89a 3000 	ldrb.w	r3, [sl]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80a2 	beq.w	80097ee <_vfiprintf_r+0x20e>
 80096aa:	2300      	movs	r3, #0
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b4:	f10a 0a01 	add.w	sl, sl, #1
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c0:	931a      	str	r3, [sp, #104]	; 0x68
 80096c2:	4654      	mov	r4, sl
 80096c4:	2205      	movs	r2, #5
 80096c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ca:	4858      	ldr	r0, [pc, #352]	; (800982c <_vfiprintf_r+0x24c>)
 80096cc:	f7f6 fd88 	bl	80001e0 <memchr>
 80096d0:	9a04      	ldr	r2, [sp, #16]
 80096d2:	b9d8      	cbnz	r0, 800970c <_vfiprintf_r+0x12c>
 80096d4:	06d1      	lsls	r1, r2, #27
 80096d6:	bf44      	itt	mi
 80096d8:	2320      	movmi	r3, #32
 80096da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096de:	0713      	lsls	r3, r2, #28
 80096e0:	bf44      	itt	mi
 80096e2:	232b      	movmi	r3, #43	; 0x2b
 80096e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e8:	f89a 3000 	ldrb.w	r3, [sl]
 80096ec:	2b2a      	cmp	r3, #42	; 0x2a
 80096ee:	d015      	beq.n	800971c <_vfiprintf_r+0x13c>
 80096f0:	9a07      	ldr	r2, [sp, #28]
 80096f2:	4654      	mov	r4, sl
 80096f4:	2000      	movs	r0, #0
 80096f6:	f04f 0c0a 	mov.w	ip, #10
 80096fa:	4621      	mov	r1, r4
 80096fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009700:	3b30      	subs	r3, #48	; 0x30
 8009702:	2b09      	cmp	r3, #9
 8009704:	d94e      	bls.n	80097a4 <_vfiprintf_r+0x1c4>
 8009706:	b1b0      	cbz	r0, 8009736 <_vfiprintf_r+0x156>
 8009708:	9207      	str	r2, [sp, #28]
 800970a:	e014      	b.n	8009736 <_vfiprintf_r+0x156>
 800970c:	eba0 0308 	sub.w	r3, r0, r8
 8009710:	fa09 f303 	lsl.w	r3, r9, r3
 8009714:	4313      	orrs	r3, r2
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	46a2      	mov	sl, r4
 800971a:	e7d2      	b.n	80096c2 <_vfiprintf_r+0xe2>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d19      	adds	r1, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9103      	str	r1, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfbb      	ittet	lt
 8009728:	425b      	neglt	r3, r3
 800972a:	f042 0202 	orrlt.w	r2, r2, #2
 800972e:	9307      	strge	r3, [sp, #28]
 8009730:	9307      	strlt	r3, [sp, #28]
 8009732:	bfb8      	it	lt
 8009734:	9204      	strlt	r2, [sp, #16]
 8009736:	7823      	ldrb	r3, [r4, #0]
 8009738:	2b2e      	cmp	r3, #46	; 0x2e
 800973a:	d10c      	bne.n	8009756 <_vfiprintf_r+0x176>
 800973c:	7863      	ldrb	r3, [r4, #1]
 800973e:	2b2a      	cmp	r3, #42	; 0x2a
 8009740:	d135      	bne.n	80097ae <_vfiprintf_r+0x1ce>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	1d1a      	adds	r2, r3, #4
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	9203      	str	r2, [sp, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	bfb8      	it	lt
 800974e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009752:	3402      	adds	r4, #2
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800983c <_vfiprintf_r+0x25c>
 800975a:	7821      	ldrb	r1, [r4, #0]
 800975c:	2203      	movs	r2, #3
 800975e:	4650      	mov	r0, sl
 8009760:	f7f6 fd3e 	bl	80001e0 <memchr>
 8009764:	b140      	cbz	r0, 8009778 <_vfiprintf_r+0x198>
 8009766:	2340      	movs	r3, #64	; 0x40
 8009768:	eba0 000a 	sub.w	r0, r0, sl
 800976c:	fa03 f000 	lsl.w	r0, r3, r0
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	4303      	orrs	r3, r0
 8009774:	3401      	adds	r4, #1
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	482c      	ldr	r0, [pc, #176]	; (8009830 <_vfiprintf_r+0x250>)
 800977e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009782:	2206      	movs	r2, #6
 8009784:	f7f6 fd2c 	bl	80001e0 <memchr>
 8009788:	2800      	cmp	r0, #0
 800978a:	d03f      	beq.n	800980c <_vfiprintf_r+0x22c>
 800978c:	4b29      	ldr	r3, [pc, #164]	; (8009834 <_vfiprintf_r+0x254>)
 800978e:	bb1b      	cbnz	r3, 80097d8 <_vfiprintf_r+0x1f8>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	3307      	adds	r3, #7
 8009794:	f023 0307 	bic.w	r3, r3, #7
 8009798:	3308      	adds	r3, #8
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979e:	443b      	add	r3, r7
 80097a0:	9309      	str	r3, [sp, #36]	; 0x24
 80097a2:	e767      	b.n	8009674 <_vfiprintf_r+0x94>
 80097a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a8:	460c      	mov	r4, r1
 80097aa:	2001      	movs	r0, #1
 80097ac:	e7a5      	b.n	80096fa <_vfiprintf_r+0x11a>
 80097ae:	2300      	movs	r3, #0
 80097b0:	3401      	adds	r4, #1
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c0:	3a30      	subs	r2, #48	; 0x30
 80097c2:	2a09      	cmp	r2, #9
 80097c4:	d903      	bls.n	80097ce <_vfiprintf_r+0x1ee>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0c5      	beq.n	8009756 <_vfiprintf_r+0x176>
 80097ca:	9105      	str	r1, [sp, #20]
 80097cc:	e7c3      	b.n	8009756 <_vfiprintf_r+0x176>
 80097ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d2:	4604      	mov	r4, r0
 80097d4:	2301      	movs	r3, #1
 80097d6:	e7f0      	b.n	80097ba <_vfiprintf_r+0x1da>
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b16      	ldr	r3, [pc, #88]	; (8009838 <_vfiprintf_r+0x258>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7fd fcd0 	bl	8007188 <_printf_float>
 80097e8:	4607      	mov	r7, r0
 80097ea:	1c78      	adds	r0, r7, #1
 80097ec:	d1d6      	bne.n	800979c <_vfiprintf_r+0x1bc>
 80097ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	d405      	bmi.n	8009800 <_vfiprintf_r+0x220>
 80097f4:	89ab      	ldrh	r3, [r5, #12]
 80097f6:	059a      	lsls	r2, r3, #22
 80097f8:	d402      	bmi.n	8009800 <_vfiprintf_r+0x220>
 80097fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fc:	f7ff fa12 	bl	8008c24 <__retarget_lock_release_recursive>
 8009800:	89ab      	ldrh	r3, [r5, #12]
 8009802:	065b      	lsls	r3, r3, #25
 8009804:	f53f af12 	bmi.w	800962c <_vfiprintf_r+0x4c>
 8009808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800980a:	e711      	b.n	8009630 <_vfiprintf_r+0x50>
 800980c:	ab03      	add	r3, sp, #12
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	462a      	mov	r2, r5
 8009812:	4b09      	ldr	r3, [pc, #36]	; (8009838 <_vfiprintf_r+0x258>)
 8009814:	a904      	add	r1, sp, #16
 8009816:	4630      	mov	r0, r6
 8009818:	f7fd ff5a 	bl	80076d0 <_printf_i>
 800981c:	e7e4      	b.n	80097e8 <_vfiprintf_r+0x208>
 800981e:	bf00      	nop
 8009820:	08009c98 	.word	0x08009c98
 8009824:	08009cb8 	.word	0x08009cb8
 8009828:	08009c78 	.word	0x08009c78
 800982c:	08009e34 	.word	0x08009e34
 8009830:	08009e3e 	.word	0x08009e3e
 8009834:	08007189 	.word	0x08007189
 8009838:	080095bb 	.word	0x080095bb
 800983c:	08009e3a 	.word	0x08009e3a

08009840 <_sbrk_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d06      	ldr	r5, [pc, #24]	; (800985c <_sbrk_r+0x1c>)
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f7 fdde 	bl	800140c <_sbrk>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_sbrk_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_sbrk_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20000380 	.word	0x20000380

08009860 <__sread>:
 8009860:	b510      	push	{r4, lr}
 8009862:	460c      	mov	r4, r1
 8009864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009868:	f000 f8e2 	bl	8009a30 <_read_r>
 800986c:	2800      	cmp	r0, #0
 800986e:	bfab      	itete	ge
 8009870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009872:	89a3      	ldrhlt	r3, [r4, #12]
 8009874:	181b      	addge	r3, r3, r0
 8009876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800987a:	bfac      	ite	ge
 800987c:	6563      	strge	r3, [r4, #84]	; 0x54
 800987e:	81a3      	strhlt	r3, [r4, #12]
 8009880:	bd10      	pop	{r4, pc}

08009882 <__swrite>:
 8009882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009886:	461f      	mov	r7, r3
 8009888:	898b      	ldrh	r3, [r1, #12]
 800988a:	05db      	lsls	r3, r3, #23
 800988c:	4605      	mov	r5, r0
 800988e:	460c      	mov	r4, r1
 8009890:	4616      	mov	r6, r2
 8009892:	d505      	bpl.n	80098a0 <__swrite+0x1e>
 8009894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009898:	2302      	movs	r3, #2
 800989a:	2200      	movs	r2, #0
 800989c:	f000 f898 	bl	80099d0 <_lseek_r>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	4632      	mov	r2, r6
 80098ae:	463b      	mov	r3, r7
 80098b0:	4628      	mov	r0, r5
 80098b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	f000 b817 	b.w	80098e8 <_write_r>

080098ba <__sseek>:
 80098ba:	b510      	push	{r4, lr}
 80098bc:	460c      	mov	r4, r1
 80098be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c2:	f000 f885 	bl	80099d0 <_lseek_r>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	bf15      	itete	ne
 80098cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098d6:	81a3      	strheq	r3, [r4, #12]
 80098d8:	bf18      	it	ne
 80098da:	81a3      	strhne	r3, [r4, #12]
 80098dc:	bd10      	pop	{r4, pc}

080098de <__sclose>:
 80098de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e2:	f000 b831 	b.w	8009948 <_close_r>
	...

080098e8 <_write_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d07      	ldr	r5, [pc, #28]	; (8009908 <_write_r+0x20>)
 80098ec:	4604      	mov	r4, r0
 80098ee:	4608      	mov	r0, r1
 80098f0:	4611      	mov	r1, r2
 80098f2:	2200      	movs	r2, #0
 80098f4:	602a      	str	r2, [r5, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f7f7 fd37 	bl	800136a <_write>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_write_r+0x1e>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_write_r+0x1e>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	20000380 	.word	0x20000380

0800990c <__assert_func>:
 800990c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800990e:	4614      	mov	r4, r2
 8009910:	461a      	mov	r2, r3
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <__assert_func+0x2c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4605      	mov	r5, r0
 8009918:	68d8      	ldr	r0, [r3, #12]
 800991a:	b14c      	cbz	r4, 8009930 <__assert_func+0x24>
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <__assert_func+0x30>)
 800991e:	9100      	str	r1, [sp, #0]
 8009920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009924:	4906      	ldr	r1, [pc, #24]	; (8009940 <__assert_func+0x34>)
 8009926:	462b      	mov	r3, r5
 8009928:	f000 f81e 	bl	8009968 <fiprintf>
 800992c:	f000 f89f 	bl	8009a6e <abort>
 8009930:	4b04      	ldr	r3, [pc, #16]	; (8009944 <__assert_func+0x38>)
 8009932:	461c      	mov	r4, r3
 8009934:	e7f3      	b.n	800991e <__assert_func+0x12>
 8009936:	bf00      	nop
 8009938:	2000000c 	.word	0x2000000c
 800993c:	08009e45 	.word	0x08009e45
 8009940:	08009e52 	.word	0x08009e52
 8009944:	08009e80 	.word	0x08009e80

08009948 <_close_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d06      	ldr	r5, [pc, #24]	; (8009964 <_close_r+0x1c>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	f7f7 fd25 	bl	80013a2 <_close>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_close_r+0x1a>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_close_r+0x1a>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20000380 	.word	0x20000380

08009968 <fiprintf>:
 8009968:	b40e      	push	{r1, r2, r3}
 800996a:	b503      	push	{r0, r1, lr}
 800996c:	4601      	mov	r1, r0
 800996e:	ab03      	add	r3, sp, #12
 8009970:	4805      	ldr	r0, [pc, #20]	; (8009988 <fiprintf+0x20>)
 8009972:	f853 2b04 	ldr.w	r2, [r3], #4
 8009976:	6800      	ldr	r0, [r0, #0]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	f7ff fe31 	bl	80095e0 <_vfiprintf_r>
 800997e:	b002      	add	sp, #8
 8009980:	f85d eb04 	ldr.w	lr, [sp], #4
 8009984:	b003      	add	sp, #12
 8009986:	4770      	bx	lr
 8009988:	2000000c 	.word	0x2000000c

0800998c <_fstat_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	; (80099ac <_fstat_r+0x20>)
 8009990:	2300      	movs	r3, #0
 8009992:	4604      	mov	r4, r0
 8009994:	4608      	mov	r0, r1
 8009996:	4611      	mov	r1, r2
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	f7f7 fd0e 	bl	80013ba <_fstat>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d102      	bne.n	80099a8 <_fstat_r+0x1c>
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	b103      	cbz	r3, 80099a8 <_fstat_r+0x1c>
 80099a6:	6023      	str	r3, [r4, #0]
 80099a8:	bd38      	pop	{r3, r4, r5, pc}
 80099aa:	bf00      	nop
 80099ac:	20000380 	.word	0x20000380

080099b0 <_isatty_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d06      	ldr	r5, [pc, #24]	; (80099cc <_isatty_r+0x1c>)
 80099b4:	2300      	movs	r3, #0
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7f7 fd0d 	bl	80013da <_isatty>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_isatty_r+0x1a>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_isatty_r+0x1a>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	20000380 	.word	0x20000380

080099d0 <_lseek_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d07      	ldr	r5, [pc, #28]	; (80099f0 <_lseek_r+0x20>)
 80099d4:	4604      	mov	r4, r0
 80099d6:	4608      	mov	r0, r1
 80099d8:	4611      	mov	r1, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	602a      	str	r2, [r5, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	f7f7 fd06 	bl	80013f0 <_lseek>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d102      	bne.n	80099ee <_lseek_r+0x1e>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	b103      	cbz	r3, 80099ee <_lseek_r+0x1e>
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	20000380 	.word	0x20000380

080099f4 <__ascii_mbtowc>:
 80099f4:	b082      	sub	sp, #8
 80099f6:	b901      	cbnz	r1, 80099fa <__ascii_mbtowc+0x6>
 80099f8:	a901      	add	r1, sp, #4
 80099fa:	b142      	cbz	r2, 8009a0e <__ascii_mbtowc+0x1a>
 80099fc:	b14b      	cbz	r3, 8009a12 <__ascii_mbtowc+0x1e>
 80099fe:	7813      	ldrb	r3, [r2, #0]
 8009a00:	600b      	str	r3, [r1, #0]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	1e10      	subs	r0, r2, #0
 8009a06:	bf18      	it	ne
 8009a08:	2001      	movne	r0, #1
 8009a0a:	b002      	add	sp, #8
 8009a0c:	4770      	bx	lr
 8009a0e:	4610      	mov	r0, r2
 8009a10:	e7fb      	b.n	8009a0a <__ascii_mbtowc+0x16>
 8009a12:	f06f 0001 	mvn.w	r0, #1
 8009a16:	e7f8      	b.n	8009a0a <__ascii_mbtowc+0x16>

08009a18 <__malloc_lock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__malloc_lock+0x8>)
 8009a1a:	f7ff b902 	b.w	8008c22 <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20000378 	.word	0x20000378

08009a24 <__malloc_unlock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__malloc_unlock+0x8>)
 8009a26:	f7ff b8fd 	b.w	8008c24 <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20000378 	.word	0x20000378

08009a30 <_read_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d07      	ldr	r5, [pc, #28]	; (8009a50 <_read_r+0x20>)
 8009a34:	4604      	mov	r4, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	4611      	mov	r1, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	602a      	str	r2, [r5, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7f7 fc76 	bl	8001330 <_read>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_read_r+0x1e>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_read_r+0x1e>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20000380 	.word	0x20000380

08009a54 <__ascii_wctomb>:
 8009a54:	b149      	cbz	r1, 8009a6a <__ascii_wctomb+0x16>
 8009a56:	2aff      	cmp	r2, #255	; 0xff
 8009a58:	bf85      	ittet	hi
 8009a5a:	238a      	movhi	r3, #138	; 0x8a
 8009a5c:	6003      	strhi	r3, [r0, #0]
 8009a5e:	700a      	strbls	r2, [r1, #0]
 8009a60:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a64:	bf98      	it	ls
 8009a66:	2001      	movls	r0, #1
 8009a68:	4770      	bx	lr
 8009a6a:	4608      	mov	r0, r1
 8009a6c:	4770      	bx	lr

08009a6e <abort>:
 8009a6e:	b508      	push	{r3, lr}
 8009a70:	2006      	movs	r0, #6
 8009a72:	f000 f82b 	bl	8009acc <raise>
 8009a76:	2001      	movs	r0, #1
 8009a78:	f7f7 fc50 	bl	800131c <_exit>

08009a7c <_raise_r>:
 8009a7c:	291f      	cmp	r1, #31
 8009a7e:	b538      	push	{r3, r4, r5, lr}
 8009a80:	4604      	mov	r4, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	d904      	bls.n	8009a90 <_raise_r+0x14>
 8009a86:	2316      	movs	r3, #22
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a92:	b112      	cbz	r2, 8009a9a <_raise_r+0x1e>
 8009a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a98:	b94b      	cbnz	r3, 8009aae <_raise_r+0x32>
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 f830 	bl	8009b00 <_getpid_r>
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aaa:	f000 b817 	b.w	8009adc <_kill_r>
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d00a      	beq.n	8009ac8 <_raise_r+0x4c>
 8009ab2:	1c59      	adds	r1, r3, #1
 8009ab4:	d103      	bne.n	8009abe <_raise_r+0x42>
 8009ab6:	2316      	movs	r3, #22
 8009ab8:	6003      	str	r3, [r0, #0]
 8009aba:	2001      	movs	r0, #1
 8009abc:	e7e7      	b.n	8009a8e <_raise_r+0x12>
 8009abe:	2400      	movs	r4, #0
 8009ac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	4798      	blx	r3
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e7e0      	b.n	8009a8e <_raise_r+0x12>

08009acc <raise>:
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <raise+0xc>)
 8009ace:	4601      	mov	r1, r0
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	f7ff bfd3 	b.w	8009a7c <_raise_r>
 8009ad6:	bf00      	nop
 8009ad8:	2000000c 	.word	0x2000000c

08009adc <_kill_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	; (8009afc <_kill_r+0x20>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f7f7 fc07 	bl	80012fc <_kill>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d102      	bne.n	8009af8 <_kill_r+0x1c>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b103      	cbz	r3, 8009af8 <_kill_r+0x1c>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	20000380 	.word	0x20000380

08009b00 <_getpid_r>:
 8009b00:	f7f7 bbf4 	b.w	80012ec <_getpid>

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
